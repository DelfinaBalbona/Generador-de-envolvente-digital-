
Filtro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f8  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006588  08006588  00016588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006628  08006628  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006628  08006628  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006628  08006628  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006628  08006628  00016628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006630  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000070  080066a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080066a0  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f715  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d2  00000000  00000000  0002f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3b  00000000  00000000  00032bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f5a  00000000  00000000  000337f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011243  00000000  00000000  0005574d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6a6a  00000000  00000000  00066990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a0c  00000000  00000000  0013d3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00141e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006570 	.word	0x08006570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006570 	.word	0x08006570

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 fe6b 	bl	80018ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 fada 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 fc72 	bl	80014d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bec:	f000 fc52 	bl	8001494 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bf0:	f000 fb36 	bl	8001260 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000bf4:	f000 fbca 	bl	800138c <MX_DAC1_Init>
  MX_TIM1_Init();
 8000bf8:	f000 fbfa 	bl	80013f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	48cc      	ldr	r0, [pc, #816]	; (8000f30 <main+0x358>)
 8000c00:	f002 f8c5 	bl	8002d8e <HAL_DAC_Start>
  	HAL_TIM_Base_Start_IT(&htim1);
 8000c04:	48cb      	ldr	r0, [pc, #812]	; (8000f34 <main+0x35c>)
 8000c06:	f003 ff99 	bl	8004b3c <HAL_TIM_Base_Start_IT>
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValues, 4);
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	49ca      	ldr	r1, [pc, #808]	; (8000f38 <main+0x360>)
 8000c0e:	48cb      	ldr	r0, [pc, #812]	; (8000f3c <main+0x364>)
 8000c10:	f001 f9f6 	bl	8002000 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flag_filtro == 1)
 8000c14:	4bca      	ldr	r3, [pc, #808]	; (8000f40 <main+0x368>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d1fb      	bne.n	8000c14 <main+0x3c>
	  {
		  flag_filtro = 0;
 8000c1c:	4bc8      	ldr	r3, [pc, #800]	; (8000f40 <main+0x368>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]

		  in = adcValues[2]*(3.3/4095);
 8000c22:	4bc5      	ldr	r3, [pc, #788]	; (8000f38 <main+0x360>)
 8000c24:	889b      	ldrh	r3, [r3, #4]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc24 	bl	8000474 <__aeabi_i2d>
 8000c2c:	a3b2      	add	r3, pc, #712	; (adr r3, 8000ef8 <main+0x320>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	f7ff fc89 	bl	8000548 <__aeabi_dmul>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff ff7b 	bl	8000b38 <__aeabi_d2f>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4abf      	ldr	r2, [pc, #764]	; (8000f44 <main+0x36c>)
 8000c46:	6013      	str	r3, [r2, #0]

		  if(fabs(fc_a - adcValues[0]) > 15 || fabs(k_a -adcValues[1]) > 15)
 8000c48:	4bbf      	ldr	r3, [pc, #764]	; (8000f48 <main+0x370>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4bba      	ldr	r3, [pc, #744]	; (8000f38 <main+0x360>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fc0d 	bl	8000474 <__aeabi_i2d>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4614      	mov	r4, r2
 8000c60:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000c64:	f04f 0200 	mov.w	r2, #0
 8000c68:	4bb8      	ldr	r3, [pc, #736]	; (8000f4c <main+0x374>)
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	4629      	mov	r1, r5
 8000c6e:	f7ff fefb 	bl	8000a68 <__aeabi_dcmpgt>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d118      	bne.n	8000caa <main+0xd2>
 8000c78:	4bb5      	ldr	r3, [pc, #724]	; (8000f50 <main+0x378>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4bae      	ldr	r3, [pc, #696]	; (8000f38 <main+0x360>)
 8000c80:	885b      	ldrh	r3, [r3, #2]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fbf5 	bl	8000474 <__aeabi_i2d>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4690      	mov	r8, r2
 8000c90:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	4bac      	ldr	r3, [pc, #688]	; (8000f4c <main+0x374>)
 8000c9a:	4640      	mov	r0, r8
 8000c9c:	4649      	mov	r1, r9
 8000c9e:	f7ff fee3 	bl	8000a68 <__aeabi_dcmpgt>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 81a7 	beq.w	8000ff8 <main+0x420>
		  {

			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0.0);
 8000caa:	2300      	movs	r3, #0
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	489f      	ldr	r0, [pc, #636]	; (8000f30 <main+0x358>)
 8000cb2:	f002 f8b9 	bl	8002e28 <HAL_DAC_SetValue>

			  fc = adcValues[0]*(20000.0/4095);
 8000cb6:	4ba0      	ldr	r3, [pc, #640]	; (8000f38 <main+0x360>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fbda 	bl	8000474 <__aeabi_i2d>
 8000cc0:	a38f      	add	r3, pc, #572	; (adr r3, 8000f00 <main+0x328>)
 8000cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc6:	f7ff fc3f 	bl	8000548 <__aeabi_dmul>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	4610      	mov	r0, r2
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f7ff ff31 	bl	8000b38 <__aeabi_d2f>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a9e      	ldr	r2, [pc, #632]	; (8000f54 <main+0x37c>)
 8000cda:	6013      	str	r3, [r2, #0]

			  if(fc < 20.0)
 8000cdc:	4b9d      	ldr	r3, [pc, #628]	; (8000f54 <main+0x37c>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cee:	d502      	bpl.n	8000cf6 <main+0x11e>
			  {
				  fc = 20.0;
 8000cf0:	4b98      	ldr	r3, [pc, #608]	; (8000f54 <main+0x37c>)
 8000cf2:	4a99      	ldr	r2, [pc, #612]	; (8000f58 <main+0x380>)
 8000cf4:	601a      	str	r2, [r3, #0]
			  }

			  fc_a = adcValues[0];
 8000cf6:	4b90      	ldr	r3, [pc, #576]	; (8000f38 <main+0x360>)
 8000cf8:	881a      	ldrh	r2, [r3, #0]
 8000cfa:	4b93      	ldr	r3, [pc, #588]	; (8000f48 <main+0x370>)
 8000cfc:	801a      	strh	r2, [r3, #0]
			  k = adcValues[1]*(3.99/4095);
 8000cfe:	4b8e      	ldr	r3, [pc, #568]	; (8000f38 <main+0x360>)
 8000d00:	885b      	ldrh	r3, [r3, #2]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fbb6 	bl	8000474 <__aeabi_i2d>
 8000d08:	a37f      	add	r3, pc, #508	; (adr r3, 8000f08 <main+0x330>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	f7ff fc1b 	bl	8000548 <__aeabi_dmul>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f7ff ff0d 	bl	8000b38 <__aeabi_d2f>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a8e      	ldr	r2, [pc, #568]	; (8000f5c <main+0x384>)
 8000d22:	6013      	str	r3, [r2, #0]
			  k_a = adcValues[1];
 8000d24:	4b84      	ldr	r3, [pc, #528]	; (8000f38 <main+0x360>)
 8000d26:	885a      	ldrh	r2, [r3, #2]
 8000d28:	4b89      	ldr	r3, [pc, #548]	; (8000f50 <main+0x378>)
 8000d2a:	801a      	strh	r2, [r3, #0]

			  wcd = 2*M_PI*fc; //2 us
 8000d2c:	4b89      	ldr	r3, [pc, #548]	; (8000f54 <main+0x37c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fbb1 	bl	8000498 <__aeabi_f2d>
 8000d36:	a376      	add	r3, pc, #472	; (adr r3, 8000f10 <main+0x338>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f7ff fc04 	bl	8000548 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fef6 	bl	8000b38 <__aeabi_d2f>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a84      	ldr	r2, [pc, #528]	; (8000f60 <main+0x388>)
 8000d50:	6013      	str	r3, [r2, #0]
			  //wca = 2*fs*tan(((1/fs)/2)*wcd); //40 us
			  wca = wcd;
 8000d52:	4b83      	ldr	r3, [pc, #524]	; (8000f60 <main+0x388>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a83      	ldr	r2, [pc, #524]	; (8000f64 <main+0x38c>)
 8000d58:	6013      	str	r3, [r2, #0]
			  g = 1 - exp(-wca/fs); //40 us
 8000d5a:	4b82      	ldr	r3, [pc, #520]	; (8000f64 <main+0x38c>)
 8000d5c:	edd3 7a00 	vldr	s15, [r3]
 8000d60:	eeb1 7a67 	vneg.f32	s14, s15
 8000d64:	4b80      	ldr	r3, [pc, #512]	; (8000f68 <main+0x390>)
 8000d66:	edd3 7a00 	vldr	s15, [r3]
 8000d6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d6e:	ee16 0a90 	vmov	r0, s13
 8000d72:	f7ff fb91 	bl	8000498 <__aeabi_f2d>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	ec43 2b10 	vmov	d0, r2, r3
 8000d7e:	f004 faf3 	bl	8005368 <exp>
 8000d82:	ec53 2b10 	vmov	r2, r3, d0
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4978      	ldr	r1, [pc, #480]	; (8000f6c <main+0x394>)
 8000d8c:	f7ff fa24 	bl	80001d8 <__aeabi_dsub>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff fece 	bl	8000b38 <__aeabi_d2f>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a74      	ldr	r2, [pc, #464]	; (8000f70 <main+0x398>)
 8000da0:	6013      	str	r3, [r2, #0]

			  c1 = 4*(g-1)+(k/2)*pow(g,4);
 8000da2:	4b73      	ldr	r3, [pc, #460]	; (8000f70 <main+0x398>)
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000db0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db8:	ee17 0a90 	vmov	r0, s15
 8000dbc:	f7ff fb6c 	bl	8000498 <__aeabi_f2d>
 8000dc0:	4682      	mov	sl, r0
 8000dc2:	468b      	mov	fp, r1
 8000dc4:	4b65      	ldr	r3, [pc, #404]	; (8000f5c <main+0x384>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000dce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000dd2:	ee16 0a90 	vmov	r0, s13
 8000dd6:	f7ff fb5f 	bl	8000498 <__aeabi_f2d>
 8000dda:	e9c7 0100 	strd	r0, r1, [r7]
 8000dde:	4b64      	ldr	r3, [pc, #400]	; (8000f70 <main+0x398>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fb58 	bl	8000498 <__aeabi_f2d>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8000f18 <main+0x340>
 8000df0:	ec43 2b10 	vmov	d0, r2, r3
 8000df4:	f004 fb00 	bl	80053f8 <pow>
 8000df8:	ec53 2b10 	vmov	r2, r3, d0
 8000dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e00:	f7ff fba2 	bl	8000548 <__aeabi_dmul>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4650      	mov	r0, sl
 8000e0a:	4659      	mov	r1, fp
 8000e0c:	f7ff f9e6 	bl	80001dc <__adddf3>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fe8e 	bl	8000b38 <__aeabi_d2f>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4a55      	ldr	r2, [pc, #340]	; (8000f74 <main+0x39c>)
 8000e20:	6013      	str	r3, [r2, #0]
			  c2 = 6*pow((g-1),2)+(k/2)*pow(g,4);
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <main+0x398>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e30:	ee17 0a90 	vmov	r0, s15
 8000e34:	f7ff fb30 	bl	8000498 <__aeabi_f2d>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8000f20 <main+0x348>
 8000e40:	ec43 2b10 	vmov	d0, r2, r3
 8000e44:	f004 fad8 	bl	80053f8 <pow>
 8000e48:	ec51 0b10 	vmov	r0, r1, d0
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <main+0x3a0>)
 8000e52:	f7ff fb79 	bl	8000548 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	e9c7 2300 	strd	r2, r3, [r7]
 8000e5e:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <main+0x384>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e6c:	ee16 0a90 	vmov	r0, s13
 8000e70:	f7ff fb12 	bl	8000498 <__aeabi_f2d>
 8000e74:	4682      	mov	sl, r0
 8000e76:	468b      	mov	fp, r1
 8000e78:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <main+0x398>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fb0b 	bl	8000498 <__aeabi_f2d>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8000f18 <main+0x340>
 8000e8a:	ec43 2b10 	vmov	d0, r2, r3
 8000e8e:	f004 fab3 	bl	80053f8 <pow>
 8000e92:	ec53 2b10 	vmov	r2, r3, d0
 8000e96:	4650      	mov	r0, sl
 8000e98:	4659      	mov	r1, fp
 8000e9a:	f7ff fb55 	bl	8000548 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ea6:	f7ff f999 	bl	80001dc <__adddf3>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f7ff fe41 	bl	8000b38 <__aeabi_d2f>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a30      	ldr	r2, [pc, #192]	; (8000f7c <main+0x3a4>)
 8000eba:	6013      	str	r3, [r2, #0]
			  c3 = 4*pow((g-1),3);
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <main+0x398>)
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eca:	ee17 0a90 	vmov	r0, s15
 8000ece:	f7ff fae3 	bl	8000498 <__aeabi_f2d>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8000f28 <main+0x350>
 8000eda:	ec43 2b10 	vmov	d0, r2, r3
 8000ede:	f004 fa8b 	bl	80053f8 <pow>
 8000ee2:	ec51 0b10 	vmov	r0, r1, d0
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <main+0x3a8>)
 8000eec:	f7ff fb2c 	bl	8000548 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	e047      	b.n	8000f84 <main+0x3ac>
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	e734d9b4 	.word	0xe734d9b4
 8000efc:	3f4a680c 	.word	0x3f4a680c
 8000f00:	93893894 	.word	0x93893894
 8000f04:	40138938 	.word	0x40138938
 8000f08:	f6f7c168 	.word	0xf6f7c168
 8000f0c:	3f4fed83 	.word	0x3f4fed83
 8000f10:	54442d18 	.word	0x54442d18
 8000f14:	401921fb 	.word	0x401921fb
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	40100000 	.word	0x40100000
 8000f20:	00000000 	.word	0x00000000
 8000f24:	40000000 	.word	0x40000000
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	40080000 	.word	0x40080000
 8000f30:	20000138 	.word	0x20000138
 8000f34:	2000014c 	.word	0x2000014c
 8000f38:	20000198 	.word	0x20000198
 8000f3c:	2000008c 	.word	0x2000008c
 8000f40:	200001bc 	.word	0x200001bc
 8000f44:	200001c0 	.word	0x200001c0
 8000f48:	200001a0 	.word	0x200001a0
 8000f4c:	402e0000 	.word	0x402e0000
 8000f50:	200001a2 	.word	0x200001a2
 8000f54:	200001a4 	.word	0x200001a4
 8000f58:	41a00000 	.word	0x41a00000
 8000f5c:	200001a8 	.word	0x200001a8
 8000f60:	200001ac 	.word	0x200001ac
 8000f64:	200001b0 	.word	0x200001b0
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	3ff00000 	.word	0x3ff00000
 8000f70:	200001b4 	.word	0x200001b4
 8000f74:	200001d8 	.word	0x200001d8
 8000f78:	40180000 	.word	0x40180000
 8000f7c:	200001dc 	.word	0x200001dc
 8000f80:	40100000 	.word	0x40100000
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fdd5 	bl	8000b38 <__aeabi_d2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a75      	ldr	r2, [pc, #468]	; (8001168 <main+0x590>)
 8000f92:	6013      	str	r3, [r2, #0]
			  c4 = pow((g-1),4);
 8000f94:	4b75      	ldr	r3, [pc, #468]	; (800116c <main+0x594>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fa2:	ee17 0a90 	vmov	r0, s15
 8000fa6:	f7ff fa77 	bl	8000498 <__aeabi_f2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 8001158 <main+0x580>
 8000fb2:	ec43 2b10 	vmov	d0, r2, r3
 8000fb6:	f004 fa1f 	bl	80053f8 <pow>
 8000fba:	ec53 2b10 	vmov	r2, r3, d0
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fdb9 	bl	8000b38 <__aeabi_d2f>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a69      	ldr	r2, [pc, #420]	; (8001170 <main+0x598>)
 8000fca:	6013      	str	r3, [r2, #0]
			  cp = pow(g,4);
 8000fcc:	4b67      	ldr	r3, [pc, #412]	; (800116c <main+0x594>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa61 	bl	8000498 <__aeabi_f2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8001158 <main+0x580>
 8000fde:	ec43 2b10 	vmov	d0, r2, r3
 8000fe2:	f004 fa09 	bl	80053f8 <pow>
 8000fe6:	ec53 2b10 	vmov	r2, r3, d0
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fda3 	bl	8000b38 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a5f      	ldr	r2, [pc, #380]	; (8001174 <main+0x59c>)
 8000ff6:	6013      	str	r3, [r2, #0]
		  }

		  yd[0] = in*cp - c1 * yd[1] - c2*yd[2] - yd[3]*c3 - yd[4]*c4 ;
 8000ff8:	4b5f      	ldr	r3, [pc, #380]	; (8001178 <main+0x5a0>)
 8000ffa:	ed93 7a00 	vldr	s14, [r3]
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <main+0x59c>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001008:	4b5c      	ldr	r3, [pc, #368]	; (800117c <main+0x5a4>)
 800100a:	edd3 6a01 	vldr	s13, [r3, #4]
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <main+0x5a8>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001018:	ee37 7a67 	vsub.f32	s14, s14, s15
 800101c:	4b57      	ldr	r3, [pc, #348]	; (800117c <main+0x5a4>)
 800101e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <main+0x5ac>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001030:	4b52      	ldr	r3, [pc, #328]	; (800117c <main+0x5a4>)
 8001032:	edd3 6a03 	vldr	s13, [r3, #12]
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <main+0x590>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <main+0x5a4>)
 8001046:	edd3 6a04 	vldr	s13, [r3, #16]
 800104a:	4b49      	ldr	r3, [pc, #292]	; (8001170 <main+0x598>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <main+0x5a4>)
 800105a:	edc3 7a00 	vstr	s15, [r3]

		  ys = yd[0] * (1+k);
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <main+0x5a4>)
 8001060:	ed93 7a00 	vldr	s14, [r3]
 8001064:	4b48      	ldr	r3, [pc, #288]	; (8001188 <main+0x5b0>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800106e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001076:	4b45      	ldr	r3, [pc, #276]	; (800118c <main+0x5b4>)
 8001078:	edc3 7a00 	vstr	s15, [r3]

		  if(ys < 0.0)
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <main+0x5b4>)
 800107e:	edd3 7a00 	vldr	s15, [r3]
 8001082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	d504      	bpl.n	8001096 <main+0x4be>
		  {
			  ys = 0.0;
 800108c:	4b3f      	ldr	r3, [pc, #252]	; (800118c <main+0x5b4>)
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e00f      	b.n	80010b6 <main+0x4de>
		  }
		  else if(ys > 3.3)
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <main+0x5b4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f9fc 	bl	8000498 <__aeabi_f2d>
 80010a0:	a32f      	add	r3, pc, #188	; (adr r3, 8001160 <main+0x588>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff fcdf 	bl	8000a68 <__aeabi_dcmpgt>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <main+0x4de>
		  {
			  ys = 3.3;
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <main+0x5b4>)
 80010b2:	4a37      	ldr	r2, [pc, #220]	; (8001190 <main+0x5b8>)
 80010b4:	601a      	str	r2, [r3, #0]
		  }

		  if (!isnan(yd[0]))
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <main+0x5a4>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	eef4 7a67 	vcmp.f32	s15, s15
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	d614      	bvs.n	80010f0 <main+0x518>
		  {
			  for(int i = 4; i > 0; i--)
 80010c6:	2304      	movs	r3, #4
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e00d      	b.n	80010e8 <main+0x510>
			  {
				  yd[i] = yd[i-1];
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	4a2a      	ldr	r2, [pc, #168]	; (800117c <main+0x5a4>)
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4928      	ldr	r1, [pc, #160]	; (800117c <main+0x5a4>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	601a      	str	r2, [r3, #0]
			  for(int i = 4; i > 0; i--)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dcee      	bgt.n	80010cc <main+0x4f4>
 80010ee:	e013      	b.n	8001118 <main+0x540>
			  }
		  }
		  else
		  {
			  yd[0] = 0.0;
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <main+0x5a4>)
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
			  yd[1] = 0.0;
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <main+0x5a4>)
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
			  yd[2] = 0.0;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <main+0x5a4>)
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
			  yd[3] = 0.0;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <main+0x5a4>)
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
			  yd[4] = 0.0;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <main+0x5a4>)
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
		  }

		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, ys*4095/3.3);
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <main+0x5b4>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001194 <main+0x5bc>
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	ee17 0a90 	vmov	r0, s15
 800112a:	f7ff f9b5 	bl	8000498 <__aeabi_f2d>
 800112e:	a30c      	add	r3, pc, #48	; (adr r3, 8001160 <main+0x588>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fb32 	bl	800079c <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fcda 	bl	8000af8 <__aeabi_d2uiz>
 8001144:	4603      	mov	r3, r0
 8001146:	2200      	movs	r2, #0
 8001148:	2110      	movs	r1, #16
 800114a:	4813      	ldr	r0, [pc, #76]	; (8001198 <main+0x5c0>)
 800114c:	f001 fe6c 	bl	8002e28 <HAL_DAC_SetValue>
	  if(flag_filtro == 1)
 8001150:	e560      	b.n	8000c14 <main+0x3c>
 8001152:	bf00      	nop
 8001154:	f3af 8000 	nop.w
 8001158:	00000000 	.word	0x00000000
 800115c:	40100000 	.word	0x40100000
 8001160:	66666666 	.word	0x66666666
 8001164:	400a6666 	.word	0x400a6666
 8001168:	200001e0 	.word	0x200001e0
 800116c:	200001b4 	.word	0x200001b4
 8001170:	200001e4 	.word	0x200001e4
 8001174:	200001e8 	.word	0x200001e8
 8001178:	200001c0 	.word	0x200001c0
 800117c:	200001c4 	.word	0x200001c4
 8001180:	200001d8 	.word	0x200001d8
 8001184:	200001dc 	.word	0x200001dc
 8001188:	200001a8 	.word	0x200001a8
 800118c:	200001b8 	.word	0x200001b8
 8001190:	40533333 	.word	0x40533333
 8001194:	457ff000 	.word	0x457ff000
 8001198:	20000138 	.word	0x20000138

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b096      	sub	sp, #88	; 0x58
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2244      	movs	r2, #68	; 0x44
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 f8aa 	bl	8005304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c2:	f002 fb15 	bl	80037f0 <HAL_PWREx_ControlVoltageScaling>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011cc:	f000 f9da 	bl	8001584 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011d0:	f002 faf0 	bl	80037b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <SystemClock_Config+0xc0>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011da:	4a20      	ldr	r2, [pc, #128]	; (800125c <SystemClock_Config+0xc0>)
 80011dc:	f023 0318 	bic.w	r3, r3, #24
 80011e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011e4:	2314      	movs	r3, #20
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011f4:	2360      	movs	r3, #96	; 0x60
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011fc:	2301      	movs	r3, #1
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001204:	2328      	movs	r3, #40	; 0x28
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001208:	2307      	movs	r3, #7
 800120a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fb3f 	bl	800389c <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001224:	f000 f9ae 	bl	8001584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2303      	movs	r3, #3
 800122e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f002 ff3f 	bl	80040c4 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800124c:	f000 f99a 	bl	8001584 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001250:	f003 fb1a 	bl	8004888 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001254:	bf00      	nop
 8001256:	3758      	adds	r7, #88	; 0x58
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001266:	463b      	mov	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <MX_ADC1_Init+0x114>)
 8001278:	4a3f      	ldr	r2, [pc, #252]	; (8001378 <MX_ADC1_Init+0x118>)
 800127a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <MX_ADC1_Init+0x114>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <MX_ADC1_Init+0x114>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <MX_ADC1_Init+0x114>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800128e:	4b39      	ldr	r3, [pc, #228]	; (8001374 <MX_ADC1_Init+0x114>)
 8001290:	2201      	movs	r2, #1
 8001292:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001294:	4b37      	ldr	r3, [pc, #220]	; (8001374 <MX_ADC1_Init+0x114>)
 8001296:	2208      	movs	r2, #8
 8001298:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <MX_ADC1_Init+0x114>)
 800129c:	2200      	movs	r2, #0
 800129e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <MX_ADC1_Init+0x114>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <MX_ADC1_Init+0x114>)
 80012a8:	2204      	movs	r2, #4
 80012aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <MX_ADC1_Init+0x114>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <MX_ADC1_Init+0x114>)
 80012b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_ADC1_Init+0x114>)
 80012be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_ADC1_Init+0x114>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <MX_ADC1_Init+0x114>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_ADC1_Init+0x114>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012da:	4826      	ldr	r0, [pc, #152]	; (8001374 <MX_ADC1_Init+0x114>)
 80012dc:	f000 fd4e 	bl	8001d7c <HAL_ADC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012e6:	f000 f94d 	bl	8001584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <MX_ADC1_Init+0x11c>)
 80012ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ee:	2306      	movs	r3, #6
 80012f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012f6:	237f      	movs	r3, #127	; 0x7f
 80012f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012fa:	2304      	movs	r3, #4
 80012fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	481b      	ldr	r0, [pc, #108]	; (8001374 <MX_ADC1_Init+0x114>)
 8001308:	f000 ff12 	bl	8002130 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001312:	f000 f937 	bl	8001584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_ADC1_Init+0x120>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800131a:	230c      	movs	r3, #12
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <MX_ADC1_Init+0x114>)
 8001324:	f000 ff04 	bl	8002130 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800132e:	f000 f929 	bl	8001584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_ADC1_Init+0x124>)
 8001334:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001336:	2312      	movs	r3, #18
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_ADC1_Init+0x114>)
 8001340:	f000 fef6 	bl	8002130 <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800134a:	f000 f91b 	bl	8001584 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_ADC1_Init+0x128>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001352:	2318      	movs	r3, #24
 8001354:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_ADC1_Init+0x114>)
 800135c:	f000 fee8 	bl	8002130 <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8001366:	f000 f90d 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000008c 	.word	0x2000008c
 8001378:	50040000 	.word	0x50040000
 800137c:	14f00020 	.word	0x14f00020
 8001380:	19200040 	.word	0x19200040
 8001384:	1d500080 	.word	0x1d500080
 8001388:	21800100 	.word	0x21800100

0800138c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2224      	movs	r2, #36	; 0x24
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f003 ffb3 	bl	8005304 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_DAC1_Init+0x5c>)
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_DAC1_Init+0x60>)
 80013a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013a4:	4810      	ldr	r0, [pc, #64]	; (80013e8 <MX_DAC1_Init+0x5c>)
 80013a6:	f001 fcd0 	bl	8002d4a <HAL_DAC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013b0:	f000 f8e8 	bl	8001584 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2210      	movs	r2, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_DAC1_Init+0x5c>)
 80013d0:	f001 fd4f 	bl	8002e72 <HAL_DAC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013da:	f000 f8d3 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000138 	.word	0x20000138
 80013ec:	40007400 	.word	0x40007400

080013f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <MX_TIM1_Init+0x9c>)
 8001410:	4a1f      	ldr	r2, [pc, #124]	; (8001490 <MX_TIM1_Init+0xa0>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_TIM1_Init+0x9c>)
 8001416:	224f      	movs	r2, #79	; 0x4f
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_TIM1_Init+0x9c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_TIM1_Init+0x9c>)
 8001422:	2213      	movs	r2, #19
 8001424:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_TIM1_Init+0x9c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_TIM1_Init+0x9c>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_TIM1_Init+0x9c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001438:	4814      	ldr	r0, [pc, #80]	; (800148c <MX_TIM1_Init+0x9c>)
 800143a:	f003 fb27 	bl	8004a8c <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001444:	f000 f89e 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4619      	mov	r1, r3
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_TIM1_Init+0x9c>)
 8001456:	f003 fccc 	bl	8004df2 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001460:	f000 f890 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001464:	2320      	movs	r3, #32
 8001466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_TIM1_Init+0x9c>)
 8001476:	f003 fec1 	bl	80051fc <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001480:	f000 f880 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000014c 	.word	0x2000014c
 8001490:	40012c00 	.word	0x40012c00

08001494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_DMA_Init+0x38>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <MX_DMA_Init+0x38>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6493      	str	r3, [r2, #72]	; 0x48
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_DMA_Init+0x38>)
 80014a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	200b      	movs	r0, #11
 80014b8:	f001 fc11 	bl	8002cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014bc:	200b      	movs	r0, #11
 80014be:	f001 fc2a 	bl	8002d16 <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_GPIO_Init+0x8c>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <MX_GPIO_Init+0x8c>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_GPIO_Init+0x8c>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_GPIO_Init+0x8c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a16      	ldr	r2, [pc, #88]	; (800155c <MX_GPIO_Init+0x8c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_GPIO_Init+0x8c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_GPIO_Init+0x8c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <MX_GPIO_Init+0x8c>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_GPIO_Init+0x8c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2103      	movs	r1, #3
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <MX_GPIO_Init+0x90>)
 8001534:	f002 f926 	bl	8003784 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001538:	2303      	movs	r3, #3
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4619      	mov	r1, r3
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_GPIO_Init+0x90>)
 8001550:	f001 ffae 	bl	80034b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400

08001564 <HAL_ADC_ConvCpltCallback>:
/*void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
}*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	flag_filtro = 1;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_ADC_ConvCpltCallback+0x1c>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	200001bc 	.word	0x200001bc

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x44>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x44>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6613      	str	r3, [r2, #96]	; 0x60
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x44>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x44>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x44>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x44>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b09e      	sub	sp, #120	; 0x78
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2254      	movs	r2, #84	; 0x54
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fe83 	bl	8005304 <memset>
  if(hadc->Instance==ADC1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a3b      	ldr	r2, [pc, #236]	; (80016f0 <HAL_ADC_MspInit+0x118>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d16e      	bne.n	80016e6 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800160c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800160e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001612:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001614:	2301      	movs	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800161c:	2310      	movs	r3, #16
 800161e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001620:	2307      	movs	r3, #7
 8001622:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800162c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	4618      	mov	r0, r3
 8001638:	f002 ff30 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001642:	f7ff ff9f 	bl	8001584 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_ADC_MspInit+0x11c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a2a      	ldr	r2, [pc, #168]	; (80016f4 <HAL_ADC_MspInit+0x11c>)
 800164c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_ADC_MspInit+0x11c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_ADC_MspInit+0x11c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a24      	ldr	r2, [pc, #144]	; (80016f4 <HAL_ADC_MspInit+0x11c>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_ADC_MspInit+0x11c>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001676:	230f      	movs	r3, #15
 8001678:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800167a:	230b      	movs	r3, #11
 800167c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f001 ff10 	bl	80034b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_ADC_MspInit+0x124>)
 8001694:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016c0:	2220      	movs	r2, #32
 80016c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016cc:	f001 fcf8 	bl	80030c0 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80016d6:	f7ff ff55 	bl	8001584 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016de:	64da      	str	r2, [r3, #76]	; 0x4c
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <HAL_ADC_MspInit+0x120>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3778      	adds	r7, #120	; 0x78
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	50040000 	.word	0x50040000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	200000f0 	.word	0x200000f0
 80016fc:	40020008 	.word	0x40020008

08001700 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_DAC_MspInit+0x74>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d124      	bne.n	800176c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_DAC_MspInit+0x78>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_DAC_MspInit+0x78>)
 8001728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800172c:	6593      	str	r3, [r2, #88]	; 0x58
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_DAC_MspInit+0x78>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_DAC_MspInit+0x78>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_DAC_MspInit+0x78>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_DAC_MspInit+0x78>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001752:	2320      	movs	r3, #32
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001756:	2303      	movs	r3, #3
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f001 fea2 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40007400 	.word	0x40007400
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_TIM_Base_MspInit+0x44>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d113      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_TIM_Base_MspInit+0x48>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_TIM_Base_MspInit+0x48>)
 8001794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001798:	6613      	str	r3, [r2, #96]	; 0x60
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_TIM_Base_MspInit+0x48>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2019      	movs	r0, #25
 80017ac:	f001 fa97 	bl	8002cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017b0:	2019      	movs	r0, #25
 80017b2:	f001 fab0 	bl	8002d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40012c00 	.word	0x40012c00
 80017c4:	40021000 	.word	0x40021000

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f000 f8a6 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA1_Channel1_IRQHandler+0x10>)
 8001822:	f001 fd65 	bl	80032f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200000f0 	.word	0x200000f0

08001830 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001836:	f003 f9d5 	bl	8004be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000014c 	.word	0x2000014c

08001844 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopForever+0xe>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopForever+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f003 fd43 	bl	8005320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189a:	f7ff f99d 	bl	8000bd8 <main>

0800189e <LoopForever>:

LoopForever:
    b LoopForever
 800189e:	e7fe      	b.n	800189e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018ac:	08006630 	.word	0x08006630
  ldr r2, =_sbss
 80018b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018b4:	20000328 	.word	0x20000328

080018b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC1_IRQHandler>

080018ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f001 f9ff 	bl	8002cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f80e 	bl	80018ec <HAL_InitTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	e001      	b.n	80018e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018dc:	f7ff fe58 	bl	8001590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e0:	79fb      	ldrb	r3, [r7, #7]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_InitTick+0x6c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d023      	beq.n	8001948 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_InitTick+0x70>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_InitTick+0x6c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fa0b 	bl	8002d32 <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10f      	bne.n	8001942 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d809      	bhi.n	800193c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f001 f9d5 	bl	8002cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_InitTick+0x74>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e007      	b.n	800194c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e004      	b.n	800194c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e001      	b.n	800194c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000000c 	.word	0x2000000c
 800195c:	20000004 	.word	0x20000004
 8001960:	20000008 	.word	0x20000008

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	2000000c 	.word	0x2000000c
 8001988:	200001ec 	.word	0x200001ec

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200001ec 	.word	0x200001ec

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c

080019ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3360      	adds	r3, #96	; 0x60
 8001a66:	461a      	mov	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <LL_ADC_SetOffset+0x44>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a8c:	bf00      	nop
 8001a8e:	371c      	adds	r7, #28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	03fff000 	.word	0x03fff000

08001a9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3360      	adds	r3, #96	; 0x60
 8001aaa:	461a      	mov	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3360      	adds	r3, #96	; 0x60
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3330      	adds	r3, #48	; 0x30
 8001b34:	461a      	mov	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	4413      	add	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	211f      	movs	r1, #31
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	f003 011f 	and.w	r1, r3, #31
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3314      	adds	r3, #20
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	0e5b      	lsrs	r3, r3, #25
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	0d1b      	lsrs	r3, r3, #20
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	2107      	movs	r1, #7
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	0d1b      	lsrs	r3, r3, #20
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	43db      	mvns	r3, r3
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0318 	and.w	r3, r3, #24
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bf8:	40d9      	lsrs	r1, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	400b      	ands	r3, r1
 8001bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c02:	431a      	orrs	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	0007ffff 	.word	0x0007ffff

08001c1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6093      	str	r3, [r2, #8]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ca4:	d101      	bne.n	8001caa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_IsEnabled+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_IsEnabled+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d1a:	f043 0204 	orr.w	r2, r3, #4
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d101      	bne.n	8001d46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d101      	bne.n	8001d6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e126      	b.n	8001fe4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff fc17 	bl	80015d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff3f 	bl	8001c40 <LL_ADC_IsDeepPowerDownEnabled>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff25 	bl	8001c1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff5a 	bl	8001c90 <LL_ADC_IsInternalRegulatorEnabled>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d115      	bne.n	8001e0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff3e 	bl	8001c68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dec:	4b7f      	ldr	r3, [pc, #508]	; (8001fec <HAL_ADC_Init+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	4a7f      	ldr	r2, [pc, #508]	; (8001ff0 <HAL_ADC_Init+0x274>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e00:	e002      	b.n	8001e08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f9      	bne.n	8001e02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff3c 	bl	8001c90 <LL_ADC_IsInternalRegulatorEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff75 	bl	8001d2e <LL_ADC_REG_IsConversionOngoing>
 8001e44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 80bf 	bne.w	8001fd2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 80bb 	bne.w	8001fd2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e64:	f043 0202 	orr.w	r2, r3, #2
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff35 	bl	8001ce0 <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10b      	bne.n	8001e94 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e7c:	485d      	ldr	r0, [pc, #372]	; (8001ff4 <HAL_ADC_Init+0x278>)
 8001e7e:	f7ff ff2f 	bl	8001ce0 <LL_ADC_IsEnabled>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	485a      	ldr	r0, [pc, #360]	; (8001ff8 <HAL_ADC_Init+0x27c>)
 8001e90:	f7ff fdac 	bl	80019ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e5b      	ldrb	r3, [r3, #25]
 8001e98:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e9e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ea4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001eaa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d106      	bne.n	8001ed0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	045b      	lsls	r3, r3, #17
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_ADC_Init+0x280>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff25 	bl	8001d54 <LL_ADC_INJ_IsConversionOngoing>
 8001f0a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d13d      	bne.n	8001f8e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d13a      	bne.n	8001f8e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f1c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f24:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f34:	f023 0302 	bic.w	r3, r3, #2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	69b9      	ldr	r1, [r7, #24]
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d118      	bne.n	8001f7e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f56:	f023 0304 	bic.w	r3, r3, #4
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	e007      	b.n	8001f8e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10c      	bne.n	8001fb0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	f023 010f 	bic.w	r1, r3, #15
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
 8001fae:	e007      	b.n	8001fc0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 020f 	bic.w	r2, r2, #15
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f023 0303 	bic.w	r3, r3, #3
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
 8001fd0:	e007      	b.n	8001fe2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	053e2d63 	.word	0x053e2d63
 8001ff4:	50040000 	.word	0x50040000
 8001ff8:	50040300 	.word	0x50040300
 8001ffc:	fff0c007 	.word	0xfff0c007

08002000 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fe8c 	bl	8001d2e <LL_ADC_REG_IsConversionOngoing>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d167      	bne.n	80020ec <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_Start_DMA+0x2a>
 8002026:	2302      	movs	r3, #2
 8002028:	e063      	b.n	80020f2 <HAL_ADC_Start_DMA+0xf2>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fc5e 	bl	80028f4 <ADC_Enable>
 8002038:	4603      	mov	r3, r0
 800203a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d14f      	bne.n	80020e2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f023 0206 	bic.w	r2, r3, #6
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	659a      	str	r2, [r3, #88]	; 0x58
 800206e:	e002      	b.n	8002076 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	4a20      	ldr	r2, [pc, #128]	; (80020fc <HAL_ADC_Start_DMA+0xfc>)
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_ADC_Start_DMA+0x100>)
 8002084:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_ADC_Start_DMA+0x104>)
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	221c      	movs	r2, #28
 8002094:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0210 	orr.w	r2, r2, #16
 80020ac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3340      	adds	r3, #64	; 0x40
 80020c8:	4619      	mov	r1, r3
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f001 f8af 	bl	8003230 <HAL_DMA_Start_IT>
 80020d2:	4603      	mov	r3, r0
 80020d4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fe13 	bl	8001d06 <LL_ADC_REG_StartConversion>
 80020e0:	e006      	b.n	80020f0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80020ea:	e001      	b.n	80020f0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
 80020ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	08002a01 	.word	0x08002a01
 8002100:	08002ad9 	.word	0x08002ad9
 8002104:	08002af5 	.word	0x08002af5

08002108 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b0b6      	sub	sp, #216	; 0xd8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x22>
 800214e:	2302      	movs	r3, #2
 8002150:	e3bb      	b.n	80028ca <HAL_ADC_ConfigChannel+0x79a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fde5 	bl	8001d2e <LL_ADC_REG_IsConversionOngoing>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 83a0 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b05      	cmp	r3, #5
 800217a:	d824      	bhi.n	80021c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	3b02      	subs	r3, #2
 8002182:	2b03      	cmp	r3, #3
 8002184:	d81b      	bhi.n	80021be <HAL_ADC_ConfigChannel+0x8e>
 8002186:	a201      	add	r2, pc, #4	; (adr r2, 800218c <HAL_ADC_ConfigChannel+0x5c>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021a5 	.word	0x080021a5
 8002194:	080021ad 	.word	0x080021ad
 8002198:	080021b5 	.word	0x080021b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800219c:	230c      	movs	r3, #12
 800219e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80021a2:	e010      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80021a4:	2312      	movs	r3, #18
 80021a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80021aa:	e00c      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80021ac:	2318      	movs	r3, #24
 80021ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80021b2:	e008      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80021b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80021bc:	e003      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80021be:	2306      	movs	r3, #6
 80021c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80021c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80021d4:	f7ff fca6 	bl	8001b24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fda6 	bl	8001d2e <LL_ADC_REG_IsConversionOngoing>
 80021e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fdb2 	bl	8001d54 <LL_ADC_INJ_IsConversionOngoing>
 80021f0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 81a4 	bne.w	8002546 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 819f 	bne.w	8002546 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6819      	ldr	r1, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	461a      	mov	r2, r3
 8002216:	f7ff fcb1 	bl	8001b7c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d00a      	beq.n	8002252 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6919      	ldr	r1, [r3, #16]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800224c:	f7ff fc02 	bl	8001a54 <LL_ADC_SetOffset>
 8002250:	e179      	b.n	8002546 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fc1f 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10a      	bne.n	800227e <HAL_ADC_ConfigChannel+0x14e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fc14 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	0e9b      	lsrs	r3, r3, #26
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	e01e      	b.n	80022bc <HAL_ADC_ConfigChannel+0x18c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fc09 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800229c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80022ac:	2320      	movs	r3, #32
 80022ae:	e004      	b.n	80022ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80022b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1a4>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	e018      	b.n	8002306 <HAL_ADC_ConfigChannel+0x1d6>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80022e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80022f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e004      	b.n	8002306 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80022fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002306:	429a      	cmp	r2, r3
 8002308:	d106      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fbd8 	bl	8001ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fbbc 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x214>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fbb1 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	f003 021f 	and.w	r2, r3, #31
 8002342:	e01e      	b.n	8002382 <HAL_ADC_ConfigChannel+0x252>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fba6 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800236a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002372:	2320      	movs	r3, #32
 8002374:	e004      	b.n	8002380 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_ADC_ConfigChannel+0x26a>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	0e9b      	lsrs	r3, r3, #26
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	e018      	b.n	80023cc <HAL_ADC_ConfigChannel+0x29c>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80023ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80023b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80023be:	2320      	movs	r3, #32
 80023c0:	e004      	b.n	80023cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80023c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fb75 	bl	8001ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fb59 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <HAL_ADC_ConfigChannel+0x2da>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fb4e 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	e01e      	b.n	8002448 <HAL_ADC_ConfigChannel+0x318>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2102      	movs	r1, #2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fb43 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800242c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e004      	b.n	8002446 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800243c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x330>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	e014      	b.n	800248a <HAL_ADC_ConfigChannel+0x35a>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800246e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002474:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800247c:	2320      	movs	r3, #32
 800247e:	e004      	b.n	800248a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800248a:	429a      	cmp	r2, r3
 800248c:	d106      	bne.n	800249c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	2102      	movs	r1, #2
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fb16 	bl	8001ac8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fafa 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x398>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2103      	movs	r1, #3
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff faef 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 021f 	and.w	r2, r3, #31
 80024c6:	e017      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x3c8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2103      	movs	r1, #3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fae4 	bl	8001a9c <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80024e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80024ea:	2320      	movs	r3, #32
 80024ec:	e003      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80024ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x3e0>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0e9b      	lsrs	r3, r3, #26
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	e011      	b.n	8002534 <HAL_ADC_ConfigChannel+0x404>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800251e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002520:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e003      	b.n	8002534 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800252c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002534:	429a      	cmp	r2, r3
 8002536:	d106      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	2103      	movs	r1, #3
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fac1 	bl	8001ac8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fbc8 	bl	8001ce0 <LL_ADC_IsEnabled>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	f040 8140 	bne.w	80027d8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	461a      	mov	r2, r3
 8002566:	f7ff fb35 	bl	8001bd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	4a8f      	ldr	r2, [pc, #572]	; (80027ac <HAL_ADC_ConfigChannel+0x67c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	f040 8131 	bne.w	80027d8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10b      	bne.n	800259e <HAL_ADC_ConfigChannel+0x46e>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	0e9b      	lsrs	r3, r3, #26
 800258c:	3301      	adds	r3, #1
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	2b09      	cmp	r3, #9
 8002594:	bf94      	ite	ls
 8002596:	2301      	movls	r3, #1
 8002598:	2300      	movhi	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	e019      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x4a2>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80025ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80025b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e003      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80025ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	bf94      	ite	ls
 80025cc:	2301      	movls	r3, #1
 80025ce:	2300      	movhi	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d079      	beq.n	80026ca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x4c2>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0e9b      	lsrs	r3, r3, #26
 80025e8:	3301      	adds	r3, #1
 80025ea:	069b      	lsls	r3, r3, #26
 80025ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f0:	e015      	b.n	800261e <HAL_ADC_ConfigChannel+0x4ee>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002602:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800260a:	2320      	movs	r3, #32
 800260c:	e003      	b.n	8002616 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800260e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3301      	adds	r3, #1
 8002618:	069b      	lsls	r3, r3, #26
 800261a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_ADC_ConfigChannel+0x50e>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	0e9b      	lsrs	r3, r3, #26
 8002630:	3301      	adds	r3, #1
 8002632:	f003 031f 	and.w	r3, r3, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f303 	lsl.w	r3, r1, r3
 800263c:	e017      	b.n	800266e <HAL_ADC_ConfigChannel+0x53e>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800264c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e003      	b.n	8002662 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800265a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	ea42 0103 	orr.w	r1, r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x564>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	3301      	adds	r3, #1
 8002686:	f003 021f 	and.w	r2, r3, #31
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	e018      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x596>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e003      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 021f 	and.w	r2, r3, #31
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c6:	430b      	orrs	r3, r1
 80026c8:	e081      	b.n	80027ce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x5b6>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	3301      	adds	r3, #1
 80026de:	069b      	lsls	r3, r3, #26
 80026e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e4:	e015      	b.n	8002712 <HAL_ADC_ConfigChannel+0x5e2>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80026fe:	2320      	movs	r3, #32
 8002700:	e003      	b.n	800270a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	3301      	adds	r3, #1
 800270c:	069b      	lsls	r3, r3, #26
 800270e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x602>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	0e9b      	lsrs	r3, r3, #26
 8002724:	3301      	adds	r3, #1
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	e017      	b.n	8002762 <HAL_ADC_ConfigChannel+0x632>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	61bb      	str	r3, [r7, #24]
  return result;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e003      	b.n	8002756 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	ea42 0103 	orr.w	r1, r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <HAL_ADC_ConfigChannel+0x65e>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	3301      	adds	r3, #1
 800277a:	f003 021f 	and.w	r2, r3, #31
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	3b1e      	subs	r3, #30
 8002786:	051b      	lsls	r3, r3, #20
 8002788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800278c:	e01e      	b.n	80027cc <HAL_ADC_ConfigChannel+0x69c>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	60fb      	str	r3, [r7, #12]
  return result;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80027a6:	2320      	movs	r3, #32
 80027a8:	e006      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x688>
 80027aa:	bf00      	nop
 80027ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	f003 021f 	and.w	r2, r3, #31
 80027be:	4613      	mov	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	3b1e      	subs	r3, #30
 80027c6:	051b      	lsls	r3, r3, #20
 80027c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7ff f9d2 	bl	8001b7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_ADC_ConfigChannel+0x7a4>)
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d06c      	beq.n	80028be <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027e4:	483c      	ldr	r0, [pc, #240]	; (80028d8 <HAL_ADC_ConfigChannel+0x7a8>)
 80027e6:	f7ff f927 	bl	8001a38 <LL_ADC_GetCommonPathInternalCh>
 80027ea:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <HAL_ADC_ConfigChannel+0x7ac>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d127      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d121      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a35      	ldr	r2, [pc, #212]	; (80028e0 <HAL_ADC_ConfigChannel+0x7b0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d157      	bne.n	80028be <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002812:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002816:	4619      	mov	r1, r3
 8002818:	482f      	ldr	r0, [pc, #188]	; (80028d8 <HAL_ADC_ConfigChannel+0x7a8>)
 800281a:	f7ff f8fa 	bl	8001a12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_ADC_ConfigChannel+0x7b4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	4a30      	ldr	r2, [pc, #192]	; (80028e8 <HAL_ADC_ConfigChannel+0x7b8>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002838:	e002      	b.n	8002840 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3b01      	subs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002846:	e03a      	b.n	80028be <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a27      	ldr	r2, [pc, #156]	; (80028ec <HAL_ADC_ConfigChannel+0x7bc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d113      	bne.n	800287a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10d      	bne.n	800287a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d12a      	bne.n	80028be <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800286c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002870:	4619      	mov	r1, r3
 8002872:	4819      	ldr	r0, [pc, #100]	; (80028d8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002874:	f7ff f8cd 	bl	8001a12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002878:	e021      	b.n	80028be <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d11c      	bne.n	80028be <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d116      	bne.n	80028be <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_ADC_ConfigChannel+0x7b0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d111      	bne.n	80028be <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a2:	4619      	mov	r1, r3
 80028a4:	480c      	ldr	r0, [pc, #48]	; (80028d8 <HAL_ADC_ConfigChannel+0x7a8>)
 80028a6:	f7ff f8b4 	bl	8001a12 <LL_ADC_SetCommonPathInternalCh>
 80028aa:	e008      	b.n	80028be <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	37d8      	adds	r7, #216	; 0xd8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	80080000 	.word	0x80080000
 80028d8:	50040300 	.word	0x50040300
 80028dc:	c7520000 	.word	0xc7520000
 80028e0:	50040000 	.word	0x50040000
 80028e4:	20000004 	.word	0x20000004
 80028e8:	053e2d63 	.word	0x053e2d63
 80028ec:	cb840000 	.word	0xcb840000
 80028f0:	80000001 	.word	0x80000001

080028f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff f9eb 	bl	8001ce0 <LL_ADC_IsEnabled>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d169      	bne.n	80029e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <ADC_Enable+0xfc>)
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00d      	beq.n	800293a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f043 0210 	orr.w	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f043 0201 	orr.w	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e055      	b.n	80029e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f9ba 	bl	8001cb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002944:	482b      	ldr	r0, [pc, #172]	; (80029f4 <ADC_Enable+0x100>)
 8002946:	f7ff f877 	bl	8001a38 <LL_ADC_GetCommonPathInternalCh>
 800294a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800294c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <ADC_Enable+0x104>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	4a28      	ldr	r2, [pc, #160]	; (80029fc <ADC_Enable+0x108>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800296e:	e002      	b.n	8002976 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	3b01      	subs	r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f9      	bne.n	8002970 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800297c:	f7ff f806 	bl	800198c <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002982:	e028      	b.n	80029d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f9a9 	bl	8001ce0 <LL_ADC_IsEnabled>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f98d 	bl	8001cb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800299e:	f7fe fff5 	bl	800198c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d914      	bls.n	80029d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d00d      	beq.n	80029d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e007      	b.n	80029e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d1cf      	bne.n	8002984 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	8000003f 	.word	0x8000003f
 80029f4:	50040300 	.word	0x50040300
 80029f8:	20000004 	.word	0x20000004
 80029fc:	053e2d63 	.word	0x053e2d63

08002a00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d14b      	bne.n	8002ab2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d021      	beq.n	8002a78 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f860 	bl	8001afe <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d032      	beq.n	8002aaa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d12b      	bne.n	8002aaa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11f      	bne.n	8002aaa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
 8002a76:	e018      	b.n	8002aaa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d111      	bne.n	8002aaa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f7fe fd5a 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ab0:	e00e      	b.n	8002ad0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff fb2c 	bl	800211c <HAL_ADC_ErrorCallback>
}
 8002ac4:	e004      	b.n	8002ad0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff fb0e 	bl	8002108 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	f043 0204 	orr.w	r2, r3, #4
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff fafe 	bl	800211c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b44:	4013      	ands	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5a:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <__NVIC_SetPriorityGrouping+0x44>)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	60d3      	str	r3, [r2, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <__NVIC_GetPriorityGrouping+0x18>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	f003 0307 	and.w	r3, r3, #7
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	db0b      	blt.n	8002bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <__NVIC_EnableIRQ+0x38>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2001      	movs	r0, #1
 8002bae:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000e100 	.word	0xe000e100

08002bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	db0a      	blt.n	8002bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	490c      	ldr	r1, [pc, #48]	; (8002c14 <__NVIC_SetPriority+0x4c>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	0112      	lsls	r2, r2, #4
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	440b      	add	r3, r1
 8002bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf0:	e00a      	b.n	8002c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4908      	ldr	r1, [pc, #32]	; (8002c18 <__NVIC_SetPriority+0x50>)
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	440b      	add	r3, r1
 8002c06:	761a      	strb	r2, [r3, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f1c3 0307 	rsb	r3, r3, #7
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	bf28      	it	cs
 8002c3a:	2304      	movcs	r3, #4
 8002c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3304      	adds	r3, #4
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d902      	bls.n	8002c4c <NVIC_EncodePriority+0x30>
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3b03      	subs	r3, #3
 8002c4a:	e000      	b.n	8002c4e <NVIC_EncodePriority+0x32>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	f04f 32ff 	mov.w	r2, #4294967295
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	401a      	ands	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43d9      	mvns	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	4313      	orrs	r3, r2
         );
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3724      	adds	r7, #36	; 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c94:	d301      	bcc.n	8002c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <SysTick_Config+0x40>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca2:	210f      	movs	r1, #15
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f7ff ff8e 	bl	8002bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <SysTick_Config+0x40>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb2:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <SysTick_Config+0x40>)
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	e000e010 	.word	0xe000e010

08002cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff29 	bl	8002b28 <__NVIC_SetPriorityGrouping>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf0:	f7ff ff3e 	bl	8002b70 <__NVIC_GetPriorityGrouping>
 8002cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f7ff ff8e 	bl	8002c1c <NVIC_EncodePriority>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff5d 	bl	8002bc8 <__NVIC_SetPriority>
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff31 	bl	8002b8c <__NVIC_EnableIRQ>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffa2 	bl	8002c84 <SysTick_Config>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e014      	b.n	8002d86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	791b      	ldrb	r3, [r3, #4]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fe fcc7 	bl	8001700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	795b      	ldrb	r3, [r3, #5]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_DAC_Start+0x16>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e03b      	b.n	8002e1c <HAL_DAC_Start+0x8e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d118      	bne.n	8002e0e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	e00f      	b.n	8002e0e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dfc:	d107      	bne.n	8002e0e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0202 	orr.w	r2, r2, #2
 8002e0c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e004      	b.n	8002e5c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	3314      	adds	r3, #20
 8002e5a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b088      	sub	sp, #32
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	795b      	ldrb	r3, [r3, #5]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_DAC_ConfigChannel+0x1c>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e114      	b.n	80030b8 <HAL_DAC_ConfigChannel+0x246>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2202      	movs	r2, #2
 8002e98:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	f040 8081 	bne.w	8002fa6 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fd72 	bl	800198c <HAL_GetTick>
 8002ea8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d140      	bne.n	8002f32 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eb0:	e018      	b.n	8002ee4 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eb2:	f7fe fd6b 	bl	800198c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d911      	bls.n	8002ee4 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f043 0208 	orr.w	r2, r3, #8
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2203      	movs	r2, #3
 8002ede:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0e9      	b.n	80030b8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1df      	bne.n	8002eb2 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f7fe fd56 	bl	80019a4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	6992      	ldr	r2, [r2, #24]
 8002f00:	641a      	str	r2, [r3, #64]	; 0x40
 8002f02:	e023      	b.n	8002f4c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f04:	f7fe fd42 	bl	800198c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d90f      	bls.n	8002f32 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da0a      	bge.n	8002f32 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f043 0208 	orr.w	r2, r3, #8
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0c2      	b.n	80030b8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	dbe3      	blt.n	8002f04 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7fe fd31 	bl	80019a4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	6992      	ldr	r2, [r2, #24]
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	ea02 0103 	and.w	r1, r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	409a      	lsls	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	21ff      	movs	r1, #255	; 0xff
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	ea02 0103 	and.w	r1, r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d11d      	bne.n	8002fea <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	221f      	movs	r2, #31
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	431a      	orrs	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	22c0      	movs	r2, #192	; 0xc0
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43da      	mvns	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	400a      	ands	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e098      	b.n	8003204 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_DMA_Init+0x150>)
 80030da:	429a      	cmp	r2, r3
 80030dc:	d80f      	bhi.n	80030fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b4b      	ldr	r3, [pc, #300]	; (8003214 <HAL_DMA_Init+0x154>)
 80030e6:	4413      	add	r3, r2
 80030e8:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_DMA_Init+0x158>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	009a      	lsls	r2, r3, #2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a48      	ldr	r2, [pc, #288]	; (800321c <HAL_DMA_Init+0x15c>)
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
 80030fc:	e00e      	b.n	800311c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_DMA_Init+0x160>)
 8003106:	4413      	add	r3, r2
 8003108:	4a43      	ldr	r2, [pc, #268]	; (8003218 <HAL_DMA_Init+0x158>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	009a      	lsls	r2, r3, #2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a42      	ldr	r2, [pc, #264]	; (8003224 <HAL_DMA_Init+0x164>)
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003176:	d039      	beq.n	80031ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <HAL_DMA_Init+0x15c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d11a      	bne.n	80031b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_DMA_Init+0x168>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f003 031c 	and.w	r3, r3, #28
 800318e:	210f      	movs	r1, #15
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	4924      	ldr	r1, [pc, #144]	; (8003228 <HAL_DMA_Init+0x168>)
 8003198:	4013      	ands	r3, r2
 800319a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800319c:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_DMA_Init+0x168>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	f003 031c 	and.w	r3, r3, #28
 80031ac:	fa01 f303 	lsl.w	r3, r1, r3
 80031b0:	491d      	ldr	r1, [pc, #116]	; (8003228 <HAL_DMA_Init+0x168>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
 80031b6:	e019      	b.n	80031ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031b8:	4b1c      	ldr	r3, [pc, #112]	; (800322c <HAL_DMA_Init+0x16c>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f003 031c 	and.w	r3, r3, #28
 80031c4:	210f      	movs	r1, #15
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	4917      	ldr	r1, [pc, #92]	; (800322c <HAL_DMA_Init+0x16c>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <HAL_DMA_Init+0x16c>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f003 031c 	and.w	r3, r3, #28
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	4911      	ldr	r1, [pc, #68]	; (800322c <HAL_DMA_Init+0x16c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40020407 	.word	0x40020407
 8003214:	bffdfff8 	.word	0xbffdfff8
 8003218:	cccccccd 	.word	0xcccccccd
 800321c:	40020000 	.word	0x40020000
 8003220:	bffdfbf8 	.word	0xbffdfbf8
 8003224:	40020400 	.word	0x40020400
 8003228:	400200a8 	.word	0x400200a8
 800322c:	400204a8 	.word	0x400204a8

08003230 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_DMA_Start_IT+0x20>
 800324c:	2302      	movs	r3, #2
 800324e:	e04b      	b.n	80032e8 <HAL_DMA_Start_IT+0xb8>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d13a      	bne.n	80032da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0201 	bic.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f8e0 	bl	800344e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 020e 	orr.w	r2, r2, #14
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e00f      	b.n	80032c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0204 	bic.w	r2, r2, #4
 80032b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 020a 	orr.w	r2, r2, #10
 80032c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e005      	b.n	80032e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f003 031c 	and.w	r3, r3, #28
 8003310:	2204      	movs	r2, #4
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d026      	beq.n	800336a <HAL_DMA_IRQHandler+0x7a>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d021      	beq.n	800336a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003348:	f003 021c 	and.w	r2, r3, #28
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	2104      	movs	r1, #4
 8003352:	fa01 f202 	lsl.w	r2, r1, r2
 8003356:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b00      	cmp	r3, #0
 800335e:	d071      	beq.n	8003444 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003368:	e06c      	b.n	8003444 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f003 031c 	and.w	r3, r3, #28
 8003372:	2202      	movs	r2, #2
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02e      	beq.n	80033dc <HAL_DMA_IRQHandler+0xec>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d029      	beq.n	80033dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10b      	bne.n	80033ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 020a 	bic.w	r2, r2, #10
 80033a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	f003 021c 	and.w	r2, r3, #28
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2102      	movs	r1, #2
 80033bc:	fa01 f202 	lsl.w	r2, r1, r2
 80033c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d038      	beq.n	8003444 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033da:	e033      	b.n	8003444 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 031c 	and.w	r3, r3, #28
 80033e4:	2208      	movs	r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02a      	beq.n	8003446 <HAL_DMA_IRQHandler+0x156>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d025      	beq.n	8003446 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 020e 	bic.w	r2, r2, #14
 8003408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f003 021c 	and.w	r2, r3, #28
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f202 	lsl.w	r2, r1, r2
 800341c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003444:	bf00      	nop
 8003446:	bf00      	nop
}
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	f003 021c 	and.w	r2, r3, #28
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b10      	cmp	r3, #16
 800347e:	d108      	bne.n	8003492 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003490:	e007      	b.n	80034a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	60da      	str	r2, [r3, #12]
}
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034be:	e148      	b.n	8003752 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	4013      	ands	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 813a 	beq.w	800374c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d005      	beq.n	80034f0 <HAL_GPIO_Init+0x40>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d130      	bne.n	8003552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003526:	2201      	movs	r2, #1
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 0201 	and.w	r2, r3, #1
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b03      	cmp	r3, #3
 800355c:	d017      	beq.n	800358e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2203      	movs	r2, #3
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d123      	bne.n	80035e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	08da      	lsrs	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3208      	adds	r2, #8
 80035a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	220f      	movs	r2, #15
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	08da      	lsrs	r2, r3, #3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3208      	adds	r2, #8
 80035dc:	6939      	ldr	r1, [r7, #16]
 80035de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	2203      	movs	r2, #3
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0203 	and.w	r2, r3, #3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8094 	beq.w	800374c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003624:	4b52      	ldr	r3, [pc, #328]	; (8003770 <HAL_GPIO_Init+0x2c0>)
 8003626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003628:	4a51      	ldr	r2, [pc, #324]	; (8003770 <HAL_GPIO_Init+0x2c0>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6613      	str	r3, [r2, #96]	; 0x60
 8003630:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <HAL_GPIO_Init+0x2c0>)
 8003632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800363c:	4a4d      	ldr	r2, [pc, #308]	; (8003774 <HAL_GPIO_Init+0x2c4>)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	220f      	movs	r2, #15
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003666:	d00d      	beq.n	8003684 <HAL_GPIO_Init+0x1d4>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a43      	ldr	r2, [pc, #268]	; (8003778 <HAL_GPIO_Init+0x2c8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <HAL_GPIO_Init+0x1d0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a42      	ldr	r2, [pc, #264]	; (800377c <HAL_GPIO_Init+0x2cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_GPIO_Init+0x1cc>
 8003678:	2302      	movs	r3, #2
 800367a:	e004      	b.n	8003686 <HAL_GPIO_Init+0x1d6>
 800367c:	2307      	movs	r3, #7
 800367e:	e002      	b.n	8003686 <HAL_GPIO_Init+0x1d6>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_GPIO_Init+0x1d6>
 8003684:	2300      	movs	r3, #0
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	f002 0203 	and.w	r2, r2, #3
 800368c:	0092      	lsls	r2, r2, #2
 800368e:	4093      	lsls	r3, r2
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003696:	4937      	ldr	r1, [pc, #220]	; (8003774 <HAL_GPIO_Init+0x2c4>)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036a4:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_GPIO_Init+0x2d0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036c8:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_GPIO_Init+0x2d0>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036ce:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <HAL_GPIO_Init+0x2d0>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036f2:	4a23      	ldr	r2, [pc, #140]	; (8003780 <HAL_GPIO_Init+0x2d0>)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036f8:	4b21      	ldr	r3, [pc, #132]	; (8003780 <HAL_GPIO_Init+0x2d0>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800371c:	4a18      	ldr	r2, [pc, #96]	; (8003780 <HAL_GPIO_Init+0x2d0>)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <HAL_GPIO_Init+0x2d0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003746:	4a0e      	ldr	r2, [pc, #56]	; (8003780 <HAL_GPIO_Init+0x2d0>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3301      	adds	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	f47f aeaf 	bne.w	80034c0 <HAL_GPIO_Init+0x10>
  }
}
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40021000 	.word	0x40021000
 8003774:	40010000 	.word	0x40010000
 8003778:	48000400 	.word	0x48000400
 800377c:	48000800 	.word	0x48000800
 8003780:	40010400 	.word	0x40010400

08003784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
 8003790:	4613      	mov	r3, r2
 8003792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003794:	787b      	ldrb	r3, [r7, #1]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037a0:	e002      	b.n	80037a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c2:	6013      	str	r3, [r2, #0]
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40007000 	.word	0x40007000

080037d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_PWREx_GetVoltageRange+0x18>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40007000 	.word	0x40007000

080037f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fe:	d130      	bne.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003800:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380c:	d038      	beq.n	8003880 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800380e:	4b20      	ldr	r3, [pc, #128]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003816:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2232      	movs	r2, #50	; 0x32
 8003824:	fb02 f303 	mul.w	r3, r2, r3
 8003828:	4a1b      	ldr	r2, [pc, #108]	; (8003898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	3301      	adds	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003834:	e002      	b.n	800383c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3b01      	subs	r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d102      	bne.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x60>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f2      	bne.n	8003836 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385c:	d110      	bne.n	8003880 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e00f      	b.n	8003882 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	d007      	beq.n	8003880 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003878:	4a05      	ldr	r2, [pc, #20]	; (8003890 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800387a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40007000 	.word	0x40007000
 8003894:	20000004 	.word	0x20000004
 8003898:	431bde83 	.word	0x431bde83

0800389c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f000 bc02 	b.w	80040b4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b0:	4b96      	ldr	r3, [pc, #600]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ba:	4b94      	ldr	r3, [pc, #592]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80e4 	beq.w	8003a9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_RCC_OscConfig+0x4c>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	f040 808b 	bne.w	80039f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 8087 	bne.w	80039f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038e8:	4b88      	ldr	r3, [pc, #544]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_OscConfig+0x64>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e3d9      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	4b81      	ldr	r3, [pc, #516]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_RCC_OscConfig+0x7e>
 8003910:	4b7e      	ldr	r3, [pc, #504]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003918:	e005      	b.n	8003926 <HAL_RCC_OscConfig+0x8a>
 800391a:	4b7c      	ldr	r3, [pc, #496]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 800391c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003926:	4293      	cmp	r3, r2
 8003928:	d223      	bcs.n	8003972 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fd54 	bl	80043dc <RCC_SetFlashLatencyFromMSIRange>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e3ba      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800393e:	4b73      	ldr	r3, [pc, #460]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a72      	ldr	r2, [pc, #456]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003944:	f043 0308 	orr.w	r3, r3, #8
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b70      	ldr	r3, [pc, #448]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	496d      	ldr	r1, [pc, #436]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800395c:	4b6b      	ldr	r3, [pc, #428]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	4968      	ldr	r1, [pc, #416]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
 8003970:	e025      	b.n	80039be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003972:	4b66      	ldr	r3, [pc, #408]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a65      	ldr	r2, [pc, #404]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b63      	ldr	r3, [pc, #396]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4960      	ldr	r1, [pc, #384]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003990:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	495b      	ldr	r1, [pc, #364]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fd14 	bl	80043dc <RCC_SetFlashLatencyFromMSIRange>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e37a      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039be:	f000 fc81 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	4950      	ldr	r1, [pc, #320]	; (8003b10 <HAL_RCC_OscConfig+0x274>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a4e      	ldr	r2, [pc, #312]	; (8003b14 <HAL_RCC_OscConfig+0x278>)
 80039dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039de:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd ff82 	bl	80018ec <HAL_InitTick>
 80039e8:	4603      	mov	r3, r0
 80039ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d052      	beq.n	8003a98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	e35e      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d032      	beq.n	8003a64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039fe:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a42      	ldr	r2, [pc, #264]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a0a:	f7fd ffbf 	bl	800198c <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a12:	f7fd ffbb 	bl	800198c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e347      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a24:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a30:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a35      	ldr	r2, [pc, #212]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a36:	f043 0308 	orr.w	r3, r3, #8
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4930      	ldr	r1, [pc, #192]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	492b      	ldr	r1, [pc, #172]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
 8003a62:	e01a      	b.n	8003a9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a70:	f7fd ff8c 	bl	800198c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a78:	f7fd ff88 	bl	800198c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e314      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x1dc>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d073      	beq.n	8003b8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x21c>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b0c      	cmp	r3, #12
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d063      	beq.n	8003b8c <HAL_RCC_OscConfig+0x2f0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d15f      	bne.n	8003b8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e2f1      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d106      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x24c>
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e025      	b.n	8003b34 <HAL_RCC_OscConfig+0x298>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d114      	bne.n	8003b1c <HAL_RCC_OscConfig+0x280>
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <HAL_RCC_OscConfig+0x270>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e013      	b.n	8003b34 <HAL_RCC_OscConfig+0x298>
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	08006588 	.word	0x08006588
 8003b14:	20000004 	.word	0x20000004
 8003b18:	20000008 	.word	0x20000008
 8003b1c:	4ba0      	ldr	r3, [pc, #640]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a9f      	ldr	r2, [pc, #636]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b9d      	ldr	r3, [pc, #628]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a9c      	ldr	r2, [pc, #624]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd ff26 	bl	800198c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fd ff22 	bl	800198c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e2ae      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b56:	4b92      	ldr	r3, [pc, #584]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x2a8>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd ff12 	bl	800198c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd ff0e 	bl	800198c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e29a      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7e:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2d0>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d060      	beq.n	8003c5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_OscConfig+0x310>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d119      	bne.n	8003bda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d116      	bne.n	8003bda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bac:	4b7c      	ldr	r3, [pc, #496]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x328>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e277      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	4973      	ldr	r1, [pc, #460]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd8:	e040      	b.n	8003c5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d023      	beq.n	8003c2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be2:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6e      	ldr	r2, [pc, #440]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fd fecd 	bl	800198c <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fec9 	bl	800198c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e255      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c08:	4b65      	ldr	r3, [pc, #404]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c14:	4b62      	ldr	r3, [pc, #392]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	061b      	lsls	r3, r3, #24
 8003c22:	495f      	ldr	r1, [pc, #380]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
 8003c28:	e018      	b.n	8003c5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a5c      	ldr	r2, [pc, #368]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fd fea9 	bl	800198c <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c3e:	f7fd fea5 	bl	800198c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e231      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c50:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03c      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01c      	beq.n	8003caa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c70:	4b4b      	ldr	r3, [pc, #300]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c76:	4a4a      	ldr	r2, [pc, #296]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd fe84 	bl	800198c <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fd fe80 	bl	800198c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e20c      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9a:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ef      	beq.n	8003c88 <HAL_RCC_OscConfig+0x3ec>
 8003ca8:	e01b      	b.n	8003ce2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb0:	4a3b      	ldr	r2, [pc, #236]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd fe67 	bl	800198c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fe63 	bl	800198c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1ef      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd4:	4b32      	ldr	r3, [pc, #200]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ef      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80a6 	beq.w	8003e3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cf4:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10d      	bne.n	8003d1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d00:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	4a26      	ldr	r2, [pc, #152]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1c:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <HAL_RCC_OscConfig+0x508>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d118      	bne.n	8003d5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <HAL_RCC_OscConfig+0x508>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <HAL_RCC_OscConfig+0x508>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d34:	f7fd fe2a 	bl	800198c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fd fe26 	bl	800198c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1b2      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <HAL_RCC_OscConfig+0x508>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d108      	bne.n	8003d74 <HAL_RCC_OscConfig+0x4d8>
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d72:	e029      	b.n	8003dc8 <HAL_RCC_OscConfig+0x52c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d115      	bne.n	8003da8 <HAL_RCC_OscConfig+0x50c>
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HAL_RCC_OscConfig+0x504>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d9c:	e014      	b.n	8003dc8 <HAL_RCC_OscConfig+0x52c>
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40007000 	.word	0x40007000
 8003da8:	4b9a      	ldr	r3, [pc, #616]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dae:	4a99      	ldr	r2, [pc, #612]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003db8:	4b96      	ldr	r3, [pc, #600]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	4a95      	ldr	r2, [pc, #596]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d016      	beq.n	8003dfe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd fddc 	bl	800198c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fdd8 	bl	800198c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e162      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	4b89      	ldr	r3, [pc, #548]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ed      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x53c>
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd fdc5 	bl	800198c <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e04:	e00a      	b.n	8003e1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e06:	f7fd fdc1 	bl	800198c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e14b      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e1c:	4b7d      	ldr	r3, [pc, #500]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1ed      	bne.n	8003e06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e2a:	7ffb      	ldrb	r3, [r7, #31]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e30:	4b78      	ldr	r3, [pc, #480]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	4a77      	ldr	r2, [pc, #476]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d03c      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01c      	beq.n	8003e8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e50:	4b70      	ldr	r3, [pc, #448]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e56:	4a6f      	ldr	r2, [pc, #444]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fd fd94 	bl	800198c <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e68:	f7fd fd90 	bl	800198c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e11c      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e7a:	4b66      	ldr	r3, [pc, #408]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ef      	beq.n	8003e68 <HAL_RCC_OscConfig+0x5cc>
 8003e88:	e01b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e8a:	4b62      	ldr	r3, [pc, #392]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e90:	4a60      	ldr	r2, [pc, #384]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7fd fd77 	bl	800198c <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea2:	f7fd fd73 	bl	800198c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e0ff      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eb4:	4b57      	ldr	r3, [pc, #348]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1ef      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80f3 	beq.w	80040b2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	f040 80c9 	bne.w	8004068 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ed6:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 0203 	and.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d12c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d123      	bne.n	8003f44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d11b      	bne.n	8003f44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d113      	bne.n	8003f44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d109      	bne.n	8003f44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d06b      	beq.n	800401c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	d062      	beq.n	8004010 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f4a:	4b32      	ldr	r3, [pc, #200]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0ac      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f66:	f7fd fd11 	bl	800198c <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7fd fd0d 	bl	800198c <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e099      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f8c:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <HAL_RCC_OscConfig+0x77c>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f9c:	3a01      	subs	r2, #1
 8003f9e:	0112      	lsls	r2, r2, #4
 8003fa0:	4311      	orrs	r1, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fa6:	0212      	lsls	r2, r2, #8
 8003fa8:	4311      	orrs	r1, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fae:	0852      	lsrs	r2, r2, #1
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0552      	lsls	r2, r2, #21
 8003fb4:	4311      	orrs	r1, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fba:	0852      	lsrs	r2, r2, #1
 8003fbc:	3a01      	subs	r2, #1
 8003fbe:	0652      	lsls	r2, r2, #25
 8003fc0:	4311      	orrs	r1, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fc6:	06d2      	lsls	r2, r2, #27
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	4912      	ldr	r1, [pc, #72]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b10      	ldr	r3, [pc, #64]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0f      	ldr	r2, [pc, #60]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8003fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fe8:	f7fd fcd0 	bl	800198c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd fccc 	bl	800198c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e058      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <HAL_RCC_OscConfig+0x778>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800400e:	e050      	b.n	80040b2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e04f      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
 8004014:	40021000 	.word	0x40021000
 8004018:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d144      	bne.n	80040b2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004028:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a23      	ldr	r2, [pc, #140]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 800402e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a20      	ldr	r2, [pc, #128]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004040:	f7fd fca4 	bl	800198c <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd fca0 	bl	800198c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e02c      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x7ac>
 8004066:	e024      	b.n	80040b2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d01f      	beq.n	80040ae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406e:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a12      	ldr	r2, [pc, #72]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 8004074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fd fc87 	bl	800198c <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004082:	f7fd fc83 	bl	800198c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e00f      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	4905      	ldr	r1, [pc, #20]	; (80040bc <HAL_RCC_OscConfig+0x820>)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_OscConfig+0x824>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	60cb      	str	r3, [r1, #12]
 80040ac:	e001      	b.n	80040b2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3720      	adds	r7, #32
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	feeefffc 	.word	0xfeeefffc

080040c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0e7      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b75      	ldr	r3, [pc, #468]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d910      	bls.n	8004108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b72      	ldr	r3, [pc, #456]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 0207 	bic.w	r2, r3, #7
 80040ee:	4970      	ldr	r1, [pc, #448]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b6e      	ldr	r3, [pc, #440]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0cf      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d010      	beq.n	8004136 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004120:	429a      	cmp	r2, r3
 8004122:	d908      	bls.n	8004136 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4960      	ldr	r1, [pc, #384]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d04c      	beq.n	80041dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b03      	cmp	r3, #3
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	4b5a      	ldr	r3, [pc, #360]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e0a6      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d115      	bne.n	800419a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e09a      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800417a:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e08e      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e086      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800419a:	4b46      	ldr	r3, [pc, #280]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 0203 	bic.w	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4943      	ldr	r1, [pc, #268]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ac:	f7fd fbee 	bl	800198c <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	e00a      	b.n	80041ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b4:	f7fd fbea 	bl	800198c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e06e      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ca:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 020c 	and.w	r2, r3, #12
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1eb      	bne.n	80041b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d010      	beq.n	800420a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d208      	bcs.n	800420a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	492b      	ldr	r1, [pc, #172]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800420a:	4b29      	ldr	r3, [pc, #164]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d210      	bcs.n	800423a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 0207 	bic.w	r2, r3, #7
 8004220:	4923      	ldr	r1, [pc, #140]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004228:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <HAL_RCC_ClockConfig+0x1ec>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d001      	beq.n	800423a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e036      	b.n	80042a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4918      	ldr	r1, [pc, #96]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	4313      	orrs	r3, r2
 8004256:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4910      	ldr	r1, [pc, #64]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004278:	f000 f824 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	490b      	ldr	r1, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x1f4>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
 8004294:	4a09      	ldr	r2, [pc, #36]	; (80042bc <HAL_RCC_ClockConfig+0x1f8>)
 8004296:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1fc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fd fb25 	bl	80018ec <HAL_InitTick>
 80042a2:	4603      	mov	r3, r0
 80042a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80042a6:	7afb      	ldrb	r3, [r7, #11]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40021000 	.word	0x40021000
 80042b8:	08006588 	.word	0x08006588
 80042bc:	20000004 	.word	0x20000004
 80042c0:	20000008 	.word	0x20000008

080042c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d2:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042dc:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x34>
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d121      	bne.n	8004336 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d11e      	bne.n	8004336 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042f8:	4b34      	ldr	r3, [pc, #208]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004304:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e005      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004314:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004320:	4a2b      	ldr	r2, [pc, #172]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004334:	e00a      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b04      	cmp	r3, #4
 800433a:	d102      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800433c:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800433e:	61bb      	str	r3, [r7, #24]
 8004340:	e004      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d101      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004348:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800434a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d134      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004352:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0xa6>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d003      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0xac>
 8004368:	e005      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800436c:	617b      	str	r3, [r7, #20]
      break;
 800436e:	e005      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004372:	617b      	str	r3, [r7, #20]
      break;
 8004374:	e002      	b.n	800437c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	617b      	str	r3, [r7, #20]
      break;
 800437a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	3301      	adds	r3, #1
 8004388:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	fb03 f202 	mul.w	r2, r3, r2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a2:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <HAL_RCC_GetSysClockFreq+0x108>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	0e5b      	lsrs	r3, r3, #25
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	3301      	adds	r3, #1
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043bc:	69bb      	ldr	r3, [r7, #24]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3724      	adds	r7, #36	; 0x24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40021000 	.word	0x40021000
 80043d0:	08006598 	.word	0x08006598
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	007a1200 	.word	0x007a1200

080043dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043e8:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043f4:	f7ff f9ee 	bl	80037d4 <HAL_PWREx_GetVoltageRange>
 80043f8:	6178      	str	r0, [r7, #20]
 80043fa:	e014      	b.n	8004426 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043fc:	4b25      	ldr	r3, [pc, #148]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004406:	6593      	str	r3, [r2, #88]	; 0x58
 8004408:	4b22      	ldr	r3, [pc, #136]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004414:	f7ff f9de 	bl	80037d4 <HAL_PWREx_GetVoltageRange>
 8004418:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800441a:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	4a1d      	ldr	r2, [pc, #116]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004424:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800442c:	d10b      	bne.n	8004446 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d919      	bls.n	8004468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2ba0      	cmp	r3, #160	; 0xa0
 8004438:	d902      	bls.n	8004440 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800443a:	2302      	movs	r3, #2
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e013      	b.n	8004468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004440:	2301      	movs	r3, #1
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	e010      	b.n	8004468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d902      	bls.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800444c:	2303      	movs	r3, #3
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	e00a      	b.n	8004468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d102      	bne.n	800445e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004458:	2302      	movs	r3, #2
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	e004      	b.n	8004468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b70      	cmp	r3, #112	; 0x70
 8004462:	d101      	bne.n	8004468 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004464:	2301      	movs	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 0207 	bic.w	r2, r3, #7
 8004470:	4909      	ldr	r1, [pc, #36]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004478:	4b07      	ldr	r3, [pc, #28]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	429a      	cmp	r2, r3
 8004484:	d001      	beq.n	800448a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000
 8004498:	40022000 	.word	0x40022000

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a4:	2300      	movs	r3, #0
 80044a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a8:	2300      	movs	r3, #0
 80044aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d031      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044c0:	d01a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80044c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044c6:	d814      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d0:	d10f      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044d2:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a5c      	ldr	r2, [pc, #368]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044de:	e00c      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f9de 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044f0:	e003      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	74fb      	strb	r3, [r7, #19]
      break;
 80044f6:	e000      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004500:	4b51      	ldr	r3, [pc, #324]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	494e      	ldr	r1, [pc, #312]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004516:	e001      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 809e 	beq.w	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452a:	2300      	movs	r3, #0
 800452c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800452e:	4b46      	ldr	r3, [pc, #280]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	4b40      	ldr	r3, [pc, #256]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454e:	6593      	str	r3, [r2, #88]	; 0x58
 8004550:	4b3d      	ldr	r3, [pc, #244]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455c:	2301      	movs	r3, #1
 800455e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004560:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a39      	ldr	r2, [pc, #228]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800456c:	f7fd fa0e 	bl	800198c <HAL_GetTick>
 8004570:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004572:	e009      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004574:	f7fd fa0a 	bl	800198c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d902      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	74fb      	strb	r3, [r7, #19]
        break;
 8004586:	e005      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004588:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ef      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d15a      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800459a:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01e      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d019      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045e2:	4a19      	ldr	r2, [pc, #100]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d016      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd f9ca 	bl	800198c <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fa:	e00b      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fd f9c6 	bl	800198c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d902      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	74fb      	strb	r3, [r7, #19]
            break;
 8004612:	e006      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ec      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004622:	7cfb      	ldrb	r3, [r7, #19]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004636:	4904      	ldr	r1, [pc, #16]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800463e:	e009      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
 8004644:	e006      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004654:	7c7b      	ldrb	r3, [r7, #17]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d105      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465a:	4b8a      	ldr	r3, [pc, #552]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	4a89      	ldr	r2, [pc, #548]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004664:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004672:	4b84      	ldr	r3, [pc, #528]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f023 0203 	bic.w	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	4980      	ldr	r1, [pc, #512]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004694:	4b7b      	ldr	r3, [pc, #492]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f023 020c 	bic.w	r2, r3, #12
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	4978      	ldr	r1, [pc, #480]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046b6:	4b73      	ldr	r3, [pc, #460]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	496f      	ldr	r1, [pc, #444]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d8:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	4967      	ldr	r1, [pc, #412]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046fa:	4b62      	ldr	r3, [pc, #392]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	495e      	ldr	r1, [pc, #376]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4956      	ldr	r1, [pc, #344]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800473e:	4b51      	ldr	r3, [pc, #324]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	494d      	ldr	r1, [pc, #308]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d028      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004760:	4b48      	ldr	r3, [pc, #288]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	4945      	ldr	r1, [pc, #276]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800477e:	d106      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004780:	4b40      	ldr	r3, [pc, #256]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a3f      	ldr	r2, [pc, #252]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800478a:	60d3      	str	r3, [r2, #12]
 800478c:	e011      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004796:	d10c      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	2101      	movs	r1, #1
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f882 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047a8:	7cfb      	ldrb	r3, [r7, #19]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d028      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047be:	4b31      	ldr	r3, [pc, #196]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	492d      	ldr	r1, [pc, #180]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047dc:	d106      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	4a28      	ldr	r2, [pc, #160]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e8:	60d3      	str	r3, [r2, #12]
 80047ea:	e011      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3304      	adds	r3, #4
 80047fa:	2101      	movs	r1, #1
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f853 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01c      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482a:	4916      	ldr	r1, [pc, #88]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483a:	d10c      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f830 	bl	80048a8 <RCCEx_PLLSAI1_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004870:	4904      	ldr	r1, [pc, #16]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004878:	7cbb      	ldrb	r3, [r7, #18]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000

08004888 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	6013      	str	r3, [r2, #0]
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000

080048a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048b6:	4b74      	ldr	r3, [pc, #464]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d018      	beq.n	80048f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048c2:	4b71      	ldr	r3, [pc, #452]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0203 	and.w	r2, r3, #3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d10d      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
       ||
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048da:	4b6b      	ldr	r3, [pc, #428]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
       ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d047      	beq.n	800497e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
 80048f2:	e044      	b.n	800497e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d018      	beq.n	800492e <RCCEx_PLLSAI1_Config+0x86>
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d825      	bhi.n	800494c <RCCEx_PLLSAI1_Config+0xa4>
 8004900:	2b01      	cmp	r3, #1
 8004902:	d002      	beq.n	800490a <RCCEx_PLLSAI1_Config+0x62>
 8004904:	2b02      	cmp	r3, #2
 8004906:	d009      	beq.n	800491c <RCCEx_PLLSAI1_Config+0x74>
 8004908:	e020      	b.n	800494c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800490a:	4b5f      	ldr	r3, [pc, #380]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d11d      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491a:	e01a      	b.n	8004952 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800491c:	4b5a      	ldr	r3, [pc, #360]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004924:	2b00      	cmp	r3, #0
 8004926:	d116      	bne.n	8004956 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800492c:	e013      	b.n	8004956 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800492e:	4b56      	ldr	r3, [pc, #344]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800493a:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800494a:	e006      	b.n	800495a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
      break;
 8004950:	e004      	b.n	800495c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004952:	bf00      	nop
 8004954:	e002      	b.n	800495c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800495a:	bf00      	nop
    }

    if(status == HAL_OK)
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10d      	bne.n	800497e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004962:	4b49      	ldr	r3, [pc, #292]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	430b      	orrs	r3, r1
 8004978:	4943      	ldr	r1, [pc, #268]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497a:	4313      	orrs	r3, r2
 800497c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d17c      	bne.n	8004a7e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004984:	4b40      	ldr	r3, [pc, #256]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a3f      	ldr	r2, [pc, #252]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800498e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004990:	f7fc fffc 	bl	800198c <HAL_GetTick>
 8004994:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004996:	e009      	b.n	80049ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004998:	f7fc fff8 	bl	800198c <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d902      	bls.n	80049ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	73fb      	strb	r3, [r7, #15]
        break;
 80049aa:	e005      	b.n	80049b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ac:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1ef      	bne.n	8004998 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d15f      	bne.n	8004a7e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d110      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c4:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6892      	ldr	r2, [r2, #8]
 80049d4:	0211      	lsls	r1, r2, #8
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68d2      	ldr	r2, [r2, #12]
 80049da:	06d2      	lsls	r2, r2, #27
 80049dc:	430a      	orrs	r2, r1
 80049de:	492a      	ldr	r1, [pc, #168]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	610b      	str	r3, [r1, #16]
 80049e4:	e027      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d112      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ec:	4b26      	ldr	r3, [pc, #152]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6892      	ldr	r2, [r2, #8]
 80049fc:	0211      	lsls	r1, r2, #8
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6912      	ldr	r2, [r2, #16]
 8004a02:	0852      	lsrs	r2, r2, #1
 8004a04:	3a01      	subs	r2, #1
 8004a06:	0552      	lsls	r2, r2, #21
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	491f      	ldr	r1, [pc, #124]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	610b      	str	r3, [r1, #16]
 8004a10:	e011      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a12:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6892      	ldr	r2, [r2, #8]
 8004a22:	0211      	lsls	r1, r2, #8
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6952      	ldr	r2, [r2, #20]
 8004a28:	0852      	lsrs	r2, r2, #1
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	0652      	lsls	r2, r2, #25
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	4915      	ldr	r1, [pc, #84]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fc ffa3 	bl	800198c <HAL_GetTick>
 8004a46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a48:	e009      	b.n	8004a5e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a4a:	f7fc ff9f 	bl	800198c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d902      	bls.n	8004a5e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	73fb      	strb	r3, [r7, #15]
          break;
 8004a5c:	e005      	b.n	8004a6a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ef      	beq.n	8004a4a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	4903      	ldr	r1, [pc, #12]	; (8004a88 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000

08004a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e049      	b.n	8004b32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fe62 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 fa8c 	bl	8004fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e03b      	b.n	8004bcc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d009      	beq.n	8004b8a <HAL_TIM_Base_Start_IT+0x4e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d004      	beq.n	8004b8a <HAL_TIM_Base_Start_IT+0x4e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <HAL_TIM_Base_Start_IT+0xa0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d115      	bne.n	8004bb6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b06      	cmp	r3, #6
 8004b9a:	d015      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x8c>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d011      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	e008      	b.n	8004bc8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e000      	b.n	8004bca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	40012c00 	.word	0x40012c00
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	00010007 	.word	0x00010007

08004be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d020      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01b      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0202 	mvn.w	r2, #2
 8004c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f9bc 	bl	8004fac <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9ae 	bl	8004f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9bf 	bl	8004fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d020      	beq.n	8004c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01b      	beq.n	8004c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0204 	mvn.w	r2, #4
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f996 	bl	8004fac <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f988 	bl	8004f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f999 	bl	8004fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d020      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01b      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0208 	mvn.w	r2, #8
 8004cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f970 	bl	8004fac <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f962 	bl	8004f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f973 	bl	8004fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d020      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01b      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0210 	mvn.w	r2, #16
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2208      	movs	r2, #8
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f94a 	bl	8004fac <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f93c 	bl	8004f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f94d 	bl	8004fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00c      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0201 	mvn.w	r2, #1
 8004d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f91a 	bl	8004f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 faaf 	bl	80052dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 faa7 	bl	80052f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00c      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f907 	bl	8004fd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f06f 0220 	mvn.w	r2, #32
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fa6f 	bl	80052c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_ConfigClockSource+0x1c>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e0b6      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x18a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e38:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4a:	d03e      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xd8>
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e50:	f200 8087 	bhi.w	8004f62 <HAL_TIM_ConfigClockSource+0x170>
 8004e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e58:	f000 8086 	beq.w	8004f68 <HAL_TIM_ConfigClockSource+0x176>
 8004e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e60:	d87f      	bhi.n	8004f62 <HAL_TIM_ConfigClockSource+0x170>
 8004e62:	2b70      	cmp	r3, #112	; 0x70
 8004e64:	d01a      	beq.n	8004e9c <HAL_TIM_ConfigClockSource+0xaa>
 8004e66:	2b70      	cmp	r3, #112	; 0x70
 8004e68:	d87b      	bhi.n	8004f62 <HAL_TIM_ConfigClockSource+0x170>
 8004e6a:	2b60      	cmp	r3, #96	; 0x60
 8004e6c:	d050      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0x11e>
 8004e6e:	2b60      	cmp	r3, #96	; 0x60
 8004e70:	d877      	bhi.n	8004f62 <HAL_TIM_ConfigClockSource+0x170>
 8004e72:	2b50      	cmp	r3, #80	; 0x50
 8004e74:	d03c      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0xfe>
 8004e76:	2b50      	cmp	r3, #80	; 0x50
 8004e78:	d873      	bhi.n	8004f62 <HAL_TIM_ConfigClockSource+0x170>
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d058      	beq.n	8004f30 <HAL_TIM_ConfigClockSource+0x13e>
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d86f      	bhi.n	8004f62 <HAL_TIM_ConfigClockSource+0x170>
 8004e82:	2b30      	cmp	r3, #48	; 0x30
 8004e84:	d064      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x15e>
 8004e86:	2b30      	cmp	r3, #48	; 0x30
 8004e88:	d86b      	bhi.n	8004f62 <HAL_TIM_ConfigClockSource+0x170>
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d060      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x15e>
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d867      	bhi.n	8004f62 <HAL_TIM_ConfigClockSource+0x170>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d05c      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x15e>
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d05a      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0x15e>
 8004e9a:	e062      	b.n	8004f62 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eac:	f000 f986 	bl	80051bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ebe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	609a      	str	r2, [r3, #8]
      break;
 8004ec8:	e04f      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eda:	f000 f96f 	bl	80051bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eec:	609a      	str	r2, [r3, #8]
      break;
 8004eee:	e03c      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efc:	461a      	mov	r2, r3
 8004efe:	f000 f8e3 	bl	80050c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2150      	movs	r1, #80	; 0x50
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f93c 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004f0e:	e02c      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	f000 f902 	bl	8005126 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2160      	movs	r1, #96	; 0x60
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f92c 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004f2e:	e01c      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f000 f8c3 	bl	80050c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2140      	movs	r1, #64	; 0x40
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 f91c 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004f4e:	e00c      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 f913 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 8004f60:	e003      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	73fb      	strb	r3, [r7, #15]
      break;
 8004f66:	e000      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a30      	ldr	r2, [pc, #192]	; (80050bc <TIM_Base_SetConfig+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0x20>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005006:	d108      	bne.n	800501a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a27      	ldr	r2, [pc, #156]	; (80050bc <TIM_Base_SetConfig+0xd4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x52>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x52>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <TIM_Base_SetConfig+0xd8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x52>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a23      	ldr	r2, [pc, #140]	; (80050c4 <TIM_Base_SetConfig+0xdc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a12      	ldr	r2, [pc, #72]	; (80050bc <TIM_Base_SetConfig+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d007      	beq.n	8005088 <TIM_Base_SetConfig+0xa0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a11      	ldr	r2, [pc, #68]	; (80050c0 <TIM_Base_SetConfig+0xd8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0xa0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a10      	ldr	r2, [pc, #64]	; (80050c4 <TIM_Base_SetConfig+0xdc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f023 0201 	bic.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]
  }
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400

080050c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 030a 	bic.w	r3, r3, #10
 8005104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005126:	b480      	push	{r7}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f023 0210 	bic.w	r2, r3, #16
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	031b      	lsls	r3, r3, #12
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005162:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f043 0307 	orr.w	r3, r3, #7
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	431a      	orrs	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	609a      	str	r2, [r3, #8]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005210:	2302      	movs	r3, #2
 8005212:	e04f      	b.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a21      	ldr	r2, [pc, #132]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005244:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a14      	ldr	r2, [pc, #80]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d009      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527c:	d004      	beq.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a10      	ldr	r2, [pc, #64]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10c      	bne.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800528e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40014000 	.word	0x40014000

080052c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <memset>:
 8005304:	4402      	add	r2, r0
 8005306:	4603      	mov	r3, r0
 8005308:	4293      	cmp	r3, r2
 800530a:	d100      	bne.n	800530e <memset+0xa>
 800530c:	4770      	bx	lr
 800530e:	f803 1b01 	strb.w	r1, [r3], #1
 8005312:	e7f9      	b.n	8005308 <memset+0x4>

08005314 <__errno>:
 8005314:	4b01      	ldr	r3, [pc, #4]	; (800531c <__errno+0x8>)
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	2000005c 	.word	0x2000005c

08005320 <__libc_init_array>:
 8005320:	b570      	push	{r4, r5, r6, lr}
 8005322:	4d0d      	ldr	r5, [pc, #52]	; (8005358 <__libc_init_array+0x38>)
 8005324:	4c0d      	ldr	r4, [pc, #52]	; (800535c <__libc_init_array+0x3c>)
 8005326:	1b64      	subs	r4, r4, r5
 8005328:	10a4      	asrs	r4, r4, #2
 800532a:	2600      	movs	r6, #0
 800532c:	42a6      	cmp	r6, r4
 800532e:	d109      	bne.n	8005344 <__libc_init_array+0x24>
 8005330:	4d0b      	ldr	r5, [pc, #44]	; (8005360 <__libc_init_array+0x40>)
 8005332:	4c0c      	ldr	r4, [pc, #48]	; (8005364 <__libc_init_array+0x44>)
 8005334:	f001 f91c 	bl	8006570 <_init>
 8005338:	1b64      	subs	r4, r4, r5
 800533a:	10a4      	asrs	r4, r4, #2
 800533c:	2600      	movs	r6, #0
 800533e:	42a6      	cmp	r6, r4
 8005340:	d105      	bne.n	800534e <__libc_init_array+0x2e>
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	f855 3b04 	ldr.w	r3, [r5], #4
 8005348:	4798      	blx	r3
 800534a:	3601      	adds	r6, #1
 800534c:	e7ee      	b.n	800532c <__libc_init_array+0xc>
 800534e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005352:	4798      	blx	r3
 8005354:	3601      	adds	r6, #1
 8005356:	e7f2      	b.n	800533e <__libc_init_array+0x1e>
 8005358:	08006628 	.word	0x08006628
 800535c:	08006628 	.word	0x08006628
 8005360:	08006628 	.word	0x08006628
 8005364:	0800662c 	.word	0x0800662c

08005368 <exp>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	ed2d 8b02 	vpush	{d8}
 800536e:	ec55 4b10 	vmov	r4, r5, d0
 8005372:	f000 f8bd 	bl	80054f0 <__ieee754_exp>
 8005376:	eeb0 8a40 	vmov.f32	s16, s0
 800537a:	eef0 8a60 	vmov.f32	s17, s1
 800537e:	ec45 4b10 	vmov	d0, r4, r5
 8005382:	f000 f8a9 	bl	80054d8 <finite>
 8005386:	b168      	cbz	r0, 80053a4 <exp+0x3c>
 8005388:	a317      	add	r3, pc, #92	; (adr r3, 80053e8 <exp+0x80>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fb fb69 	bl	8000a68 <__aeabi_dcmpgt>
 8005396:	b160      	cbz	r0, 80053b2 <exp+0x4a>
 8005398:	f7ff ffbc 	bl	8005314 <__errno>
 800539c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80053d8 <exp+0x70>
 80053a0:	2322      	movs	r3, #34	; 0x22
 80053a2:	6003      	str	r3, [r0, #0]
 80053a4:	eeb0 0a48 	vmov.f32	s0, s16
 80053a8:	eef0 0a68 	vmov.f32	s1, s17
 80053ac:	ecbd 8b02 	vpop	{d8}
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	a30f      	add	r3, pc, #60	; (adr r3, 80053f0 <exp+0x88>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	4620      	mov	r0, r4
 80053ba:	4629      	mov	r1, r5
 80053bc:	f7fb fb36 	bl	8000a2c <__aeabi_dcmplt>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d0ef      	beq.n	80053a4 <exp+0x3c>
 80053c4:	f7ff ffa6 	bl	8005314 <__errno>
 80053c8:	2322      	movs	r3, #34	; 0x22
 80053ca:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80053e0 <exp+0x78>
 80053ce:	6003      	str	r3, [r0, #0]
 80053d0:	e7e8      	b.n	80053a4 <exp+0x3c>
 80053d2:	bf00      	nop
 80053d4:	f3af 8000 	nop.w
 80053d8:	00000000 	.word	0x00000000
 80053dc:	7ff00000 	.word	0x7ff00000
	...
 80053e8:	fefa39ef 	.word	0xfefa39ef
 80053ec:	40862e42 	.word	0x40862e42
 80053f0:	d52d3051 	.word	0xd52d3051
 80053f4:	c0874910 	.word	0xc0874910

080053f8 <pow>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	ed2d 8b02 	vpush	{d8}
 80053fe:	eeb0 8a40 	vmov.f32	s16, s0
 8005402:	eef0 8a60 	vmov.f32	s17, s1
 8005406:	ec55 4b11 	vmov	r4, r5, d1
 800540a:	f000 f9f5 	bl	80057f8 <__ieee754_pow>
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	ec57 6b10 	vmov	r6, r7, d0
 800541a:	f7fb fb2f 	bl	8000a7c <__aeabi_dcmpun>
 800541e:	2800      	cmp	r0, #0
 8005420:	d13b      	bne.n	800549a <pow+0xa2>
 8005422:	ec51 0b18 	vmov	r0, r1, d8
 8005426:	2200      	movs	r2, #0
 8005428:	2300      	movs	r3, #0
 800542a:	f7fb faf5 	bl	8000a18 <__aeabi_dcmpeq>
 800542e:	b1b8      	cbz	r0, 8005460 <pow+0x68>
 8005430:	2200      	movs	r2, #0
 8005432:	2300      	movs	r3, #0
 8005434:	4620      	mov	r0, r4
 8005436:	4629      	mov	r1, r5
 8005438:	f7fb faee 	bl	8000a18 <__aeabi_dcmpeq>
 800543c:	2800      	cmp	r0, #0
 800543e:	d146      	bne.n	80054ce <pow+0xd6>
 8005440:	ec45 4b10 	vmov	d0, r4, r5
 8005444:	f000 f848 	bl	80054d8 <finite>
 8005448:	b338      	cbz	r0, 800549a <pow+0xa2>
 800544a:	2200      	movs	r2, #0
 800544c:	2300      	movs	r3, #0
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fb faeb 	bl	8000a2c <__aeabi_dcmplt>
 8005456:	b300      	cbz	r0, 800549a <pow+0xa2>
 8005458:	f7ff ff5c 	bl	8005314 <__errno>
 800545c:	2322      	movs	r3, #34	; 0x22
 800545e:	e01b      	b.n	8005498 <pow+0xa0>
 8005460:	ec47 6b10 	vmov	d0, r6, r7
 8005464:	f000 f838 	bl	80054d8 <finite>
 8005468:	b9e0      	cbnz	r0, 80054a4 <pow+0xac>
 800546a:	eeb0 0a48 	vmov.f32	s0, s16
 800546e:	eef0 0a68 	vmov.f32	s1, s17
 8005472:	f000 f831 	bl	80054d8 <finite>
 8005476:	b1a8      	cbz	r0, 80054a4 <pow+0xac>
 8005478:	ec45 4b10 	vmov	d0, r4, r5
 800547c:	f000 f82c 	bl	80054d8 <finite>
 8005480:	b180      	cbz	r0, 80054a4 <pow+0xac>
 8005482:	4632      	mov	r2, r6
 8005484:	463b      	mov	r3, r7
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	f7fb faf7 	bl	8000a7c <__aeabi_dcmpun>
 800548e:	2800      	cmp	r0, #0
 8005490:	d0e2      	beq.n	8005458 <pow+0x60>
 8005492:	f7ff ff3f 	bl	8005314 <__errno>
 8005496:	2321      	movs	r3, #33	; 0x21
 8005498:	6003      	str	r3, [r0, #0]
 800549a:	ecbd 8b02 	vpop	{d8}
 800549e:	ec47 6b10 	vmov	d0, r6, r7
 80054a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a4:	2200      	movs	r2, #0
 80054a6:	2300      	movs	r3, #0
 80054a8:	4630      	mov	r0, r6
 80054aa:	4639      	mov	r1, r7
 80054ac:	f7fb fab4 	bl	8000a18 <__aeabi_dcmpeq>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d0f2      	beq.n	800549a <pow+0xa2>
 80054b4:	eeb0 0a48 	vmov.f32	s0, s16
 80054b8:	eef0 0a68 	vmov.f32	s1, s17
 80054bc:	f000 f80c 	bl	80054d8 <finite>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0ea      	beq.n	800549a <pow+0xa2>
 80054c4:	ec45 4b10 	vmov	d0, r4, r5
 80054c8:	f000 f806 	bl	80054d8 <finite>
 80054cc:	e7c3      	b.n	8005456 <pow+0x5e>
 80054ce:	4f01      	ldr	r7, [pc, #4]	; (80054d4 <pow+0xdc>)
 80054d0:	2600      	movs	r6, #0
 80054d2:	e7e2      	b.n	800549a <pow+0xa2>
 80054d4:	3ff00000 	.word	0x3ff00000

080054d8 <finite>:
 80054d8:	b082      	sub	sp, #8
 80054da:	ed8d 0b00 	vstr	d0, [sp]
 80054de:	9801      	ldr	r0, [sp, #4]
 80054e0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80054e4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80054e8:	0fc0      	lsrs	r0, r0, #31
 80054ea:	b002      	add	sp, #8
 80054ec:	4770      	bx	lr
	...

080054f0 <__ieee754_exp>:
 80054f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054f4:	ec55 4b10 	vmov	r4, r5, d0
 80054f8:	49b5      	ldr	r1, [pc, #724]	; (80057d0 <__ieee754_exp+0x2e0>)
 80054fa:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80054fe:	428a      	cmp	r2, r1
 8005500:	ed2d 8b04 	vpush	{d8-d9}
 8005504:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8005508:	d93b      	bls.n	8005582 <__ieee754_exp+0x92>
 800550a:	49b2      	ldr	r1, [pc, #712]	; (80057d4 <__ieee754_exp+0x2e4>)
 800550c:	428a      	cmp	r2, r1
 800550e:	d916      	bls.n	800553e <__ieee754_exp+0x4e>
 8005510:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005514:	4323      	orrs	r3, r4
 8005516:	ee10 2a10 	vmov	r2, s0
 800551a:	d007      	beq.n	800552c <__ieee754_exp+0x3c>
 800551c:	462b      	mov	r3, r5
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	f7fa fe5b 	bl	80001dc <__adddf3>
 8005526:	4604      	mov	r4, r0
 8005528:	460d      	mov	r5, r1
 800552a:	e002      	b.n	8005532 <__ieee754_exp+0x42>
 800552c:	b10e      	cbz	r6, 8005532 <__ieee754_exp+0x42>
 800552e:	2400      	movs	r4, #0
 8005530:	2500      	movs	r5, #0
 8005532:	ecbd 8b04 	vpop	{d8-d9}
 8005536:	ec45 4b10 	vmov	d0, r4, r5
 800553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553e:	a38e      	add	r3, pc, #568	; (adr r3, 8005778 <__ieee754_exp+0x288>)
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	ee10 0a10 	vmov	r0, s0
 8005548:	4629      	mov	r1, r5
 800554a:	f7fb fa8d 	bl	8000a68 <__aeabi_dcmpgt>
 800554e:	4607      	mov	r7, r0
 8005550:	b130      	cbz	r0, 8005560 <__ieee754_exp+0x70>
 8005552:	ecbd 8b04 	vpop	{d8-d9}
 8005556:	2000      	movs	r0, #0
 8005558:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	f000 bf25 	b.w	80063aa <__math_oflow>
 8005560:	a387      	add	r3, pc, #540	; (adr r3, 8005780 <__ieee754_exp+0x290>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	f7fb fa5f 	bl	8000a2c <__aeabi_dcmplt>
 800556e:	2800      	cmp	r0, #0
 8005570:	f000 808b 	beq.w	800568a <__ieee754_exp+0x19a>
 8005574:	ecbd 8b04 	vpop	{d8-d9}
 8005578:	4638      	mov	r0, r7
 800557a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557e:	f000 bf0b 	b.w	8006398 <__math_uflow>
 8005582:	4b95      	ldr	r3, [pc, #596]	; (80057d8 <__ieee754_exp+0x2e8>)
 8005584:	429a      	cmp	r2, r3
 8005586:	f240 80ac 	bls.w	80056e2 <__ieee754_exp+0x1f2>
 800558a:	4b94      	ldr	r3, [pc, #592]	; (80057dc <__ieee754_exp+0x2ec>)
 800558c:	429a      	cmp	r2, r3
 800558e:	d87c      	bhi.n	800568a <__ieee754_exp+0x19a>
 8005590:	4b93      	ldr	r3, [pc, #588]	; (80057e0 <__ieee754_exp+0x2f0>)
 8005592:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	ee10 0a10 	vmov	r0, s0
 800559e:	4629      	mov	r1, r5
 80055a0:	f7fa fe1a 	bl	80001d8 <__aeabi_dsub>
 80055a4:	4b8f      	ldr	r3, [pc, #572]	; (80057e4 <__ieee754_exp+0x2f4>)
 80055a6:	00f7      	lsls	r7, r6, #3
 80055a8:	443b      	add	r3, r7
 80055aa:	ed93 7b00 	vldr	d7, [r3]
 80055ae:	f1c6 0a01 	rsb	sl, r6, #1
 80055b2:	4680      	mov	r8, r0
 80055b4:	4689      	mov	r9, r1
 80055b6:	ebaa 0a06 	sub.w	sl, sl, r6
 80055ba:	eeb0 8a47 	vmov.f32	s16, s14
 80055be:	eef0 8a67 	vmov.f32	s17, s15
 80055c2:	ec53 2b18 	vmov	r2, r3, d8
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fa fe05 	bl	80001d8 <__aeabi_dsub>
 80055ce:	4604      	mov	r4, r0
 80055d0:	460d      	mov	r5, r1
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fa ffb5 	bl	8000548 <__aeabi_dmul>
 80055de:	a36a      	add	r3, pc, #424	; (adr r3, 8005788 <__ieee754_exp+0x298>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	4606      	mov	r6, r0
 80055e6:	460f      	mov	r7, r1
 80055e8:	f7fa ffae 	bl	8000548 <__aeabi_dmul>
 80055ec:	a368      	add	r3, pc, #416	; (adr r3, 8005790 <__ieee754_exp+0x2a0>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f7fa fdf1 	bl	80001d8 <__aeabi_dsub>
 80055f6:	4632      	mov	r2, r6
 80055f8:	463b      	mov	r3, r7
 80055fa:	f7fa ffa5 	bl	8000548 <__aeabi_dmul>
 80055fe:	a366      	add	r3, pc, #408	; (adr r3, 8005798 <__ieee754_exp+0x2a8>)
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f7fa fdea 	bl	80001dc <__adddf3>
 8005608:	4632      	mov	r2, r6
 800560a:	463b      	mov	r3, r7
 800560c:	f7fa ff9c 	bl	8000548 <__aeabi_dmul>
 8005610:	a363      	add	r3, pc, #396	; (adr r3, 80057a0 <__ieee754_exp+0x2b0>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa fddf 	bl	80001d8 <__aeabi_dsub>
 800561a:	4632      	mov	r2, r6
 800561c:	463b      	mov	r3, r7
 800561e:	f7fa ff93 	bl	8000548 <__aeabi_dmul>
 8005622:	a361      	add	r3, pc, #388	; (adr r3, 80057a8 <__ieee754_exp+0x2b8>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f7fa fdd8 	bl	80001dc <__adddf3>
 800562c:	4632      	mov	r2, r6
 800562e:	463b      	mov	r3, r7
 8005630:	f7fa ff8a 	bl	8000548 <__aeabi_dmul>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4620      	mov	r0, r4
 800563a:	4629      	mov	r1, r5
 800563c:	f7fa fdcc 	bl	80001d8 <__aeabi_dsub>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4606      	mov	r6, r0
 8005646:	460f      	mov	r7, r1
 8005648:	4620      	mov	r0, r4
 800564a:	4629      	mov	r1, r5
 800564c:	f7fa ff7c 	bl	8000548 <__aeabi_dmul>
 8005650:	ec41 0b19 	vmov	d9, r0, r1
 8005654:	f1ba 0f00 	cmp.w	sl, #0
 8005658:	d15d      	bne.n	8005716 <__ieee754_exp+0x226>
 800565a:	2200      	movs	r2, #0
 800565c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fa fdb8 	bl	80001d8 <__aeabi_dsub>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	ec51 0b19 	vmov	r0, r1, d9
 8005670:	f7fb f894 	bl	800079c <__aeabi_ddiv>
 8005674:	4622      	mov	r2, r4
 8005676:	462b      	mov	r3, r5
 8005678:	f7fa fdae 	bl	80001d8 <__aeabi_dsub>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	2000      	movs	r0, #0
 8005682:	4959      	ldr	r1, [pc, #356]	; (80057e8 <__ieee754_exp+0x2f8>)
 8005684:	f7fa fda8 	bl	80001d8 <__aeabi_dsub>
 8005688:	e74d      	b.n	8005526 <__ieee754_exp+0x36>
 800568a:	4b58      	ldr	r3, [pc, #352]	; (80057ec <__ieee754_exp+0x2fc>)
 800568c:	4620      	mov	r0, r4
 800568e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005692:	4629      	mov	r1, r5
 8005694:	a346      	add	r3, pc, #280	; (adr r3, 80057b0 <__ieee754_exp+0x2c0>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f7fa ff55 	bl	8000548 <__aeabi_dmul>
 800569e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056a2:	f7fa fd9b 	bl	80001dc <__adddf3>
 80056a6:	f7fb f9ff 	bl	8000aa8 <__aeabi_d2iz>
 80056aa:	4682      	mov	sl, r0
 80056ac:	f7fa fee2 	bl	8000474 <__aeabi_i2d>
 80056b0:	a341      	add	r3, pc, #260	; (adr r3, 80057b8 <__ieee754_exp+0x2c8>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	4606      	mov	r6, r0
 80056b8:	460f      	mov	r7, r1
 80056ba:	f7fa ff45 	bl	8000548 <__aeabi_dmul>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4620      	mov	r0, r4
 80056c4:	4629      	mov	r1, r5
 80056c6:	f7fa fd87 	bl	80001d8 <__aeabi_dsub>
 80056ca:	a33d      	add	r3, pc, #244	; (adr r3, 80057c0 <__ieee754_exp+0x2d0>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	4680      	mov	r8, r0
 80056d2:	4689      	mov	r9, r1
 80056d4:	4630      	mov	r0, r6
 80056d6:	4639      	mov	r1, r7
 80056d8:	f7fa ff36 	bl	8000548 <__aeabi_dmul>
 80056dc:	ec41 0b18 	vmov	d8, r0, r1
 80056e0:	e76f      	b.n	80055c2 <__ieee754_exp+0xd2>
 80056e2:	4b43      	ldr	r3, [pc, #268]	; (80057f0 <__ieee754_exp+0x300>)
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d811      	bhi.n	800570c <__ieee754_exp+0x21c>
 80056e8:	a337      	add	r3, pc, #220	; (adr r3, 80057c8 <__ieee754_exp+0x2d8>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	ee10 0a10 	vmov	r0, s0
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fa fd72 	bl	80001dc <__adddf3>
 80056f8:	4b3b      	ldr	r3, [pc, #236]	; (80057e8 <__ieee754_exp+0x2f8>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	f7fb f9b4 	bl	8000a68 <__aeabi_dcmpgt>
 8005700:	b138      	cbz	r0, 8005712 <__ieee754_exp+0x222>
 8005702:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <__ieee754_exp+0x2f8>)
 8005704:	2200      	movs	r2, #0
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	e70a      	b.n	8005522 <__ieee754_exp+0x32>
 800570c:	f04f 0a00 	mov.w	sl, #0
 8005710:	e75f      	b.n	80055d2 <__ieee754_exp+0xe2>
 8005712:	4682      	mov	sl, r0
 8005714:	e75d      	b.n	80055d2 <__ieee754_exp+0xe2>
 8005716:	4632      	mov	r2, r6
 8005718:	463b      	mov	r3, r7
 800571a:	2000      	movs	r0, #0
 800571c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005720:	f7fa fd5a 	bl	80001d8 <__aeabi_dsub>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	ec51 0b19 	vmov	r0, r1, d9
 800572c:	f7fb f836 	bl	800079c <__aeabi_ddiv>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	ec51 0b18 	vmov	r0, r1, d8
 8005738:	f7fa fd4e 	bl	80001d8 <__aeabi_dsub>
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	f7fa fd4a 	bl	80001d8 <__aeabi_dsub>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	2000      	movs	r0, #0
 800574a:	4927      	ldr	r1, [pc, #156]	; (80057e8 <__ieee754_exp+0x2f8>)
 800574c:	f7fa fd44 	bl	80001d8 <__aeabi_dsub>
 8005750:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8005754:	4592      	cmp	sl, r2
 8005756:	db02      	blt.n	800575e <__ieee754_exp+0x26e>
 8005758:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800575c:	e6e3      	b.n	8005526 <__ieee754_exp+0x36>
 800575e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8005762:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005766:	2200      	movs	r2, #0
 8005768:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800576c:	f7fa feec 	bl	8000548 <__aeabi_dmul>
 8005770:	e6d9      	b.n	8005526 <__ieee754_exp+0x36>
 8005772:	bf00      	nop
 8005774:	f3af 8000 	nop.w
 8005778:	fefa39ef 	.word	0xfefa39ef
 800577c:	40862e42 	.word	0x40862e42
 8005780:	d52d3051 	.word	0xd52d3051
 8005784:	c0874910 	.word	0xc0874910
 8005788:	72bea4d0 	.word	0x72bea4d0
 800578c:	3e663769 	.word	0x3e663769
 8005790:	c5d26bf1 	.word	0xc5d26bf1
 8005794:	3ebbbd41 	.word	0x3ebbbd41
 8005798:	af25de2c 	.word	0xaf25de2c
 800579c:	3f11566a 	.word	0x3f11566a
 80057a0:	16bebd93 	.word	0x16bebd93
 80057a4:	3f66c16c 	.word	0x3f66c16c
 80057a8:	5555553e 	.word	0x5555553e
 80057ac:	3fc55555 	.word	0x3fc55555
 80057b0:	652b82fe 	.word	0x652b82fe
 80057b4:	3ff71547 	.word	0x3ff71547
 80057b8:	fee00000 	.word	0xfee00000
 80057bc:	3fe62e42 	.word	0x3fe62e42
 80057c0:	35793c76 	.word	0x35793c76
 80057c4:	3dea39ef 	.word	0x3dea39ef
 80057c8:	8800759c 	.word	0x8800759c
 80057cc:	7e37e43c 	.word	0x7e37e43c
 80057d0:	40862e41 	.word	0x40862e41
 80057d4:	7fefffff 	.word	0x7fefffff
 80057d8:	3fd62e42 	.word	0x3fd62e42
 80057dc:	3ff0a2b1 	.word	0x3ff0a2b1
 80057e0:	080065d8 	.word	0x080065d8
 80057e4:	080065e8 	.word	0x080065e8
 80057e8:	3ff00000 	.word	0x3ff00000
 80057ec:	080065c8 	.word	0x080065c8
 80057f0:	3defffff 	.word	0x3defffff
 80057f4:	00000000 	.word	0x00000000

080057f8 <__ieee754_pow>:
 80057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fc:	ed2d 8b06 	vpush	{d8-d10}
 8005800:	b089      	sub	sp, #36	; 0x24
 8005802:	ed8d 1b00 	vstr	d1, [sp]
 8005806:	e9dd 2900 	ldrd	r2, r9, [sp]
 800580a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800580e:	ea58 0102 	orrs.w	r1, r8, r2
 8005812:	ec57 6b10 	vmov	r6, r7, d0
 8005816:	d115      	bne.n	8005844 <__ieee754_pow+0x4c>
 8005818:	19b3      	adds	r3, r6, r6
 800581a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800581e:	4152      	adcs	r2, r2
 8005820:	4299      	cmp	r1, r3
 8005822:	4b89      	ldr	r3, [pc, #548]	; (8005a48 <__ieee754_pow+0x250>)
 8005824:	4193      	sbcs	r3, r2
 8005826:	f080 84d1 	bcs.w	80061cc <__ieee754_pow+0x9d4>
 800582a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800582e:	4630      	mov	r0, r6
 8005830:	4639      	mov	r1, r7
 8005832:	f7fa fcd3 	bl	80001dc <__adddf3>
 8005836:	ec41 0b10 	vmov	d0, r0, r1
 800583a:	b009      	add	sp, #36	; 0x24
 800583c:	ecbd 8b06 	vpop	{d8-d10}
 8005840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005844:	4b81      	ldr	r3, [pc, #516]	; (8005a4c <__ieee754_pow+0x254>)
 8005846:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800584a:	429c      	cmp	r4, r3
 800584c:	ee10 aa10 	vmov	sl, s0
 8005850:	463d      	mov	r5, r7
 8005852:	dc06      	bgt.n	8005862 <__ieee754_pow+0x6a>
 8005854:	d101      	bne.n	800585a <__ieee754_pow+0x62>
 8005856:	2e00      	cmp	r6, #0
 8005858:	d1e7      	bne.n	800582a <__ieee754_pow+0x32>
 800585a:	4598      	cmp	r8, r3
 800585c:	dc01      	bgt.n	8005862 <__ieee754_pow+0x6a>
 800585e:	d10f      	bne.n	8005880 <__ieee754_pow+0x88>
 8005860:	b172      	cbz	r2, 8005880 <__ieee754_pow+0x88>
 8005862:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005866:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800586a:	ea55 050a 	orrs.w	r5, r5, sl
 800586e:	d1dc      	bne.n	800582a <__ieee754_pow+0x32>
 8005870:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005874:	18db      	adds	r3, r3, r3
 8005876:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800587a:	4152      	adcs	r2, r2
 800587c:	429d      	cmp	r5, r3
 800587e:	e7d0      	b.n	8005822 <__ieee754_pow+0x2a>
 8005880:	2d00      	cmp	r5, #0
 8005882:	da3b      	bge.n	80058fc <__ieee754_pow+0x104>
 8005884:	4b72      	ldr	r3, [pc, #456]	; (8005a50 <__ieee754_pow+0x258>)
 8005886:	4598      	cmp	r8, r3
 8005888:	dc51      	bgt.n	800592e <__ieee754_pow+0x136>
 800588a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800588e:	4598      	cmp	r8, r3
 8005890:	f340 84ab 	ble.w	80061ea <__ieee754_pow+0x9f2>
 8005894:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005898:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800589c:	2b14      	cmp	r3, #20
 800589e:	dd0f      	ble.n	80058c0 <__ieee754_pow+0xc8>
 80058a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80058a4:	fa22 f103 	lsr.w	r1, r2, r3
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	4293      	cmp	r3, r2
 80058ae:	f040 849c 	bne.w	80061ea <__ieee754_pow+0x9f2>
 80058b2:	f001 0101 	and.w	r1, r1, #1
 80058b6:	f1c1 0302 	rsb	r3, r1, #2
 80058ba:	9304      	str	r3, [sp, #16]
 80058bc:	b182      	cbz	r2, 80058e0 <__ieee754_pow+0xe8>
 80058be:	e05f      	b.n	8005980 <__ieee754_pow+0x188>
 80058c0:	2a00      	cmp	r2, #0
 80058c2:	d15b      	bne.n	800597c <__ieee754_pow+0x184>
 80058c4:	f1c3 0314 	rsb	r3, r3, #20
 80058c8:	fa48 f103 	asr.w	r1, r8, r3
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	4543      	cmp	r3, r8
 80058d2:	f040 8487 	bne.w	80061e4 <__ieee754_pow+0x9ec>
 80058d6:	f001 0101 	and.w	r1, r1, #1
 80058da:	f1c1 0302 	rsb	r3, r1, #2
 80058de:	9304      	str	r3, [sp, #16]
 80058e0:	4b5c      	ldr	r3, [pc, #368]	; (8005a54 <__ieee754_pow+0x25c>)
 80058e2:	4598      	cmp	r8, r3
 80058e4:	d132      	bne.n	800594c <__ieee754_pow+0x154>
 80058e6:	f1b9 0f00 	cmp.w	r9, #0
 80058ea:	f280 8477 	bge.w	80061dc <__ieee754_pow+0x9e4>
 80058ee:	4959      	ldr	r1, [pc, #356]	; (8005a54 <__ieee754_pow+0x25c>)
 80058f0:	4632      	mov	r2, r6
 80058f2:	463b      	mov	r3, r7
 80058f4:	2000      	movs	r0, #0
 80058f6:	f7fa ff51 	bl	800079c <__aeabi_ddiv>
 80058fa:	e79c      	b.n	8005836 <__ieee754_pow+0x3e>
 80058fc:	2300      	movs	r3, #0
 80058fe:	9304      	str	r3, [sp, #16]
 8005900:	2a00      	cmp	r2, #0
 8005902:	d13d      	bne.n	8005980 <__ieee754_pow+0x188>
 8005904:	4b51      	ldr	r3, [pc, #324]	; (8005a4c <__ieee754_pow+0x254>)
 8005906:	4598      	cmp	r8, r3
 8005908:	d1ea      	bne.n	80058e0 <__ieee754_pow+0xe8>
 800590a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800590e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005912:	ea53 030a 	orrs.w	r3, r3, sl
 8005916:	f000 8459 	beq.w	80061cc <__ieee754_pow+0x9d4>
 800591a:	4b4f      	ldr	r3, [pc, #316]	; (8005a58 <__ieee754_pow+0x260>)
 800591c:	429c      	cmp	r4, r3
 800591e:	dd08      	ble.n	8005932 <__ieee754_pow+0x13a>
 8005920:	f1b9 0f00 	cmp.w	r9, #0
 8005924:	f2c0 8456 	blt.w	80061d4 <__ieee754_pow+0x9dc>
 8005928:	e9dd 0100 	ldrd	r0, r1, [sp]
 800592c:	e783      	b.n	8005836 <__ieee754_pow+0x3e>
 800592e:	2302      	movs	r3, #2
 8005930:	e7e5      	b.n	80058fe <__ieee754_pow+0x106>
 8005932:	f1b9 0f00 	cmp.w	r9, #0
 8005936:	f04f 0000 	mov.w	r0, #0
 800593a:	f04f 0100 	mov.w	r1, #0
 800593e:	f6bf af7a 	bge.w	8005836 <__ieee754_pow+0x3e>
 8005942:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005946:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800594a:	e774      	b.n	8005836 <__ieee754_pow+0x3e>
 800594c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005950:	d106      	bne.n	8005960 <__ieee754_pow+0x168>
 8005952:	4632      	mov	r2, r6
 8005954:	463b      	mov	r3, r7
 8005956:	4630      	mov	r0, r6
 8005958:	4639      	mov	r1, r7
 800595a:	f7fa fdf5 	bl	8000548 <__aeabi_dmul>
 800595e:	e76a      	b.n	8005836 <__ieee754_pow+0x3e>
 8005960:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <__ieee754_pow+0x264>)
 8005962:	4599      	cmp	r9, r3
 8005964:	d10c      	bne.n	8005980 <__ieee754_pow+0x188>
 8005966:	2d00      	cmp	r5, #0
 8005968:	db0a      	blt.n	8005980 <__ieee754_pow+0x188>
 800596a:	ec47 6b10 	vmov	d0, r6, r7
 800596e:	b009      	add	sp, #36	; 0x24
 8005970:	ecbd 8b06 	vpop	{d8-d10}
 8005974:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	f000 bd20 	b.w	80063bc <__ieee754_sqrt>
 800597c:	2300      	movs	r3, #0
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	ec47 6b10 	vmov	d0, r6, r7
 8005984:	f000 fc62 	bl	800624c <fabs>
 8005988:	ec51 0b10 	vmov	r0, r1, d0
 800598c:	f1ba 0f00 	cmp.w	sl, #0
 8005990:	d129      	bne.n	80059e6 <__ieee754_pow+0x1ee>
 8005992:	b124      	cbz	r4, 800599e <__ieee754_pow+0x1a6>
 8005994:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <__ieee754_pow+0x25c>)
 8005996:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800599a:	429a      	cmp	r2, r3
 800599c:	d123      	bne.n	80059e6 <__ieee754_pow+0x1ee>
 800599e:	f1b9 0f00 	cmp.w	r9, #0
 80059a2:	da05      	bge.n	80059b0 <__ieee754_pow+0x1b8>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	2000      	movs	r0, #0
 80059aa:	492a      	ldr	r1, [pc, #168]	; (8005a54 <__ieee754_pow+0x25c>)
 80059ac:	f7fa fef6 	bl	800079c <__aeabi_ddiv>
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	f6bf af40 	bge.w	8005836 <__ieee754_pow+0x3e>
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80059bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80059c0:	431c      	orrs	r4, r3
 80059c2:	d108      	bne.n	80059d6 <__ieee754_pow+0x1de>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4610      	mov	r0, r2
 80059ca:	4619      	mov	r1, r3
 80059cc:	f7fa fc04 	bl	80001d8 <__aeabi_dsub>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	e78f      	b.n	80058f6 <__ieee754_pow+0xfe>
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	f47f af2c 	bne.w	8005836 <__ieee754_pow+0x3e>
 80059de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059e2:	4619      	mov	r1, r3
 80059e4:	e727      	b.n	8005836 <__ieee754_pow+0x3e>
 80059e6:	0feb      	lsrs	r3, r5, #31
 80059e8:	3b01      	subs	r3, #1
 80059ea:	9306      	str	r3, [sp, #24]
 80059ec:	9a06      	ldr	r2, [sp, #24]
 80059ee:	9b04      	ldr	r3, [sp, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	d102      	bne.n	80059fa <__ieee754_pow+0x202>
 80059f4:	4632      	mov	r2, r6
 80059f6:	463b      	mov	r3, r7
 80059f8:	e7e6      	b.n	80059c8 <__ieee754_pow+0x1d0>
 80059fa:	4b19      	ldr	r3, [pc, #100]	; (8005a60 <__ieee754_pow+0x268>)
 80059fc:	4598      	cmp	r8, r3
 80059fe:	f340 80fb 	ble.w	8005bf8 <__ieee754_pow+0x400>
 8005a02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005a06:	4598      	cmp	r8, r3
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <__ieee754_pow+0x260>)
 8005a0a:	dd0c      	ble.n	8005a26 <__ieee754_pow+0x22e>
 8005a0c:	429c      	cmp	r4, r3
 8005a0e:	dc0f      	bgt.n	8005a30 <__ieee754_pow+0x238>
 8005a10:	f1b9 0f00 	cmp.w	r9, #0
 8005a14:	da0f      	bge.n	8005a36 <__ieee754_pow+0x23e>
 8005a16:	2000      	movs	r0, #0
 8005a18:	b009      	add	sp, #36	; 0x24
 8005a1a:	ecbd 8b06 	vpop	{d8-d10}
 8005a1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a22:	f000 bcc2 	b.w	80063aa <__math_oflow>
 8005a26:	429c      	cmp	r4, r3
 8005a28:	dbf2      	blt.n	8005a10 <__ieee754_pow+0x218>
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <__ieee754_pow+0x25c>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	dd19      	ble.n	8005a64 <__ieee754_pow+0x26c>
 8005a30:	f1b9 0f00 	cmp.w	r9, #0
 8005a34:	dcef      	bgt.n	8005a16 <__ieee754_pow+0x21e>
 8005a36:	2000      	movs	r0, #0
 8005a38:	b009      	add	sp, #36	; 0x24
 8005a3a:	ecbd 8b06 	vpop	{d8-d10}
 8005a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a42:	f000 bca9 	b.w	8006398 <__math_uflow>
 8005a46:	bf00      	nop
 8005a48:	fff00000 	.word	0xfff00000
 8005a4c:	7ff00000 	.word	0x7ff00000
 8005a50:	433fffff 	.word	0x433fffff
 8005a54:	3ff00000 	.word	0x3ff00000
 8005a58:	3fefffff 	.word	0x3fefffff
 8005a5c:	3fe00000 	.word	0x3fe00000
 8005a60:	41e00000 	.word	0x41e00000
 8005a64:	4b60      	ldr	r3, [pc, #384]	; (8005be8 <__ieee754_pow+0x3f0>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	f7fa fbb6 	bl	80001d8 <__aeabi_dsub>
 8005a6c:	a354      	add	r3, pc, #336	; (adr r3, 8005bc0 <__ieee754_pow+0x3c8>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	4604      	mov	r4, r0
 8005a74:	460d      	mov	r5, r1
 8005a76:	f7fa fd67 	bl	8000548 <__aeabi_dmul>
 8005a7a:	a353      	add	r3, pc, #332	; (adr r3, 8005bc8 <__ieee754_pow+0x3d0>)
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	4606      	mov	r6, r0
 8005a82:	460f      	mov	r7, r1
 8005a84:	4620      	mov	r0, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	f7fa fd5e 	bl	8000548 <__aeabi_dmul>
 8005a8c:	4b57      	ldr	r3, [pc, #348]	; (8005bec <__ieee754_pow+0x3f4>)
 8005a8e:	4682      	mov	sl, r0
 8005a90:	468b      	mov	fp, r1
 8005a92:	2200      	movs	r2, #0
 8005a94:	4620      	mov	r0, r4
 8005a96:	4629      	mov	r1, r5
 8005a98:	f7fa fd56 	bl	8000548 <__aeabi_dmul>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	a14b      	add	r1, pc, #300	; (adr r1, 8005bd0 <__ieee754_pow+0x3d8>)
 8005aa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa6:	f7fa fb97 	bl	80001d8 <__aeabi_dsub>
 8005aaa:	4622      	mov	r2, r4
 8005aac:	462b      	mov	r3, r5
 8005aae:	f7fa fd4b 	bl	8000548 <__aeabi_dmul>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	494d      	ldr	r1, [pc, #308]	; (8005bf0 <__ieee754_pow+0x3f8>)
 8005aba:	f7fa fb8d 	bl	80001d8 <__aeabi_dsub>
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	4689      	mov	r9, r1
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	f7fa fd3d 	bl	8000548 <__aeabi_dmul>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	f7fa fd37 	bl	8000548 <__aeabi_dmul>
 8005ada:	a33f      	add	r3, pc, #252	; (adr r3, 8005bd8 <__ieee754_pow+0x3e0>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f7fa fd32 	bl	8000548 <__aeabi_dmul>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4650      	mov	r0, sl
 8005aea:	4659      	mov	r1, fp
 8005aec:	f7fa fb74 	bl	80001d8 <__aeabi_dsub>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4680      	mov	r8, r0
 8005af6:	4689      	mov	r9, r1
 8005af8:	4630      	mov	r0, r6
 8005afa:	4639      	mov	r1, r7
 8005afc:	f7fa fb6e 	bl	80001dc <__adddf3>
 8005b00:	2000      	movs	r0, #0
 8005b02:	4632      	mov	r2, r6
 8005b04:	463b      	mov	r3, r7
 8005b06:	4604      	mov	r4, r0
 8005b08:	460d      	mov	r5, r1
 8005b0a:	f7fa fb65 	bl	80001d8 <__aeabi_dsub>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4640      	mov	r0, r8
 8005b14:	4649      	mov	r1, r9
 8005b16:	f7fa fb5f 	bl	80001d8 <__aeabi_dsub>
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	9a06      	ldr	r2, [sp, #24]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	4682      	mov	sl, r0
 8005b24:	468b      	mov	fp, r1
 8005b26:	f040 81e7 	bne.w	8005ef8 <__ieee754_pow+0x700>
 8005b2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005be0 <__ieee754_pow+0x3e8>
 8005b2e:	eeb0 8a47 	vmov.f32	s16, s14
 8005b32:	eef0 8a67 	vmov.f32	s17, s15
 8005b36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	463b      	mov	r3, r7
 8005b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b44:	f7fa fb48 	bl	80001d8 <__aeabi_dsub>
 8005b48:	4622      	mov	r2, r4
 8005b4a:	462b      	mov	r3, r5
 8005b4c:	f7fa fcfc 	bl	8000548 <__aeabi_dmul>
 8005b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b54:	4680      	mov	r8, r0
 8005b56:	4689      	mov	r9, r1
 8005b58:	4650      	mov	r0, sl
 8005b5a:	4659      	mov	r1, fp
 8005b5c:	f7fa fcf4 	bl	8000548 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4640      	mov	r0, r8
 8005b66:	4649      	mov	r1, r9
 8005b68:	f7fa fb38 	bl	80001dc <__adddf3>
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	463b      	mov	r3, r7
 8005b70:	4680      	mov	r8, r0
 8005b72:	4689      	mov	r9, r1
 8005b74:	4620      	mov	r0, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	f7fa fce6 	bl	8000548 <__aeabi_dmul>
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460d      	mov	r5, r1
 8005b82:	4602      	mov	r2, r0
 8005b84:	4649      	mov	r1, r9
 8005b86:	4640      	mov	r0, r8
 8005b88:	f7fa fb28 	bl	80001dc <__adddf3>
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <__ieee754_pow+0x3fc>)
 8005b8e:	4299      	cmp	r1, r3
 8005b90:	ec45 4b19 	vmov	d9, r4, r5
 8005b94:	4606      	mov	r6, r0
 8005b96:	460f      	mov	r7, r1
 8005b98:	468b      	mov	fp, r1
 8005b9a:	f340 82f0 	ble.w	800617e <__ieee754_pow+0x986>
 8005b9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005ba2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005ba6:	4303      	orrs	r3, r0
 8005ba8:	f000 81e4 	beq.w	8005f74 <__ieee754_pow+0x77c>
 8005bac:	ec51 0b18 	vmov	r0, r1, d8
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f7fa ff3a 	bl	8000a2c <__aeabi_dcmplt>
 8005bb8:	3800      	subs	r0, #0
 8005bba:	bf18      	it	ne
 8005bbc:	2001      	movne	r0, #1
 8005bbe:	e72b      	b.n	8005a18 <__ieee754_pow+0x220>
 8005bc0:	60000000 	.word	0x60000000
 8005bc4:	3ff71547 	.word	0x3ff71547
 8005bc8:	f85ddf44 	.word	0xf85ddf44
 8005bcc:	3e54ae0b 	.word	0x3e54ae0b
 8005bd0:	55555555 	.word	0x55555555
 8005bd4:	3fd55555 	.word	0x3fd55555
 8005bd8:	652b82fe 	.word	0x652b82fe
 8005bdc:	3ff71547 	.word	0x3ff71547
 8005be0:	00000000 	.word	0x00000000
 8005be4:	bff00000 	.word	0xbff00000
 8005be8:	3ff00000 	.word	0x3ff00000
 8005bec:	3fd00000 	.word	0x3fd00000
 8005bf0:	3fe00000 	.word	0x3fe00000
 8005bf4:	408fffff 	.word	0x408fffff
 8005bf8:	4bd5      	ldr	r3, [pc, #852]	; (8005f50 <__ieee754_pow+0x758>)
 8005bfa:	402b      	ands	r3, r5
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	b92b      	cbnz	r3, 8005c0c <__ieee754_pow+0x414>
 8005c00:	4bd4      	ldr	r3, [pc, #848]	; (8005f54 <__ieee754_pow+0x75c>)
 8005c02:	f7fa fca1 	bl	8000548 <__aeabi_dmul>
 8005c06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	1523      	asrs	r3, r4, #20
 8005c0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c12:	4413      	add	r3, r2
 8005c14:	9305      	str	r3, [sp, #20]
 8005c16:	4bd0      	ldr	r3, [pc, #832]	; (8005f58 <__ieee754_pow+0x760>)
 8005c18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005c1c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005c20:	429c      	cmp	r4, r3
 8005c22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005c26:	dd08      	ble.n	8005c3a <__ieee754_pow+0x442>
 8005c28:	4bcc      	ldr	r3, [pc, #816]	; (8005f5c <__ieee754_pow+0x764>)
 8005c2a:	429c      	cmp	r4, r3
 8005c2c:	f340 8162 	ble.w	8005ef4 <__ieee754_pow+0x6fc>
 8005c30:	9b05      	ldr	r3, [sp, #20]
 8005c32:	3301      	adds	r3, #1
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005c3a:	2400      	movs	r4, #0
 8005c3c:	00e3      	lsls	r3, r4, #3
 8005c3e:	9307      	str	r3, [sp, #28]
 8005c40:	4bc7      	ldr	r3, [pc, #796]	; (8005f60 <__ieee754_pow+0x768>)
 8005c42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c46:	ed93 7b00 	vldr	d7, [r3]
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	ec53 2b17 	vmov	r2, r3, d7
 8005c50:	eeb0 9a47 	vmov.f32	s18, s14
 8005c54:	eef0 9a67 	vmov.f32	s19, s15
 8005c58:	4682      	mov	sl, r0
 8005c5a:	f7fa fabd 	bl	80001d8 <__aeabi_dsub>
 8005c5e:	4652      	mov	r2, sl
 8005c60:	4606      	mov	r6, r0
 8005c62:	460f      	mov	r7, r1
 8005c64:	462b      	mov	r3, r5
 8005c66:	ec51 0b19 	vmov	r0, r1, d9
 8005c6a:	f7fa fab7 	bl	80001dc <__adddf3>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	2000      	movs	r0, #0
 8005c74:	49bb      	ldr	r1, [pc, #748]	; (8005f64 <__ieee754_pow+0x76c>)
 8005c76:	f7fa fd91 	bl	800079c <__aeabi_ddiv>
 8005c7a:	ec41 0b1a 	vmov	d10, r0, r1
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa fc5f 	bl	8000548 <__aeabi_dmul>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c90:	9302      	str	r3, [sp, #8]
 8005c92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005c96:	46ab      	mov	fp, r5
 8005c98:	106d      	asrs	r5, r5, #1
 8005c9a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005c9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005ca2:	ec41 0b18 	vmov	d8, r0, r1
 8005ca6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005caa:	2200      	movs	r2, #0
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	f7fa fc48 	bl	8000548 <__aeabi_dmul>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	f7fa fa8a 	bl	80001d8 <__aeabi_dsub>
 8005cc4:	ec53 2b19 	vmov	r2, r3, d9
 8005cc8:	4606      	mov	r6, r0
 8005cca:	460f      	mov	r7, r1
 8005ccc:	4620      	mov	r0, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7fa fa82 	bl	80001d8 <__aeabi_dsub>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4650      	mov	r0, sl
 8005cda:	4659      	mov	r1, fp
 8005cdc:	f7fa fa7c 	bl	80001d8 <__aeabi_dsub>
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	f7fa fc30 	bl	8000548 <__aeabi_dmul>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	f7fa fa72 	bl	80001d8 <__aeabi_dsub>
 8005cf4:	ec53 2b1a 	vmov	r2, r3, d10
 8005cf8:	f7fa fc26 	bl	8000548 <__aeabi_dmul>
 8005cfc:	ec53 2b18 	vmov	r2, r3, d8
 8005d00:	ec41 0b19 	vmov	d9, r0, r1
 8005d04:	ec51 0b18 	vmov	r0, r1, d8
 8005d08:	f7fa fc1e 	bl	8000548 <__aeabi_dmul>
 8005d0c:	a37c      	add	r3, pc, #496	; (adr r3, 8005f00 <__ieee754_pow+0x708>)
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	4604      	mov	r4, r0
 8005d14:	460d      	mov	r5, r1
 8005d16:	f7fa fc17 	bl	8000548 <__aeabi_dmul>
 8005d1a:	a37b      	add	r3, pc, #492	; (adr r3, 8005f08 <__ieee754_pow+0x710>)
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	f7fa fa5c 	bl	80001dc <__adddf3>
 8005d24:	4622      	mov	r2, r4
 8005d26:	462b      	mov	r3, r5
 8005d28:	f7fa fc0e 	bl	8000548 <__aeabi_dmul>
 8005d2c:	a378      	add	r3, pc, #480	; (adr r3, 8005f10 <__ieee754_pow+0x718>)
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f7fa fa53 	bl	80001dc <__adddf3>
 8005d36:	4622      	mov	r2, r4
 8005d38:	462b      	mov	r3, r5
 8005d3a:	f7fa fc05 	bl	8000548 <__aeabi_dmul>
 8005d3e:	a376      	add	r3, pc, #472	; (adr r3, 8005f18 <__ieee754_pow+0x720>)
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f7fa fa4a 	bl	80001dc <__adddf3>
 8005d48:	4622      	mov	r2, r4
 8005d4a:	462b      	mov	r3, r5
 8005d4c:	f7fa fbfc 	bl	8000548 <__aeabi_dmul>
 8005d50:	a373      	add	r3, pc, #460	; (adr r3, 8005f20 <__ieee754_pow+0x728>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f7fa fa41 	bl	80001dc <__adddf3>
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f7fa fbf3 	bl	8000548 <__aeabi_dmul>
 8005d62:	a371      	add	r3, pc, #452	; (adr r3, 8005f28 <__ieee754_pow+0x730>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f7fa fa38 	bl	80001dc <__adddf3>
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	4606      	mov	r6, r0
 8005d70:	460f      	mov	r7, r1
 8005d72:	462b      	mov	r3, r5
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7fa fbe6 	bl	8000548 <__aeabi_dmul>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa fbe0 	bl	8000548 <__aeabi_dmul>
 8005d88:	4642      	mov	r2, r8
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	460d      	mov	r5, r1
 8005d8e:	464b      	mov	r3, r9
 8005d90:	ec51 0b18 	vmov	r0, r1, d8
 8005d94:	f7fa fa22 	bl	80001dc <__adddf3>
 8005d98:	ec53 2b19 	vmov	r2, r3, d9
 8005d9c:	f7fa fbd4 	bl	8000548 <__aeabi_dmul>
 8005da0:	4622      	mov	r2, r4
 8005da2:	462b      	mov	r3, r5
 8005da4:	f7fa fa1a 	bl	80001dc <__adddf3>
 8005da8:	4642      	mov	r2, r8
 8005daa:	4682      	mov	sl, r0
 8005dac:	468b      	mov	fp, r1
 8005dae:	464b      	mov	r3, r9
 8005db0:	4640      	mov	r0, r8
 8005db2:	4649      	mov	r1, r9
 8005db4:	f7fa fbc8 	bl	8000548 <__aeabi_dmul>
 8005db8:	4b6b      	ldr	r3, [pc, #428]	; (8005f68 <__ieee754_pow+0x770>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	460f      	mov	r7, r1
 8005dc0:	f7fa fa0c 	bl	80001dc <__adddf3>
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	465b      	mov	r3, fp
 8005dc8:	f7fa fa08 	bl	80001dc <__adddf3>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	4604      	mov	r4, r0
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	f7fa fbb5 	bl	8000548 <__aeabi_dmul>
 8005dde:	4b62      	ldr	r3, [pc, #392]	; (8005f68 <__ieee754_pow+0x770>)
 8005de0:	4680      	mov	r8, r0
 8005de2:	4689      	mov	r9, r1
 8005de4:	2200      	movs	r2, #0
 8005de6:	4620      	mov	r0, r4
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7fa f9f5 	bl	80001d8 <__aeabi_dsub>
 8005dee:	4632      	mov	r2, r6
 8005df0:	463b      	mov	r3, r7
 8005df2:	f7fa f9f1 	bl	80001d8 <__aeabi_dsub>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4650      	mov	r0, sl
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	f7fa f9eb 	bl	80001d8 <__aeabi_dsub>
 8005e02:	ec53 2b18 	vmov	r2, r3, d8
 8005e06:	f7fa fb9f 	bl	8000548 <__aeabi_dmul>
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	460f      	mov	r7, r1
 8005e10:	462b      	mov	r3, r5
 8005e12:	ec51 0b19 	vmov	r0, r1, d9
 8005e16:	f7fa fb97 	bl	8000548 <__aeabi_dmul>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4630      	mov	r0, r6
 8005e20:	4639      	mov	r1, r7
 8005e22:	f7fa f9db 	bl	80001dc <__adddf3>
 8005e26:	4606      	mov	r6, r0
 8005e28:	460f      	mov	r7, r1
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4640      	mov	r0, r8
 8005e30:	4649      	mov	r1, r9
 8005e32:	f7fa f9d3 	bl	80001dc <__adddf3>
 8005e36:	a33e      	add	r3, pc, #248	; (adr r3, 8005f30 <__ieee754_pow+0x738>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	4604      	mov	r4, r0
 8005e40:	460d      	mov	r5, r1
 8005e42:	f7fa fb81 	bl	8000548 <__aeabi_dmul>
 8005e46:	4642      	mov	r2, r8
 8005e48:	ec41 0b18 	vmov	d8, r0, r1
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	4620      	mov	r0, r4
 8005e50:	4629      	mov	r1, r5
 8005e52:	f7fa f9c1 	bl	80001d8 <__aeabi_dsub>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	4639      	mov	r1, r7
 8005e5e:	f7fa f9bb 	bl	80001d8 <__aeabi_dsub>
 8005e62:	a335      	add	r3, pc, #212	; (adr r3, 8005f38 <__ieee754_pow+0x740>)
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	f7fa fb6e 	bl	8000548 <__aeabi_dmul>
 8005e6c:	a334      	add	r3, pc, #208	; (adr r3, 8005f40 <__ieee754_pow+0x748>)
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	4606      	mov	r6, r0
 8005e74:	460f      	mov	r7, r1
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fb65 	bl	8000548 <__aeabi_dmul>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4630      	mov	r0, r6
 8005e84:	4639      	mov	r1, r7
 8005e86:	f7fa f9a9 	bl	80001dc <__adddf3>
 8005e8a:	9a07      	ldr	r2, [sp, #28]
 8005e8c:	4b37      	ldr	r3, [pc, #220]	; (8005f6c <__ieee754_pow+0x774>)
 8005e8e:	4413      	add	r3, r2
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa f9a2 	bl	80001dc <__adddf3>
 8005e98:	4682      	mov	sl, r0
 8005e9a:	9805      	ldr	r0, [sp, #20]
 8005e9c:	468b      	mov	fp, r1
 8005e9e:	f7fa fae9 	bl	8000474 <__aeabi_i2d>
 8005ea2:	9a07      	ldr	r2, [sp, #28]
 8005ea4:	4b32      	ldr	r3, [pc, #200]	; (8005f70 <__ieee754_pow+0x778>)
 8005ea6:	4413      	add	r3, r2
 8005ea8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eac:	4606      	mov	r6, r0
 8005eae:	460f      	mov	r7, r1
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	465b      	mov	r3, fp
 8005eb4:	ec51 0b18 	vmov	r0, r1, d8
 8005eb8:	f7fa f990 	bl	80001dc <__adddf3>
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	f7fa f98c 	bl	80001dc <__adddf3>
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	f7fa f988 	bl	80001dc <__adddf3>
 8005ecc:	2000      	movs	r0, #0
 8005ece:	4632      	mov	r2, r6
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	f7fa f97f 	bl	80001d8 <__aeabi_dsub>
 8005eda:	4642      	mov	r2, r8
 8005edc:	464b      	mov	r3, r9
 8005ede:	f7fa f97b 	bl	80001d8 <__aeabi_dsub>
 8005ee2:	ec53 2b18 	vmov	r2, r3, d8
 8005ee6:	f7fa f977 	bl	80001d8 <__aeabi_dsub>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4650      	mov	r0, sl
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	e610      	b.n	8005b16 <__ieee754_pow+0x31e>
 8005ef4:	2401      	movs	r4, #1
 8005ef6:	e6a1      	b.n	8005c3c <__ieee754_pow+0x444>
 8005ef8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005f48 <__ieee754_pow+0x750>
 8005efc:	e617      	b.n	8005b2e <__ieee754_pow+0x336>
 8005efe:	bf00      	nop
 8005f00:	4a454eef 	.word	0x4a454eef
 8005f04:	3fca7e28 	.word	0x3fca7e28
 8005f08:	93c9db65 	.word	0x93c9db65
 8005f0c:	3fcd864a 	.word	0x3fcd864a
 8005f10:	a91d4101 	.word	0xa91d4101
 8005f14:	3fd17460 	.word	0x3fd17460
 8005f18:	518f264d 	.word	0x518f264d
 8005f1c:	3fd55555 	.word	0x3fd55555
 8005f20:	db6fabff 	.word	0xdb6fabff
 8005f24:	3fdb6db6 	.word	0x3fdb6db6
 8005f28:	33333303 	.word	0x33333303
 8005f2c:	3fe33333 	.word	0x3fe33333
 8005f30:	e0000000 	.word	0xe0000000
 8005f34:	3feec709 	.word	0x3feec709
 8005f38:	dc3a03fd 	.word	0xdc3a03fd
 8005f3c:	3feec709 	.word	0x3feec709
 8005f40:	145b01f5 	.word	0x145b01f5
 8005f44:	be3e2fe0 	.word	0xbe3e2fe0
 8005f48:	00000000 	.word	0x00000000
 8005f4c:	3ff00000 	.word	0x3ff00000
 8005f50:	7ff00000 	.word	0x7ff00000
 8005f54:	43400000 	.word	0x43400000
 8005f58:	0003988e 	.word	0x0003988e
 8005f5c:	000bb679 	.word	0x000bb679
 8005f60:	080065f8 	.word	0x080065f8
 8005f64:	3ff00000 	.word	0x3ff00000
 8005f68:	40080000 	.word	0x40080000
 8005f6c:	08006618 	.word	0x08006618
 8005f70:	08006608 	.word	0x08006608
 8005f74:	a3b3      	add	r3, pc, #716	; (adr r3, 8006244 <__ieee754_pow+0xa4c>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa f92d 	bl	80001dc <__adddf3>
 8005f82:	4622      	mov	r2, r4
 8005f84:	ec41 0b1a 	vmov	d10, r0, r1
 8005f88:	462b      	mov	r3, r5
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	4639      	mov	r1, r7
 8005f8e:	f7fa f923 	bl	80001d8 <__aeabi_dsub>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	ec51 0b1a 	vmov	r0, r1, d10
 8005f9a:	f7fa fd65 	bl	8000a68 <__aeabi_dcmpgt>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f47f ae04 	bne.w	8005bac <__ieee754_pow+0x3b4>
 8005fa4:	4aa2      	ldr	r2, [pc, #648]	; (8006230 <__ieee754_pow+0xa38>)
 8005fa6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f340 8107 	ble.w	80061be <__ieee754_pow+0x9c6>
 8005fb0:	151b      	asrs	r3, r3, #20
 8005fb2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005fb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005fba:	fa4a fa03 	asr.w	sl, sl, r3
 8005fbe:	44da      	add	sl, fp
 8005fc0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005fc4:	489b      	ldr	r0, [pc, #620]	; (8006234 <__ieee754_pow+0xa3c>)
 8005fc6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005fca:	4108      	asrs	r0, r1
 8005fcc:	ea00 030a 	and.w	r3, r0, sl
 8005fd0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005fd4:	f1c1 0114 	rsb	r1, r1, #20
 8005fd8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005fdc:	fa4a fa01 	asr.w	sl, sl, r1
 8005fe0:	f1bb 0f00 	cmp.w	fp, #0
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	bfb8      	it	lt
 8005fee:	f1ca 0a00 	rsblt	sl, sl, #0
 8005ff2:	f7fa f8f1 	bl	80001d8 <__aeabi_dsub>
 8005ff6:	ec41 0b19 	vmov	d9, r0, r1
 8005ffa:	4642      	mov	r2, r8
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	ec51 0b19 	vmov	r0, r1, d9
 8006002:	f7fa f8eb 	bl	80001dc <__adddf3>
 8006006:	a37a      	add	r3, pc, #488	; (adr r3, 80061f0 <__ieee754_pow+0x9f8>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	2000      	movs	r0, #0
 800600e:	4604      	mov	r4, r0
 8006010:	460d      	mov	r5, r1
 8006012:	f7fa fa99 	bl	8000548 <__aeabi_dmul>
 8006016:	ec53 2b19 	vmov	r2, r3, d9
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	4620      	mov	r0, r4
 8006020:	4629      	mov	r1, r5
 8006022:	f7fa f8d9 	bl	80001d8 <__aeabi_dsub>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	f7fa f8d3 	bl	80001d8 <__aeabi_dsub>
 8006032:	a371      	add	r3, pc, #452	; (adr r3, 80061f8 <__ieee754_pow+0xa00>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa fa86 	bl	8000548 <__aeabi_dmul>
 800603c:	a370      	add	r3, pc, #448	; (adr r3, 8006200 <__ieee754_pow+0xa08>)
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	4680      	mov	r8, r0
 8006044:	4689      	mov	r9, r1
 8006046:	4620      	mov	r0, r4
 8006048:	4629      	mov	r1, r5
 800604a:	f7fa fa7d 	bl	8000548 <__aeabi_dmul>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	f7fa f8c1 	bl	80001dc <__adddf3>
 800605a:	4604      	mov	r4, r0
 800605c:	460d      	mov	r5, r1
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4630      	mov	r0, r6
 8006064:	4639      	mov	r1, r7
 8006066:	f7fa f8b9 	bl	80001dc <__adddf3>
 800606a:	4632      	mov	r2, r6
 800606c:	463b      	mov	r3, r7
 800606e:	4680      	mov	r8, r0
 8006070:	4689      	mov	r9, r1
 8006072:	f7fa f8b1 	bl	80001d8 <__aeabi_dsub>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4620      	mov	r0, r4
 800607c:	4629      	mov	r1, r5
 800607e:	f7fa f8ab 	bl	80001d8 <__aeabi_dsub>
 8006082:	4642      	mov	r2, r8
 8006084:	4606      	mov	r6, r0
 8006086:	460f      	mov	r7, r1
 8006088:	464b      	mov	r3, r9
 800608a:	4640      	mov	r0, r8
 800608c:	4649      	mov	r1, r9
 800608e:	f7fa fa5b 	bl	8000548 <__aeabi_dmul>
 8006092:	a35d      	add	r3, pc, #372	; (adr r3, 8006208 <__ieee754_pow+0xa10>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	4604      	mov	r4, r0
 800609a:	460d      	mov	r5, r1
 800609c:	f7fa fa54 	bl	8000548 <__aeabi_dmul>
 80060a0:	a35b      	add	r3, pc, #364	; (adr r3, 8006210 <__ieee754_pow+0xa18>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa f897 	bl	80001d8 <__aeabi_dsub>
 80060aa:	4622      	mov	r2, r4
 80060ac:	462b      	mov	r3, r5
 80060ae:	f7fa fa4b 	bl	8000548 <__aeabi_dmul>
 80060b2:	a359      	add	r3, pc, #356	; (adr r3, 8006218 <__ieee754_pow+0xa20>)
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	f7fa f890 	bl	80001dc <__adddf3>
 80060bc:	4622      	mov	r2, r4
 80060be:	462b      	mov	r3, r5
 80060c0:	f7fa fa42 	bl	8000548 <__aeabi_dmul>
 80060c4:	a356      	add	r3, pc, #344	; (adr r3, 8006220 <__ieee754_pow+0xa28>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa f885 	bl	80001d8 <__aeabi_dsub>
 80060ce:	4622      	mov	r2, r4
 80060d0:	462b      	mov	r3, r5
 80060d2:	f7fa fa39 	bl	8000548 <__aeabi_dmul>
 80060d6:	a354      	add	r3, pc, #336	; (adr r3, 8006228 <__ieee754_pow+0xa30>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f7fa f87e 	bl	80001dc <__adddf3>
 80060e0:	4622      	mov	r2, r4
 80060e2:	462b      	mov	r3, r5
 80060e4:	f7fa fa30 	bl	8000548 <__aeabi_dmul>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4640      	mov	r0, r8
 80060ee:	4649      	mov	r1, r9
 80060f0:	f7fa f872 	bl	80001d8 <__aeabi_dsub>
 80060f4:	4604      	mov	r4, r0
 80060f6:	460d      	mov	r5, r1
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4640      	mov	r0, r8
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa fa22 	bl	8000548 <__aeabi_dmul>
 8006104:	2200      	movs	r2, #0
 8006106:	ec41 0b19 	vmov	d9, r0, r1
 800610a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa f861 	bl	80001d8 <__aeabi_dsub>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	ec51 0b19 	vmov	r0, r1, d9
 800611e:	f7fa fb3d 	bl	800079c <__aeabi_ddiv>
 8006122:	4632      	mov	r2, r6
 8006124:	4604      	mov	r4, r0
 8006126:	460d      	mov	r5, r1
 8006128:	463b      	mov	r3, r7
 800612a:	4640      	mov	r0, r8
 800612c:	4649      	mov	r1, r9
 800612e:	f7fa fa0b 	bl	8000548 <__aeabi_dmul>
 8006132:	4632      	mov	r2, r6
 8006134:	463b      	mov	r3, r7
 8006136:	f7fa f851 	bl	80001dc <__adddf3>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4620      	mov	r0, r4
 8006140:	4629      	mov	r1, r5
 8006142:	f7fa f849 	bl	80001d8 <__aeabi_dsub>
 8006146:	4642      	mov	r2, r8
 8006148:	464b      	mov	r3, r9
 800614a:	f7fa f845 	bl	80001d8 <__aeabi_dsub>
 800614e:	460b      	mov	r3, r1
 8006150:	4602      	mov	r2, r0
 8006152:	4939      	ldr	r1, [pc, #228]	; (8006238 <__ieee754_pow+0xa40>)
 8006154:	2000      	movs	r0, #0
 8006156:	f7fa f83f 	bl	80001d8 <__aeabi_dsub>
 800615a:	ec41 0b10 	vmov	d0, r0, r1
 800615e:	ee10 3a90 	vmov	r3, s1
 8006162:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616a:	da2b      	bge.n	80061c4 <__ieee754_pow+0x9cc>
 800616c:	4650      	mov	r0, sl
 800616e:	f000 f877 	bl	8006260 <scalbn>
 8006172:	ec51 0b10 	vmov	r0, r1, d0
 8006176:	ec53 2b18 	vmov	r2, r3, d8
 800617a:	f7ff bbee 	b.w	800595a <__ieee754_pow+0x162>
 800617e:	4b2f      	ldr	r3, [pc, #188]	; (800623c <__ieee754_pow+0xa44>)
 8006180:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006184:	429e      	cmp	r6, r3
 8006186:	f77f af0d 	ble.w	8005fa4 <__ieee754_pow+0x7ac>
 800618a:	4b2d      	ldr	r3, [pc, #180]	; (8006240 <__ieee754_pow+0xa48>)
 800618c:	440b      	add	r3, r1
 800618e:	4303      	orrs	r3, r0
 8006190:	d009      	beq.n	80061a6 <__ieee754_pow+0x9ae>
 8006192:	ec51 0b18 	vmov	r0, r1, d8
 8006196:	2200      	movs	r2, #0
 8006198:	2300      	movs	r3, #0
 800619a:	f7fa fc47 	bl	8000a2c <__aeabi_dcmplt>
 800619e:	3800      	subs	r0, #0
 80061a0:	bf18      	it	ne
 80061a2:	2001      	movne	r0, #1
 80061a4:	e448      	b.n	8005a38 <__ieee754_pow+0x240>
 80061a6:	4622      	mov	r2, r4
 80061a8:	462b      	mov	r3, r5
 80061aa:	f7fa f815 	bl	80001d8 <__aeabi_dsub>
 80061ae:	4642      	mov	r2, r8
 80061b0:	464b      	mov	r3, r9
 80061b2:	f7fa fc4f 	bl	8000a54 <__aeabi_dcmpge>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f43f aef4 	beq.w	8005fa4 <__ieee754_pow+0x7ac>
 80061bc:	e7e9      	b.n	8006192 <__ieee754_pow+0x99a>
 80061be:	f04f 0a00 	mov.w	sl, #0
 80061c2:	e71a      	b.n	8005ffa <__ieee754_pow+0x802>
 80061c4:	ec51 0b10 	vmov	r0, r1, d0
 80061c8:	4619      	mov	r1, r3
 80061ca:	e7d4      	b.n	8006176 <__ieee754_pow+0x97e>
 80061cc:	491a      	ldr	r1, [pc, #104]	; (8006238 <__ieee754_pow+0xa40>)
 80061ce:	2000      	movs	r0, #0
 80061d0:	f7ff bb31 	b.w	8005836 <__ieee754_pow+0x3e>
 80061d4:	2000      	movs	r0, #0
 80061d6:	2100      	movs	r1, #0
 80061d8:	f7ff bb2d 	b.w	8005836 <__ieee754_pow+0x3e>
 80061dc:	4630      	mov	r0, r6
 80061de:	4639      	mov	r1, r7
 80061e0:	f7ff bb29 	b.w	8005836 <__ieee754_pow+0x3e>
 80061e4:	9204      	str	r2, [sp, #16]
 80061e6:	f7ff bb7b 	b.w	80058e0 <__ieee754_pow+0xe8>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f7ff bb65 	b.w	80058ba <__ieee754_pow+0xc2>
 80061f0:	00000000 	.word	0x00000000
 80061f4:	3fe62e43 	.word	0x3fe62e43
 80061f8:	fefa39ef 	.word	0xfefa39ef
 80061fc:	3fe62e42 	.word	0x3fe62e42
 8006200:	0ca86c39 	.word	0x0ca86c39
 8006204:	be205c61 	.word	0xbe205c61
 8006208:	72bea4d0 	.word	0x72bea4d0
 800620c:	3e663769 	.word	0x3e663769
 8006210:	c5d26bf1 	.word	0xc5d26bf1
 8006214:	3ebbbd41 	.word	0x3ebbbd41
 8006218:	af25de2c 	.word	0xaf25de2c
 800621c:	3f11566a 	.word	0x3f11566a
 8006220:	16bebd93 	.word	0x16bebd93
 8006224:	3f66c16c 	.word	0x3f66c16c
 8006228:	5555553e 	.word	0x5555553e
 800622c:	3fc55555 	.word	0x3fc55555
 8006230:	3fe00000 	.word	0x3fe00000
 8006234:	fff00000 	.word	0xfff00000
 8006238:	3ff00000 	.word	0x3ff00000
 800623c:	4090cbff 	.word	0x4090cbff
 8006240:	3f6f3400 	.word	0x3f6f3400
 8006244:	652b82fe 	.word	0x652b82fe
 8006248:	3c971547 	.word	0x3c971547

0800624c <fabs>:
 800624c:	ec51 0b10 	vmov	r0, r1, d0
 8006250:	ee10 2a10 	vmov	r2, s0
 8006254:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006258:	ec43 2b10 	vmov	d0, r2, r3
 800625c:	4770      	bx	lr
	...

08006260 <scalbn>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	ec55 4b10 	vmov	r4, r5, d0
 8006266:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800626a:	4606      	mov	r6, r0
 800626c:	462b      	mov	r3, r5
 800626e:	b999      	cbnz	r1, 8006298 <scalbn+0x38>
 8006270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006274:	4323      	orrs	r3, r4
 8006276:	d03f      	beq.n	80062f8 <scalbn+0x98>
 8006278:	4b35      	ldr	r3, [pc, #212]	; (8006350 <scalbn+0xf0>)
 800627a:	4629      	mov	r1, r5
 800627c:	ee10 0a10 	vmov	r0, s0
 8006280:	2200      	movs	r2, #0
 8006282:	f7fa f961 	bl	8000548 <__aeabi_dmul>
 8006286:	4b33      	ldr	r3, [pc, #204]	; (8006354 <scalbn+0xf4>)
 8006288:	429e      	cmp	r6, r3
 800628a:	4604      	mov	r4, r0
 800628c:	460d      	mov	r5, r1
 800628e:	da10      	bge.n	80062b2 <scalbn+0x52>
 8006290:	a327      	add	r3, pc, #156	; (adr r3, 8006330 <scalbn+0xd0>)
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	e01f      	b.n	80062d8 <scalbn+0x78>
 8006298:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800629c:	4291      	cmp	r1, r2
 800629e:	d10c      	bne.n	80062ba <scalbn+0x5a>
 80062a0:	ee10 2a10 	vmov	r2, s0
 80062a4:	4620      	mov	r0, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	f7f9 ff98 	bl	80001dc <__adddf3>
 80062ac:	4604      	mov	r4, r0
 80062ae:	460d      	mov	r5, r1
 80062b0:	e022      	b.n	80062f8 <scalbn+0x98>
 80062b2:	460b      	mov	r3, r1
 80062b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80062b8:	3936      	subs	r1, #54	; 0x36
 80062ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80062be:	4296      	cmp	r6, r2
 80062c0:	dd0d      	ble.n	80062de <scalbn+0x7e>
 80062c2:	2d00      	cmp	r5, #0
 80062c4:	a11c      	add	r1, pc, #112	; (adr r1, 8006338 <scalbn+0xd8>)
 80062c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ca:	da02      	bge.n	80062d2 <scalbn+0x72>
 80062cc:	a11c      	add	r1, pc, #112	; (adr r1, 8006340 <scalbn+0xe0>)
 80062ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062d2:	a319      	add	r3, pc, #100	; (adr r3, 8006338 <scalbn+0xd8>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7fa f936 	bl	8000548 <__aeabi_dmul>
 80062dc:	e7e6      	b.n	80062ac <scalbn+0x4c>
 80062de:	1872      	adds	r2, r6, r1
 80062e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80062e4:	428a      	cmp	r2, r1
 80062e6:	dcec      	bgt.n	80062c2 <scalbn+0x62>
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	dd08      	ble.n	80062fe <scalbn+0x9e>
 80062ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80062f8:	ec45 4b10 	vmov	d0, r4, r5
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006302:	da08      	bge.n	8006316 <scalbn+0xb6>
 8006304:	2d00      	cmp	r5, #0
 8006306:	a10a      	add	r1, pc, #40	; (adr r1, 8006330 <scalbn+0xd0>)
 8006308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800630c:	dac0      	bge.n	8006290 <scalbn+0x30>
 800630e:	a10e      	add	r1, pc, #56	; (adr r1, 8006348 <scalbn+0xe8>)
 8006310:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006314:	e7bc      	b.n	8006290 <scalbn+0x30>
 8006316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800631a:	3236      	adds	r2, #54	; 0x36
 800631c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006320:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006324:	4620      	mov	r0, r4
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <scalbn+0xf8>)
 8006328:	2200      	movs	r2, #0
 800632a:	e7d5      	b.n	80062d8 <scalbn+0x78>
 800632c:	f3af 8000 	nop.w
 8006330:	c2f8f359 	.word	0xc2f8f359
 8006334:	01a56e1f 	.word	0x01a56e1f
 8006338:	8800759c 	.word	0x8800759c
 800633c:	7e37e43c 	.word	0x7e37e43c
 8006340:	8800759c 	.word	0x8800759c
 8006344:	fe37e43c 	.word	0xfe37e43c
 8006348:	c2f8f359 	.word	0xc2f8f359
 800634c:	81a56e1f 	.word	0x81a56e1f
 8006350:	43500000 	.word	0x43500000
 8006354:	ffff3cb0 	.word	0xffff3cb0
 8006358:	3c900000 	.word	0x3c900000

0800635c <with_errno>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	4604      	mov	r4, r0
 8006360:	460d      	mov	r5, r1
 8006362:	4616      	mov	r6, r2
 8006364:	f7fe ffd6 	bl	8005314 <__errno>
 8006368:	4629      	mov	r1, r5
 800636a:	6006      	str	r6, [r0, #0]
 800636c:	4620      	mov	r0, r4
 800636e:	bd70      	pop	{r4, r5, r6, pc}

08006370 <xflow>:
 8006370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006372:	4614      	mov	r4, r2
 8006374:	461d      	mov	r5, r3
 8006376:	b108      	cbz	r0, 800637c <xflow+0xc>
 8006378:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800637c:	e9cd 2300 	strd	r2, r3, [sp]
 8006380:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	f7fa f8de 	bl	8000548 <__aeabi_dmul>
 800638c:	2222      	movs	r2, #34	; 0x22
 800638e:	b003      	add	sp, #12
 8006390:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006394:	f7ff bfe2 	b.w	800635c <with_errno>

08006398 <__math_uflow>:
 8006398:	b508      	push	{r3, lr}
 800639a:	2200      	movs	r2, #0
 800639c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063a0:	f7ff ffe6 	bl	8006370 <xflow>
 80063a4:	ec41 0b10 	vmov	d0, r0, r1
 80063a8:	bd08      	pop	{r3, pc}

080063aa <__math_oflow>:
 80063aa:	b508      	push	{r3, lr}
 80063ac:	2200      	movs	r2, #0
 80063ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80063b2:	f7ff ffdd 	bl	8006370 <xflow>
 80063b6:	ec41 0b10 	vmov	d0, r0, r1
 80063ba:	bd08      	pop	{r3, pc}

080063bc <__ieee754_sqrt>:
 80063bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	ec55 4b10 	vmov	r4, r5, d0
 80063c4:	4e67      	ldr	r6, [pc, #412]	; (8006564 <__ieee754_sqrt+0x1a8>)
 80063c6:	43ae      	bics	r6, r5
 80063c8:	ee10 0a10 	vmov	r0, s0
 80063cc:	ee10 2a10 	vmov	r2, s0
 80063d0:	4629      	mov	r1, r5
 80063d2:	462b      	mov	r3, r5
 80063d4:	d10d      	bne.n	80063f2 <__ieee754_sqrt+0x36>
 80063d6:	f7fa f8b7 	bl	8000548 <__aeabi_dmul>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7f9 fefb 	bl	80001dc <__adddf3>
 80063e6:	4604      	mov	r4, r0
 80063e8:	460d      	mov	r5, r1
 80063ea:	ec45 4b10 	vmov	d0, r4, r5
 80063ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f2:	2d00      	cmp	r5, #0
 80063f4:	dc0b      	bgt.n	800640e <__ieee754_sqrt+0x52>
 80063f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80063fa:	4326      	orrs	r6, r4
 80063fc:	d0f5      	beq.n	80063ea <__ieee754_sqrt+0x2e>
 80063fe:	b135      	cbz	r5, 800640e <__ieee754_sqrt+0x52>
 8006400:	f7f9 feea 	bl	80001d8 <__aeabi_dsub>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	f7fa f9c8 	bl	800079c <__aeabi_ddiv>
 800640c:	e7eb      	b.n	80063e6 <__ieee754_sqrt+0x2a>
 800640e:	1509      	asrs	r1, r1, #20
 8006410:	f000 808d 	beq.w	800652e <__ieee754_sqrt+0x172>
 8006414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006418:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800641c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006420:	07c9      	lsls	r1, r1, #31
 8006422:	bf5c      	itt	pl
 8006424:	005b      	lslpl	r3, r3, #1
 8006426:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800642a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800642e:	bf58      	it	pl
 8006430:	0052      	lslpl	r2, r2, #1
 8006432:	2500      	movs	r5, #0
 8006434:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006438:	1076      	asrs	r6, r6, #1
 800643a:	0052      	lsls	r2, r2, #1
 800643c:	f04f 0e16 	mov.w	lr, #22
 8006440:	46ac      	mov	ip, r5
 8006442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006446:	eb0c 0001 	add.w	r0, ip, r1
 800644a:	4298      	cmp	r0, r3
 800644c:	bfde      	ittt	le
 800644e:	1a1b      	suble	r3, r3, r0
 8006450:	eb00 0c01 	addle.w	ip, r0, r1
 8006454:	186d      	addle	r5, r5, r1
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	f1be 0e01 	subs.w	lr, lr, #1
 800645c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006460:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006464:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006468:	d1ed      	bne.n	8006446 <__ieee754_sqrt+0x8a>
 800646a:	4674      	mov	r4, lr
 800646c:	2720      	movs	r7, #32
 800646e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006472:	4563      	cmp	r3, ip
 8006474:	eb01 000e 	add.w	r0, r1, lr
 8006478:	dc02      	bgt.n	8006480 <__ieee754_sqrt+0xc4>
 800647a:	d113      	bne.n	80064a4 <__ieee754_sqrt+0xe8>
 800647c:	4290      	cmp	r0, r2
 800647e:	d811      	bhi.n	80064a4 <__ieee754_sqrt+0xe8>
 8006480:	2800      	cmp	r0, #0
 8006482:	eb00 0e01 	add.w	lr, r0, r1
 8006486:	da57      	bge.n	8006538 <__ieee754_sqrt+0x17c>
 8006488:	f1be 0f00 	cmp.w	lr, #0
 800648c:	db54      	blt.n	8006538 <__ieee754_sqrt+0x17c>
 800648e:	f10c 0801 	add.w	r8, ip, #1
 8006492:	eba3 030c 	sub.w	r3, r3, ip
 8006496:	4290      	cmp	r0, r2
 8006498:	bf88      	it	hi
 800649a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800649e:	1a12      	subs	r2, r2, r0
 80064a0:	440c      	add	r4, r1
 80064a2:	46c4      	mov	ip, r8
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	3f01      	subs	r7, #1
 80064a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80064ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80064b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80064b4:	d1dd      	bne.n	8006472 <__ieee754_sqrt+0xb6>
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d01b      	beq.n	80064f2 <__ieee754_sqrt+0x136>
 80064ba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006568 <__ieee754_sqrt+0x1ac>
 80064be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800656c <__ieee754_sqrt+0x1b0>
 80064c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80064c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80064ca:	f7f9 fe85 	bl	80001d8 <__aeabi_dsub>
 80064ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4640      	mov	r0, r8
 80064d8:	4649      	mov	r1, r9
 80064da:	f7fa fab1 	bl	8000a40 <__aeabi_dcmple>
 80064de:	b140      	cbz	r0, 80064f2 <__ieee754_sqrt+0x136>
 80064e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80064e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80064e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80064ec:	d126      	bne.n	800653c <__ieee754_sqrt+0x180>
 80064ee:	3501      	adds	r5, #1
 80064f0:	463c      	mov	r4, r7
 80064f2:	106a      	asrs	r2, r5, #1
 80064f4:	0863      	lsrs	r3, r4, #1
 80064f6:	07e9      	lsls	r1, r5, #31
 80064f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80064fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006500:	bf48      	it	mi
 8006502:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006506:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800650a:	461c      	mov	r4, r3
 800650c:	e76d      	b.n	80063ea <__ieee754_sqrt+0x2e>
 800650e:	0ad3      	lsrs	r3, r2, #11
 8006510:	3815      	subs	r0, #21
 8006512:	0552      	lsls	r2, r2, #21
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0fa      	beq.n	800650e <__ieee754_sqrt+0x152>
 8006518:	02dc      	lsls	r4, r3, #11
 800651a:	d50a      	bpl.n	8006532 <__ieee754_sqrt+0x176>
 800651c:	f1c1 0420 	rsb	r4, r1, #32
 8006520:	fa22 f404 	lsr.w	r4, r2, r4
 8006524:	1e4d      	subs	r5, r1, #1
 8006526:	408a      	lsls	r2, r1
 8006528:	4323      	orrs	r3, r4
 800652a:	1b41      	subs	r1, r0, r5
 800652c:	e772      	b.n	8006414 <__ieee754_sqrt+0x58>
 800652e:	4608      	mov	r0, r1
 8006530:	e7f0      	b.n	8006514 <__ieee754_sqrt+0x158>
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	3101      	adds	r1, #1
 8006536:	e7ef      	b.n	8006518 <__ieee754_sqrt+0x15c>
 8006538:	46e0      	mov	r8, ip
 800653a:	e7aa      	b.n	8006492 <__ieee754_sqrt+0xd6>
 800653c:	f7f9 fe4e 	bl	80001dc <__adddf3>
 8006540:	e9da 8900 	ldrd	r8, r9, [sl]
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4640      	mov	r0, r8
 800654a:	4649      	mov	r1, r9
 800654c:	f7fa fa6e 	bl	8000a2c <__aeabi_dcmplt>
 8006550:	b120      	cbz	r0, 800655c <__ieee754_sqrt+0x1a0>
 8006552:	1ca0      	adds	r0, r4, #2
 8006554:	bf08      	it	eq
 8006556:	3501      	addeq	r5, #1
 8006558:	3402      	adds	r4, #2
 800655a:	e7ca      	b.n	80064f2 <__ieee754_sqrt+0x136>
 800655c:	3401      	adds	r4, #1
 800655e:	f024 0401 	bic.w	r4, r4, #1
 8006562:	e7c6      	b.n	80064f2 <__ieee754_sqrt+0x136>
 8006564:	7ff00000 	.word	0x7ff00000
 8006568:	20000060 	.word	0x20000060
 800656c:	20000068 	.word	0x20000068

08006570 <_init>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr

0800657c <_fini>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr


Envolvente_Digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007520  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080076b0  080076b0  000176b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078f8  080078f8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080078f8  080078f8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078f8  080078f8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078fc  080078fc  000178fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000064  08007964  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08007964  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1ce  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225b  00000000  00000000  0002f2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00031500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c26  00000000  00000000  00032498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d5f  00000000  00000000  000330be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010dad  00000000  00000000  00054e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6994  00000000  00000000  00065bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004914  00000000  00000000  0013c560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00140e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007698 	.word	0x08007698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007698 	.word	0x08007698

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	0000      	movs	r0, r0
	...

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f001 fd38 	bl	800262a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 fc65 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f000 fe39 	bl	8001834 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc2:	f000 fe19 	bl	80017f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bc6:	f000 fcb1 	bl	800152c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000bca:	f000 fd43 	bl	8001654 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000bce:	f000 fd73 	bl	80016b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bd2:	f000 fdc5 	bl	8001760 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	48b5      	ldr	r0, [pc, #724]	; (8000eb0 <main+0x300>)
 8000bda:	f002 ff90 	bl	8003afe <HAL_DAC_Start>
  	//HAL_TIM_Base_Start_IT(&htim1);

  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f003 fc9d 	bl	8004524 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f003 fc96 	bl	8004524 <HAL_GPIO_WritePin>

  	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 8000bf8:	2140      	movs	r1, #64	; 0x40
 8000bfa:	48ae      	ldr	r0, [pc, #696]	; (8000eb4 <main+0x304>)
 8000bfc:	f003 fc7a 	bl	80044f4 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d106      	bne.n	8000c14 <main+0x64>
  	{
  		tipo = envolvente;
 8000c06:	4bac      	ldr	r3, [pc, #688]	; (8000eb8 <main+0x308>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
  		//HAL_TIM_Base_Stop_IT(&htim2);
  		HAL_TIM_Base_Start_IT(&htim1);
 8000c0c:	48ab      	ldr	r0, [pc, #684]	; (8000ebc <main+0x30c>)
 8000c0e:	f004 fe5d 	bl	80058cc <HAL_TIM_Base_Start_IT>
 8000c12:	e005      	b.n	8000c20 <main+0x70>
  	}
  	else
  	{
  		tipo = filtro;
 8000c14:	4ba8      	ldr	r3, [pc, #672]	; (8000eb8 <main+0x308>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
  		HAL_TIM_Base_Start_IT(&htim2);
 8000c1a:	48a9      	ldr	r0, [pc, #676]	; (8000ec0 <main+0x310>)
 8000c1c:	f004 fe56 	bl	80058cc <HAL_TIM_Base_Start_IT>
  		//HAL_TIM_Base_Stop_IT(&htim1);

  	}

  	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET)
 8000c20:	2102      	movs	r1, #2
 8000c22:	48a4      	ldr	r0, [pc, #656]	; (8000eb4 <main+0x304>)
 8000c24:	f003 fc66 	bl	80044f4 <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d103      	bne.n	8000c36 <main+0x86>
  	{
  		modo = lineal;
 8000c2e:	4ba5      	ldr	r3, [pc, #660]	; (8000ec4 <main+0x314>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e002      	b.n	8000c3c <main+0x8c>
  	}
  	else
  	{
  		modo = exponencial;
 8000c36:	4ba3      	ldr	r3, [pc, #652]	; (8000ec4 <main+0x314>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(tipo == envolvente)
 8000c3c:	4b9e      	ldr	r3, [pc, #632]	; (8000eb8 <main+0x308>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f040 83df 	bne.w	8001404 <main+0x854>
	  {

		  if(modo == lineal)
 8000c46:	4b9f      	ldr	r3, [pc, #636]	; (8000ec4 <main+0x314>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8202 	bne.w	8001054 <main+0x4a4>
		  {
			  switch(etapasL)
 8000c50:	4b9d      	ldr	r3, [pc, #628]	; (8000ec8 <main+0x318>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d8f1      	bhi.n	8000c3c <main+0x8c>
 8000c58:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <main+0xb0>)
 8000c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000d65 	.word	0x08000d65
 8000c68:	08000e81 	.word	0x08000e81
 8000c6c:	08000f47 	.word	0x08000f47
 8000c70:	08001017 	.word	0x08001017
			  {
			  case attack:

				  float pendiente_a = 3.3/t_a;
 8000c74:	4b95      	ldr	r3, [pc, #596]	; (8000ecc <main+0x31c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fc0d 	bl	8000498 <__aeabi_f2d>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	a189      	add	r1, pc, #548	; (adr r1, 8000ea8 <main+0x2f8>)
 8000c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c88:	f7ff fd88 	bl	800079c <__aeabi_ddiv>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff ff3a 	bl	8000b0c <__aeabi_d2f>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	603b      	str	r3, [r7, #0]
				  b_a = 0;
 8000c9c:	4b8c      	ldr	r3, [pc, #560]	; (8000ed0 <main+0x320>)
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]

				  if(flag == 1 && Gate == 1 )
 8000ca4:	4b8b      	ldr	r3, [pc, #556]	; (8000ed4 <main+0x324>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d145      	bne.n	8000d38 <main+0x188>
 8000cac:	4b8a      	ldr	r3, [pc, #552]	; (8000ed8 <main+0x328>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d141      	bne.n	8000d38 <main+0x188>
				  {
					  env = generador_rectas(pendiente_a, b_a);
 8000cb4:	4b86      	ldr	r3, [pc, #536]	; (8000ed0 <main+0x320>)
 8000cb6:	edd3 7a00 	vldr	s15, [r3]
 8000cba:	eef0 0a67 	vmov.f32	s1, s15
 8000cbe:	ed97 0a00 	vldr	s0, [r7]
 8000cc2:	f000 fe2d 	bl	8001920 <generador_rectas>
 8000cc6:	eef0 7a40 	vmov.f32	s15, s0
 8000cca:	4b84      	ldr	r3, [pc, #528]	; (8000edc <main+0x32c>)
 8000ccc:	edc3 7a00 	vstr	s15, [r3]

					  if(env >= 3.3)
 8000cd0:	4b82      	ldr	r3, [pc, #520]	; (8000edc <main+0x32c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fbdf 	bl	8000498 <__aeabi_f2d>
 8000cda:	a373      	add	r3, pc, #460	; (adr r3, 8000ea8 <main+0x2f8>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff feb8 	bl	8000a54 <__aeabi_dcmpge>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <main+0x14a>
					  {
						  x=0;
 8000cea:	4b7d      	ldr	r3, [pc, #500]	; (8000ee0 <main+0x330>)
 8000cec:	f04f 0200 	mov.w	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
						  etapasL = decay;
 8000cf2:	4b75      	ldr	r3, [pc, #468]	; (8000ec8 <main+0x318>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e01e      	b.n	8000d38 <main+0x188>
					  }
					  else
					  {
						  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000cfa:	4b78      	ldr	r3, [pc, #480]	; (8000edc <main+0x32c>)
 8000cfc:	edd3 7a00 	vldr	s15, [r3]
 8000d00:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8000ee4 <main+0x334>
 8000d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d08:	ee17 0a90 	vmov	r0, s15
 8000d0c:	f7ff fbc4 	bl	8000498 <__aeabi_f2d>
 8000d10:	a365      	add	r3, pc, #404	; (adr r3, 8000ea8 <main+0x2f8>)
 8000d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d16:	f7ff fd41 	bl	800079c <__aeabi_ddiv>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fed3 	bl	8000acc <__aeabi_d2uiz>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4860      	ldr	r0, [pc, #384]	; (8000eb0 <main+0x300>)
 8000d2e:	f002 ff33 	bl	8003b98 <HAL_DAC_SetValue>
						  flag = 0;
 8000d32:	4b68      	ldr	r3, [pc, #416]	; (8000ed4 <main+0x324>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
					  }
				  }
				  if(flag == 1 && Gate == 0)
 8000d38:	4b66      	ldr	r3, [pc, #408]	; (8000ed4 <main+0x324>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	f040 8365 	bne.w	800140c <main+0x85c>
 8000d42:	4b65      	ldr	r3, [pc, #404]	; (8000ed8 <main+0x328>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 8360 	bne.w	800140c <main+0x85c>
				  {
					  x=0;
 8000d4c:	4b64      	ldr	r3, [pc, #400]	; (8000ee0 <main+0x330>)
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
					  v_s = env;
 8000d54:	4b61      	ldr	r3, [pc, #388]	; (8000edc <main+0x32c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a63      	ldr	r2, [pc, #396]	; (8000ee8 <main+0x338>)
 8000d5a:	6013      	str	r3, [r2, #0]
					  etapasL = release;
 8000d5c:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <main+0x318>)
 8000d5e:	2203      	movs	r2, #3
 8000d60:	701a      	strb	r2, [r3, #0]
				  }

				  break;
 8000d62:	e353      	b.n	800140c <main+0x85c>
			  case decay:

				  float pendiente_d = (v_s - 3.3)/t_d;
 8000d64:	4b60      	ldr	r3, [pc, #384]	; (8000ee8 <main+0x338>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fb95 	bl	8000498 <__aeabi_f2d>
 8000d6e:	a34e      	add	r3, pc, #312	; (adr r3, 8000ea8 <main+0x2f8>)
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	f7ff fa30 	bl	80001d8 <__aeabi_dsub>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4614      	mov	r4, r2
 8000d7e:	461d      	mov	r5, r3
 8000d80:	4b5a      	ldr	r3, [pc, #360]	; (8000eec <main+0x33c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fb87 	bl	8000498 <__aeabi_f2d>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4620      	mov	r0, r4
 8000d90:	4629      	mov	r1, r5
 8000d92:	f7ff fd03 	bl	800079c <__aeabi_ddiv>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f7ff feb5 	bl	8000b0c <__aeabi_d2f>
 8000da2:	4603      	mov	r3, r0
 8000da4:	607b      	str	r3, [r7, #4]
				  b_d = v_s - pendiente_d * t_d;
 8000da6:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <main+0x338>)
 8000da8:	ed93 7a00 	vldr	s14, [r3]
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <main+0x33c>)
 8000dae:	edd3 6a00 	vldr	s13, [r3]
 8000db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dbe:	4b4c      	ldr	r3, [pc, #304]	; (8000ef0 <main+0x340>)
 8000dc0:	edc3 7a00 	vstr	s15, [r3]

				  if(flag == 1 && Gate == 1)
 8000dc4:	4b43      	ldr	r3, [pc, #268]	; (8000ed4 <main+0x324>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d143      	bne.n	8000e54 <main+0x2a4>
 8000dcc:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <main+0x328>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d13f      	bne.n	8000e54 <main+0x2a4>
				  {
					  env = generador_rectas(pendiente_d, b_d);
 8000dd4:	4b46      	ldr	r3, [pc, #280]	; (8000ef0 <main+0x340>)
 8000dd6:	edd3 7a00 	vldr	s15, [r3]
 8000dda:	eef0 0a67 	vmov.f32	s1, s15
 8000dde:	ed97 0a01 	vldr	s0, [r7, #4]
 8000de2:	f000 fd9d 	bl	8001920 <generador_rectas>
 8000de6:	eef0 7a40 	vmov.f32	s15, s0
 8000dea:	4b3c      	ldr	r3, [pc, #240]	; (8000edc <main+0x32c>)
 8000dec:	edc3 7a00 	vstr	s15, [r3]

					  if(env <= v_s)
 8000df0:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <main+0x32c>)
 8000df2:	ed93 7a00 	vldr	s14, [r3]
 8000df6:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <main+0x338>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e04:	d807      	bhi.n	8000e16 <main+0x266>
					  {
						  etapasL = sustain;
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <main+0x318>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	701a      	strb	r2, [r3, #0]
						  x = 0;
 8000e0c:	4b34      	ldr	r3, [pc, #208]	; (8000ee0 <main+0x330>)
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e01e      	b.n	8000e54 <main+0x2a4>
					  }
					  else
					  {
						  flag = 0;
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <main+0x324>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
						  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <main+0x32c>)
 8000e1e:	edd3 7a00 	vldr	s15, [r3]
 8000e22:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000ee4 <main+0x334>
 8000e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e2a:	ee17 0a90 	vmov	r0, s15
 8000e2e:	f7ff fb33 	bl	8000498 <__aeabi_f2d>
 8000e32:	a31d      	add	r3, pc, #116	; (adr r3, 8000ea8 <main+0x2f8>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fcb0 	bl	800079c <__aeabi_ddiv>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fe42 	bl	8000acc <__aeabi_d2uiz>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <main+0x300>)
 8000e50:	f002 fea2 	bl	8003b98 <HAL_DAC_SetValue>
					  }
				  }
				  if(flag == 1 && Gate == 0)
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <main+0x324>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	f040 82d9 	bne.w	8001410 <main+0x860>
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <main+0x328>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 82d4 	bne.w	8001410 <main+0x860>
				  {
					  x=0;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <main+0x330>)
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
					  v_s = env;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <main+0x32c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <main+0x338>)
 8000e76:	6013      	str	r3, [r2, #0]
					  etapasL = release;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <main+0x318>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	701a      	strb	r2, [r3, #0]
				  }

				  break;
 8000e7e:	e2c7      	b.n	8001410 <main+0x860>
			  case sustain:

				  if(flag == 1)
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <main+0x324>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	f040 82c5 	bne.w	8001414 <main+0x864>
				  {
					  if(Gate == 0)
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <main+0x328>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d130      	bne.n	8000ef4 <main+0x344>
					  {
						  etapasL = release;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <main+0x318>)
 8000e94:	2203      	movs	r2, #3
 8000e96:	701a      	strb	r2, [r3, #0]
						  x = 0;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <main+0x330>)
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
						  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
						  flag = 0;
					  }
				  }

				  break;
 8000ea0:	e2b8      	b.n	8001414 <main+0x864>
 8000ea2:	bf00      	nop
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	66666666 	.word	0x66666666
 8000eac:	400a6666 	.word	0x400a6666
 8000eb0:	2000012c 	.word	0x2000012c
 8000eb4:	48000400 	.word	0x48000400
 8000eb8:	20000205 	.word	0x20000205
 8000ebc:	20000140 	.word	0x20000140
 8000ec0:	2000018c 	.word	0x2000018c
 8000ec4:	20000204 	.word	0x20000204
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	200001d8 	.word	0x200001d8
 8000ed0:	20000208 	.word	0x20000208
 8000ed4:	20000224 	.word	0x20000224
 8000ed8:	20000214 	.word	0x20000214
 8000edc:	20000220 	.word	0x20000220
 8000ee0:	20000218 	.word	0x20000218
 8000ee4:	457ff000 	.word	0x457ff000
 8000ee8:	200001e0 	.word	0x200001e0
 8000eec:	200001dc 	.word	0x200001dc
 8000ef0:	2000020c 	.word	0x2000020c
						  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcValues, 4);  // 4 canales
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	49ba      	ldr	r1, [pc, #744]	; (80011e0 <main+0x630>)
 8000ef8:	48ba      	ldr	r0, [pc, #744]	; (80011e4 <main+0x634>)
 8000efa:	f001 ff39 	bl	8002d70 <HAL_ADC_Start_DMA>
						  env = v_s;
 8000efe:	4bba      	ldr	r3, [pc, #744]	; (80011e8 <main+0x638>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4aba      	ldr	r2, [pc, #744]	; (80011ec <main+0x63c>)
 8000f04:	6013      	str	r3, [r2, #0]
						  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000f06:	4bb9      	ldr	r3, [pc, #740]	; (80011ec <main+0x63c>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 80011f0 <main+0x640>
 8000f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f14:	ee17 0a90 	vmov	r0, s15
 8000f18:	f7ff fabe 	bl	8000498 <__aeabi_f2d>
 8000f1c:	a3ac      	add	r3, pc, #688	; (adr r3, 80011d0 <main+0x620>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fc3b 	bl	800079c <__aeabi_ddiv>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff fdcd 	bl	8000acc <__aeabi_d2uiz>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2200      	movs	r2, #0
 8000f36:	2110      	movs	r1, #16
 8000f38:	48ae      	ldr	r0, [pc, #696]	; (80011f4 <main+0x644>)
 8000f3a:	f002 fe2d 	bl	8003b98 <HAL_DAC_SetValue>
						  flag = 0;
 8000f3e:	4bae      	ldr	r3, [pc, #696]	; (80011f8 <main+0x648>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
				  break;
 8000f44:	e266      	b.n	8001414 <main+0x864>
			  case release:

				  float pendiente_r = (0 - v_s)/t_r;
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <main+0x638>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80011fc <main+0x64c>
 8000f50:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f54:	4baa      	ldr	r3, [pc, #680]	; (8001200 <main+0x650>)
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f5e:	edc7 7a02 	vstr	s15, [r7, #8]
				  b_r = - pendiente_r * t_r;
 8000f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f66:	eeb1 7a67 	vneg.f32	s14, s15
 8000f6a:	4ba5      	ldr	r3, [pc, #660]	; (8001200 <main+0x650>)
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f74:	4ba3      	ldr	r3, [pc, #652]	; (8001204 <main+0x654>)
 8000f76:	edc3 7a00 	vstr	s15, [r3]

				  if(flag == 1)
 8000f7a:	4b9f      	ldr	r3, [pc, #636]	; (80011f8 <main+0x648>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	f040 824a 	bne.w	8001418 <main+0x868>
				  {
					  env = generador_rectas(pendiente_r, b_r);
 8000f84:	4b9f      	ldr	r3, [pc, #636]	; (8001204 <main+0x654>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	eef0 0a67 	vmov.f32	s1, s15
 8000f8e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f92:	f000 fcc5 	bl	8001920 <generador_rectas>
 8000f96:	eef0 7a40 	vmov.f32	s15, s0
 8000f9a:	4b94      	ldr	r3, [pc, #592]	; (80011ec <main+0x63c>)
 8000f9c:	edc3 7a00 	vstr	s15, [r3]

					  if(env <=0)
 8000fa0:	4b92      	ldr	r3, [pc, #584]	; (80011ec <main+0x63c>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fae:	d812      	bhi.n	8000fd6 <main+0x426>
					  {
						  etapasL = off;
 8000fb0:	4b95      	ldr	r3, [pc, #596]	; (8001208 <main+0x658>)
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	701a      	strb	r2, [r3, #0]
						  x = 0;
 8000fb6:	4b95      	ldr	r3, [pc, #596]	; (800120c <main+0x65c>)
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
						  if (flag_exponencial == 1)
 8000fbe:	4b94      	ldr	r3, [pc, #592]	; (8001210 <main+0x660>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	f040 8228 	bne.w	8001418 <main+0x868>
						  {
							  flag_exponencial = 0;
 8000fc8:	4b91      	ldr	r3, [pc, #580]	; (8001210 <main+0x660>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
							  modo = exponencial;
 8000fce:	4b91      	ldr	r3, [pc, #580]	; (8001214 <main+0x664>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
					  {
						  flag = 0;
						  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
					  }
				  }
				  break;
 8000fd4:	e220      	b.n	8001418 <main+0x868>
						  flag = 0;
 8000fd6:	4b88      	ldr	r3, [pc, #544]	; (80011f8 <main+0x648>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
						  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000fdc:	4b83      	ldr	r3, [pc, #524]	; (80011ec <main+0x63c>)
 8000fde:	edd3 7a00 	vldr	s15, [r3]
 8000fe2:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80011f0 <main+0x640>
 8000fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fea:	ee17 0a90 	vmov	r0, s15
 8000fee:	f7ff fa53 	bl	8000498 <__aeabi_f2d>
 8000ff2:	a377      	add	r3, pc, #476	; (adr r3, 80011d0 <main+0x620>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fbd0 	bl	800079c <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff fd62 	bl	8000acc <__aeabi_d2uiz>
 8001008:	4603      	mov	r3, r0
 800100a:	2200      	movs	r2, #0
 800100c:	2110      	movs	r1, #16
 800100e:	4879      	ldr	r0, [pc, #484]	; (80011f4 <main+0x644>)
 8001010:	f002 fdc2 	bl	8003b98 <HAL_DAC_SetValue>
				  break;
 8001014:	e200      	b.n	8001418 <main+0x868>
			  case off:

				  if(Gate == 1)
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <main+0x668>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10b      	bne.n	8001036 <main+0x486>
				  {
					  etapasL = attack;
 800101e:	4b7a      	ldr	r3, [pc, #488]	; (8001208 <main+0x658>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
					  x = 0;
 8001024:	4b79      	ldr	r3, [pc, #484]	; (800120c <main+0x65c>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
					  env = 0;
 800102c:	4b6f      	ldr	r3, [pc, #444]	; (80011ec <main+0x63c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e002      	b.n	800103c <main+0x48c>
				  }
				  else
				  {
					  etapasL = off;
 8001036:	4b74      	ldr	r3, [pc, #464]	; (8001208 <main+0x658>)
 8001038:	2204      	movs	r2, #4
 800103a:	701a      	strb	r2, [r3, #0]
				  }

				  if (flag_exponencial == 1)
 800103c:	4b74      	ldr	r3, [pc, #464]	; (8001210 <main+0x660>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	f040 81eb 	bne.w	800141c <main+0x86c>
				  {
					  flag_exponencial = 0;
 8001046:	4b72      	ldr	r3, [pc, #456]	; (8001210 <main+0x660>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
					  modo = exponencial;
 800104c:	4b71      	ldr	r3, [pc, #452]	; (8001214 <main+0x664>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
				  }

				  break;
 8001052:	e1e3      	b.n	800141c <main+0x86c>
			  }
		  }
		  else if(modo == exponencial)
 8001054:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <main+0x664>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	f47f adef 	bne.w	8000c3c <main+0x8c>
		  {
			  switch(etapasE)
 800105e:	4b6f      	ldr	r3, [pc, #444]	; (800121c <main+0x66c>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b04      	cmp	r3, #4
 8001064:	f63f adea 	bhi.w	8000c3c <main+0x8c>
 8001068:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <main+0x4c0>)
 800106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	08001085 	.word	0x08001085
 8001074:	08001165 	.word	0x08001165
 8001078:	08001297 	.word	0x08001297
 800107c:	08001301 	.word	0x08001301
 8001080:	080013c9 	.word	0x080013c9
				  {
				  case attack:

					  float tau_a = (2.2e-6)*r_a;
 8001084:	4b66      	ldr	r3, [pc, #408]	; (8001220 <main+0x670>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa05 	bl	8000498 <__aeabi_f2d>
 800108e:	a352      	add	r3, pc, #328	; (adr r3, 80011d8 <main+0x628>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fa58 	bl	8000548 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fd34 	bl	8000b0c <__aeabi_d2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	60fb      	str	r3, [r7, #12]

					  if(flag == 1 && Gate == 1)
 80010a8:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <main+0x648>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d143      	bne.n	8001138 <main+0x588>
 80010b0:	4b59      	ldr	r3, [pc, #356]	; (8001218 <main+0x668>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d13f      	bne.n	8001138 <main+0x588>
					  {
						  env = generador_exp(tau_a, 0, 'a');
 80010b8:	2061      	movs	r0, #97	; 0x61
 80010ba:	eddf 0a50 	vldr	s1, [pc, #320]	; 80011fc <main+0x64c>
 80010be:	ed97 0a03 	vldr	s0, [r7, #12]
 80010c2:	f000 fc51 	bl	8001968 <generador_exp>
 80010c6:	eef0 7a40 	vmov.f32	s15, s0
 80010ca:	4b48      	ldr	r3, [pc, #288]	; (80011ec <main+0x63c>)
 80010cc:	edc3 7a00 	vstr	s15, [r3]

						  if(env >= 3.3)
 80010d0:	4b46      	ldr	r3, [pc, #280]	; (80011ec <main+0x63c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9df 	bl	8000498 <__aeabi_f2d>
 80010da:	a33d      	add	r3, pc, #244	; (adr r3, 80011d0 <main+0x620>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fcb8 	bl	8000a54 <__aeabi_dcmpge>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <main+0x54a>
						  {
							  etapasE = decay;
 80010ea:	4b4c      	ldr	r3, [pc, #304]	; (800121c <main+0x66c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
							  x = 0;
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <main+0x65c>)
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	e01e      	b.n	8001138 <main+0x588>
						  }
						  else
						  {
							  flag = 0;
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <main+0x648>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
							  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <main+0x63c>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80011f0 <main+0x640>
 800110a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110e:	ee17 0a90 	vmov	r0, s15
 8001112:	f7ff f9c1 	bl	8000498 <__aeabi_f2d>
 8001116:	a32e      	add	r3, pc, #184	; (adr r3, 80011d0 <main+0x620>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fb3e 	bl	800079c <__aeabi_ddiv>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fcd0 	bl	8000acc <__aeabi_d2uiz>
 800112c:	4603      	mov	r3, r0
 800112e:	2200      	movs	r2, #0
 8001130:	2110      	movs	r1, #16
 8001132:	4830      	ldr	r0, [pc, #192]	; (80011f4 <main+0x644>)
 8001134:	f002 fd30 	bl	8003b98 <HAL_DAC_SetValue>
						  }
					  }
					  if(flag == 1 && Gate == 0)
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <main+0x648>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	f040 816f 	bne.w	8001420 <main+0x870>
 8001142:	4b35      	ldr	r3, [pc, #212]	; (8001218 <main+0x668>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f040 816a 	bne.w	8001420 <main+0x870>
					  {
						  x = 0;
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <main+0x65c>)
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
						  v_s = env;
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <main+0x63c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <main+0x638>)
 800115a:	6013      	str	r3, [r2, #0]
						  etapasE = release;
 800115c:	4b2f      	ldr	r3, [pc, #188]	; (800121c <main+0x66c>)
 800115e:	2203      	movs	r2, #3
 8001160:	701a      	strb	r2, [r3, #0]
					  }

					  break;
 8001162:	e15d      	b.n	8001420 <main+0x870>
				  case decay:

					  float tau_d = (2.2e-6)*r_d;
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <main+0x674>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f995 	bl	8000498 <__aeabi_f2d>
 800116e:	a31a      	add	r3, pc, #104	; (adr r3, 80011d8 <main+0x628>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff f9e8 	bl	8000548 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fcc4 	bl	8000b0c <__aeabi_d2f>
 8001184:	4603      	mov	r3, r0
 8001186:	613b      	str	r3, [r7, #16]

					  if(flag == 1)
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <main+0x648>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d16c      	bne.n	800126a <main+0x6ba>
					  {
						  env = generador_exp(tau_d, 3.3 ,'d');
 8001190:	2064      	movs	r0, #100	; 0x64
 8001192:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001228 <main+0x678>
 8001196:	ed97 0a04 	vldr	s0, [r7, #16]
 800119a:	f000 fbe5 	bl	8001968 <generador_exp>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <main+0x63c>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]

						  if(env <= v_s)
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <main+0x63c>)
 80011aa:	ed93 7a00 	vldr	s14, [r3]
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <main+0x638>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d836      	bhi.n	800122c <main+0x67c>
						  {
							  etapasE = sustain;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <main+0x66c>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	701a      	strb	r2, [r3, #0]
							  x = 0;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <main+0x65c>)
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e04d      	b.n	800126a <main+0x6ba>
 80011ce:	bf00      	nop
 80011d0:	66666666 	.word	0x66666666
 80011d4:	400a6666 	.word	0x400a6666
 80011d8:	ca61b882 	.word	0xca61b882
 80011dc:	3ec27476 	.word	0x3ec27476
 80011e0:	200001fc 	.word	0x200001fc
 80011e4:	20000080 	.word	0x20000080
 80011e8:	200001e0 	.word	0x200001e0
 80011ec:	20000220 	.word	0x20000220
 80011f0:	457ff000 	.word	0x457ff000
 80011f4:	2000012c 	.word	0x2000012c
 80011f8:	20000224 	.word	0x20000224
 80011fc:	00000000 	.word	0x00000000
 8001200:	200001e4 	.word	0x200001e4
 8001204:	20000210 	.word	0x20000210
 8001208:	20000000 	.word	0x20000000
 800120c:	20000218 	.word	0x20000218
 8001210:	200001f8 	.word	0x200001f8
 8001214:	20000204 	.word	0x20000204
 8001218:	20000214 	.word	0x20000214
 800121c:	20000001 	.word	0x20000001
 8001220:	200001ec 	.word	0x200001ec
 8001224:	200001f0 	.word	0x200001f0
 8001228:	40533333 	.word	0x40533333
						  }
						  else
						  {
							  flag = 0;
 800122c:	4b88      	ldr	r3, [pc, #544]	; (8001450 <main+0x8a0>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
							  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8001232:	4b88      	ldr	r3, [pc, #544]	; (8001454 <main+0x8a4>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001458 <main+0x8a8>
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	ee17 0a90 	vmov	r0, s15
 8001244:	f7ff f928 	bl	8000498 <__aeabi_f2d>
 8001248:	a37b      	add	r3, pc, #492	; (adr r3, 8001438 <main+0x888>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff faa5 	bl	800079c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fc37 	bl	8000acc <__aeabi_d2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	2200      	movs	r2, #0
 8001262:	2110      	movs	r1, #16
 8001264:	487d      	ldr	r0, [pc, #500]	; (800145c <main+0x8ac>)
 8001266:	f002 fc97 	bl	8003b98 <HAL_DAC_SetValue>
						  }
					  }
					  if(flag == 1 && Gate == 0)
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <main+0x8a0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	f040 80d8 	bne.w	8001424 <main+0x874>
 8001274:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <main+0x8b0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	f040 80d3 	bne.w	8001424 <main+0x874>
					  {
						  x = 0;
 800127e:	4b79      	ldr	r3, [pc, #484]	; (8001464 <main+0x8b4>)
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
						  v_s = env;
 8001286:	4b73      	ldr	r3, [pc, #460]	; (8001454 <main+0x8a4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a77      	ldr	r2, [pc, #476]	; (8001468 <main+0x8b8>)
 800128c:	6013      	str	r3, [r2, #0]
						  etapasE = release;
 800128e:	4b77      	ldr	r3, [pc, #476]	; (800146c <main+0x8bc>)
 8001290:	2203      	movs	r2, #3
 8001292:	701a      	strb	r2, [r3, #0]
					  }

					  break;
 8001294:	e0c6      	b.n	8001424 <main+0x874>
				  case sustain:

					  if(Gate == 0)
 8001296:	4b72      	ldr	r3, [pc, #456]	; (8001460 <main+0x8b0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <main+0x6fe>
					  {
						  etapasE = release;
 800129e:	4b73      	ldr	r3, [pc, #460]	; (800146c <main+0x8bc>)
 80012a0:	2203      	movs	r2, #3
 80012a2:	701a      	strb	r2, [r3, #0]
						  x = 0;
 80012a4:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <main+0x8b4>)
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
						  env = v_s;
						  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
						  etapasE = sustain;
					  }

					  break;
 80012ac:	e0c0      	b.n	8001430 <main+0x880>
						  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcValues, 4);  // 4 canales
 80012ae:	2204      	movs	r2, #4
 80012b0:	496f      	ldr	r1, [pc, #444]	; (8001470 <main+0x8c0>)
 80012b2:	4870      	ldr	r0, [pc, #448]	; (8001474 <main+0x8c4>)
 80012b4:	f001 fd5c 	bl	8002d70 <HAL_ADC_Start_DMA>
						  env = v_s;
 80012b8:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <main+0x8b8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a65      	ldr	r2, [pc, #404]	; (8001454 <main+0x8a4>)
 80012be:	6013      	str	r3, [r2, #0]
						  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 80012c0:	4b64      	ldr	r3, [pc, #400]	; (8001454 <main+0x8a4>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001458 <main+0x8a8>
 80012ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ce:	ee17 0a90 	vmov	r0, s15
 80012d2:	f7ff f8e1 	bl	8000498 <__aeabi_f2d>
 80012d6:	a358      	add	r3, pc, #352	; (adr r3, 8001438 <main+0x888>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fa5e 	bl	800079c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fbf0 	bl	8000acc <__aeabi_d2uiz>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2200      	movs	r2, #0
 80012f0:	2110      	movs	r1, #16
 80012f2:	485a      	ldr	r0, [pc, #360]	; (800145c <main+0x8ac>)
 80012f4:	f002 fc50 	bl	8003b98 <HAL_DAC_SetValue>
						  etapasE = sustain;
 80012f8:	4b5c      	ldr	r3, [pc, #368]	; (800146c <main+0x8bc>)
 80012fa:	2202      	movs	r2, #2
 80012fc:	701a      	strb	r2, [r3, #0]
					  break;
 80012fe:	e097      	b.n	8001430 <main+0x880>
				  case release:

					  float tau_r = (2.2e-6)*r_r;
 8001300:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <main+0x8c8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f8c7 	bl	8000498 <__aeabi_f2d>
 800130a:	a34d      	add	r3, pc, #308	; (adr r3, 8001440 <main+0x890>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f91a 	bl	8000548 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fbf6 	bl	8000b0c <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	617b      	str	r3, [r7, #20]

					  if(flag == 1)
 8001324:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <main+0x8a0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d17d      	bne.n	8001428 <main+0x878>
					  {
						  env = generador_exp(tau_r, v_s, 'r');
 800132c:	4b4e      	ldr	r3, [pc, #312]	; (8001468 <main+0x8b8>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	2072      	movs	r0, #114	; 0x72
 8001334:	eef0 0a67 	vmov.f32	s1, s15
 8001338:	ed97 0a05 	vldr	s0, [r7, #20]
 800133c:	f000 fb14 	bl	8001968 <generador_exp>
 8001340:	eef0 7a40 	vmov.f32	s15, s0
 8001344:	4b43      	ldr	r3, [pc, #268]	; (8001454 <main+0x8a4>)
 8001346:	edc3 7a00 	vstr	s15, [r3]

						  if(env <= 0.005)
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <main+0x8a4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8a2 	bl	8000498 <__aeabi_f2d>
 8001354:	a33c      	add	r3, pc, #240	; (adr r3, 8001448 <main+0x898>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff fb71 	bl	8000a40 <__aeabi_dcmple>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d011      	beq.n	8001388 <main+0x7d8>
						  {
							  etapasE = off;
 8001364:	4b41      	ldr	r3, [pc, #260]	; (800146c <main+0x8bc>)
 8001366:	2204      	movs	r2, #4
 8001368:	701a      	strb	r2, [r3, #0]
							  x = 0;
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <main+0x8b4>)
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
							  if (flag_lineal == 1)
 8001372:	4b42      	ldr	r3, [pc, #264]	; (800147c <main+0x8cc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d156      	bne.n	8001428 <main+0x878>
							  {
								  flag_lineal = 0;
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <main+0x8cc>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
								  modo = lineal;
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <main+0x8d0>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
							  flag = 0;
							  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
						  }
					  }

					  break;
 8001386:	e04f      	b.n	8001428 <main+0x878>
							  flag = 0;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <main+0x8a0>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
							  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 800138e:	4b31      	ldr	r3, [pc, #196]	; (8001454 <main+0x8a4>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001458 <main+0x8a8>
 8001398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139c:	ee17 0a90 	vmov	r0, s15
 80013a0:	f7ff f87a 	bl	8000498 <__aeabi_f2d>
 80013a4:	a324      	add	r3, pc, #144	; (adr r3, 8001438 <main+0x888>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f9f7 	bl	800079c <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fb89 	bl	8000acc <__aeabi_d2uiz>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2200      	movs	r2, #0
 80013be:	2110      	movs	r1, #16
 80013c0:	4826      	ldr	r0, [pc, #152]	; (800145c <main+0x8ac>)
 80013c2:	f002 fbe9 	bl	8003b98 <HAL_DAC_SetValue>
					  break;
 80013c6:	e02f      	b.n	8001428 <main+0x878>
				  case off:

					  if(Gate == 1)
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <main+0x8b0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10b      	bne.n	80013e8 <main+0x838>
					  {
						  etapasE = attack;
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <main+0x8bc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
						  x = 0;
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <main+0x8b4>)
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
						  env = 0;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <main+0x8a4>)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e002      	b.n	80013ee <main+0x83e>
					  }
					  else
					  {
						  etapasE = off;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <main+0x8bc>)
 80013ea:	2204      	movs	r2, #4
 80013ec:	701a      	strb	r2, [r3, #0]
					  }

					  if (flag_lineal == 1)
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <main+0x8cc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d11a      	bne.n	800142c <main+0x87c>
					  {
						  flag_lineal = 0;
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <main+0x8cc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
						  modo = lineal;
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <main+0x8d0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
					  }

					  break;
 8001402:	e013      	b.n	800142c <main+0x87c>
				  }
		  }
	  }
	  else if(tipo == filtro)
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <main+0x8d4>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	e417      	b.n	8000c3c <main+0x8c>
				  break;
 800140c:	bf00      	nop
 800140e:	e415      	b.n	8000c3c <main+0x8c>
				  break;
 8001410:	bf00      	nop
 8001412:	e413      	b.n	8000c3c <main+0x8c>
				  break;
 8001414:	bf00      	nop
 8001416:	e411      	b.n	8000c3c <main+0x8c>
				  break;
 8001418:	bf00      	nop
 800141a:	e40f      	b.n	8000c3c <main+0x8c>
				  break;
 800141c:	bf00      	nop
 800141e:	e40d      	b.n	8000c3c <main+0x8c>
					  break;
 8001420:	bf00      	nop
 8001422:	e40b      	b.n	8000c3c <main+0x8c>
					  break;
 8001424:	bf00      	nop
 8001426:	e409      	b.n	8000c3c <main+0x8c>
					  break;
 8001428:	bf00      	nop
 800142a:	e407      	b.n	8000c3c <main+0x8c>
					  break;
 800142c:	bf00      	nop
 800142e:	e405      	b.n	8000c3c <main+0x8c>
	  if(tipo == envolvente)
 8001430:	e404      	b.n	8000c3c <main+0x8c>
 8001432:	bf00      	nop
 8001434:	f3af 8000 	nop.w
 8001438:	66666666 	.word	0x66666666
 800143c:	400a6666 	.word	0x400a6666
 8001440:	ca61b882 	.word	0xca61b882
 8001444:	3ec27476 	.word	0x3ec27476
 8001448:	47ae147b 	.word	0x47ae147b
 800144c:	3f747ae1 	.word	0x3f747ae1
 8001450:	20000224 	.word	0x20000224
 8001454:	20000220 	.word	0x20000220
 8001458:	457ff000 	.word	0x457ff000
 800145c:	2000012c 	.word	0x2000012c
 8001460:	20000214 	.word	0x20000214
 8001464:	20000218 	.word	0x20000218
 8001468:	200001e0 	.word	0x200001e0
 800146c:	20000001 	.word	0x20000001
 8001470:	200001fc 	.word	0x200001fc
 8001474:	20000080 	.word	0x20000080
 8001478:	200001f4 	.word	0x200001f4
 800147c:	200001e8 	.word	0x200001e8
 8001480:	20000204 	.word	0x20000204
 8001484:	20000205 	.word	0x20000205

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b096      	sub	sp, #88	; 0x58
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2244      	movs	r2, #68	; 0x44
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f004 fe22 	bl	80060e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ae:	f003 f877 	bl	80045a0 <HAL_PWREx_ControlVoltageScaling>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014b8:	f000 fee2 	bl	8002280 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014bc:	2310      	movs	r3, #16
 80014be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014d0:	2301      	movs	r3, #1
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014d8:	2328      	movs	r3, #40	; 0x28
 80014da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014dc:	2307      	movs	r3, #7
 80014de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 f8ad 	bl	800464c <HAL_RCC_OscConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014f8:	f000 fec2 	bl	8002280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fc:	230f      	movs	r3, #15
 80014fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001500:	2303      	movs	r3, #3
 8001502:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	2104      	movs	r1, #4
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fcad 	bl	8004e74 <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001520:	f000 feae 	bl	8002280 <Error_Handler>
  }
}
 8001524:	bf00      	nop
 8001526:	3758      	adds	r7, #88	; 0x58
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001532:	463b      	mov	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001542:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MX_ADC1_Init+0x110>)
 8001544:	4a3e      	ldr	r2, [pc, #248]	; (8001640 <MX_ADC1_Init+0x114>)
 8001546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <MX_ADC1_Init+0x110>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <MX_ADC1_Init+0x110>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_ADC1_Init+0x110>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800155a:	4b38      	ldr	r3, [pc, #224]	; (800163c <MX_ADC1_Init+0x110>)
 800155c:	2201      	movs	r2, #1
 800155e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <MX_ADC1_Init+0x110>)
 8001562:	2208      	movs	r2, #8
 8001564:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <MX_ADC1_Init+0x110>)
 8001568:	2200      	movs	r2, #0
 800156a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <MX_ADC1_Init+0x110>)
 800156e:	2200      	movs	r2, #0
 8001570:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <MX_ADC1_Init+0x110>)
 8001574:	2204      	movs	r2, #4
 8001576:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <MX_ADC1_Init+0x110>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	4b2e      	ldr	r3, [pc, #184]	; (800163c <MX_ADC1_Init+0x110>)
 8001582:	2200      	movs	r2, #0
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <MX_ADC1_Init+0x110>)
 8001588:	2200      	movs	r2, #0
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <MX_ADC1_Init+0x110>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001594:	4b29      	ldr	r3, [pc, #164]	; (800163c <MX_ADC1_Init+0x110>)
 8001596:	2200      	movs	r2, #0
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <MX_ADC1_Init+0x110>)
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a2:	4826      	ldr	r0, [pc, #152]	; (800163c <MX_ADC1_Init+0x110>)
 80015a4:	f001 faa2 	bl	8002aec <HAL_ADC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80015ae:	f000 fe67 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_ADC1_Init+0x118>)
 80015b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b6:	2306      	movs	r3, #6
 80015b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015be:	237f      	movs	r3, #127	; 0x7f
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015c2:	2304      	movs	r3, #4
 80015c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ca:	463b      	mov	r3, r7
 80015cc:	4619      	mov	r1, r3
 80015ce:	481b      	ldr	r0, [pc, #108]	; (800163c <MX_ADC1_Init+0x110>)
 80015d0:	f001 fc66 	bl	8002ea0 <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015da:	f000 fe51 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_ADC1_Init+0x11c>)
 80015e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015e2:	230c      	movs	r3, #12
 80015e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	4814      	ldr	r0, [pc, #80]	; (800163c <MX_ADC1_Init+0x110>)
 80015ec:	f001 fc58 	bl	8002ea0 <HAL_ADC_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80015f6:	f000 fe43 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_ADC1_Init+0x120>)
 80015fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015fe:	2312      	movs	r3, #18
 8001600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001602:	463b      	mov	r3, r7
 8001604:	4619      	mov	r1, r3
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_ADC1_Init+0x110>)
 8001608:	f001 fc4a 	bl	8002ea0 <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001612:	f000 fe35 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_ADC1_Init+0x124>)
 8001618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800161a:	2318      	movs	r3, #24
 800161c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_ADC1_Init+0x110>)
 8001624:	f001 fc3c 	bl	8002ea0 <HAL_ADC_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800162e:	f000 fe27 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000080 	.word	0x20000080
 8001640:	50040000 	.word	0x50040000
 8001644:	14f00020 	.word	0x14f00020
 8001648:	19200040 	.word	0x19200040
 800164c:	1d500080 	.word	0x1d500080
 8001650:	21800100 	.word	0x21800100

08001654 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2224      	movs	r2, #36	; 0x24
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f004 fd3d 	bl	80060e0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_DAC1_Init+0x5c>)
 8001668:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_DAC1_Init+0x60>)
 800166a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <MX_DAC1_Init+0x5c>)
 800166e:	f002 fa24 	bl	8003aba <HAL_DAC_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001678:	f000 fe02 	bl	8002280 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2210      	movs	r2, #16
 8001694:	4619      	mov	r1, r3
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_DAC1_Init+0x5c>)
 8001698:	f002 faa3 	bl	8003be2 <HAL_DAC_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80016a2:	f000 fded 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000012c 	.word	0x2000012c
 80016b4:	40007400 	.word	0x40007400

080016b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_TIM1_Init+0xa0>)
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <MX_TIM1_Init+0xa4>)
 80016da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_TIM1_Init+0xa0>)
 80016de:	224f      	movs	r2, #79	; 0x4f
 80016e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM1_Init+0xa0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_TIM1_Init+0xa0>)
 80016ea:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80016ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_TIM1_Init+0xa0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_TIM1_Init+0xa0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_TIM1_Init+0xa0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001702:	4815      	ldr	r0, [pc, #84]	; (8001758 <MX_TIM1_Init+0xa0>)
 8001704:	f004 f88a 	bl	800581c <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800170e:	f000 fdb7 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	480e      	ldr	r0, [pc, #56]	; (8001758 <MX_TIM1_Init+0xa0>)
 8001720:	f004 fa5e 	bl	8005be0 <HAL_TIM_ConfigClockSource>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800172a:	f000 fda9 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_TIM1_Init+0xa0>)
 8001740:	f004 fc4a 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800174a:	f000 fd99 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000140 	.word	0x20000140
 800175c:	40012c00 	.word	0x40012c00

08001760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_TIM2_Init+0x94>)
 8001780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001784:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <MX_TIM2_Init+0x94>)
 8001788:	224f      	movs	r2, #79	; 0x4f
 800178a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_TIM2_Init+0x94>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2-1;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_TIM2_Init+0x94>)
 8001794:	2201      	movs	r2, #1
 8001796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_TIM2_Init+0x94>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_TIM2_Init+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a4:	4813      	ldr	r0, [pc, #76]	; (80017f4 <MX_TIM2_Init+0x94>)
 80017a6:	f004 f839 	bl	800581c <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017b0:	f000 fd66 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4619      	mov	r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <MX_TIM2_Init+0x94>)
 80017c2:	f004 fa0d 	bl	8005be0 <HAL_TIM_ConfigClockSource>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017cc:	f000 fd58 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_TIM2_Init+0x94>)
 80017de:	f004 fbfb 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017e8:	f000 fd4a 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000018c 	.word	0x2000018c

080017f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_DMA_Init+0x38>)
 8001800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <MX_DMA_Init+0x38>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6493      	str	r3, [r2, #72]	; 0x48
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_DMA_Init+0x38>)
 800180c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	200b      	movs	r0, #11
 800181c:	f002 f917 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001820:	200b      	movs	r0, #11
 8001822:	f002 f930 	bl	8003a86 <HAL_NVIC_EnableIRQ>

}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b33      	ldr	r3, [pc, #204]	; (8001918 <MX_GPIO_Init+0xe4>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a32      	ldr	r2, [pc, #200]	; (8001918 <MX_GPIO_Init+0xe4>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <MX_GPIO_Init+0xe4>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <MX_GPIO_Init+0xe4>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <MX_GPIO_Init+0xe4>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_GPIO_Init+0xe4>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8001880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001884:	f002 fe4e 	bl	8004524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001888:	2310      	movs	r3, #16
 800188a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800188c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001892:	2302      	movs	r3, #2
 8001894:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f002 fcbe 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12;
 80018a4:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 80018a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f002 fcae 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80018c4:	2342      	movs	r3, #66	; 0x42
 80018c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018c8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80018cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ce:	2302      	movs	r3, #2
 80018d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	4810      	ldr	r0, [pc, #64]	; (800191c <MX_GPIO_Init+0xe8>)
 80018da:	f002 fca1 	bl	8004220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2101      	movs	r1, #1
 80018e2:	2007      	movs	r0, #7
 80018e4:	f002 f8b3 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018e8:	2007      	movs	r0, #7
 80018ea:	f002 f8cc 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2101      	movs	r1, #1
 80018f2:	200a      	movs	r0, #10
 80018f4:	f002 f8ab 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018f8:	200a      	movs	r0, #10
 80018fa:	f002 f8c4 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2101      	movs	r1, #1
 8001902:	2017      	movs	r0, #23
 8001904:	f002 f8a3 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001908:	2017      	movs	r0, #23
 800190a:	f002 f8bc 	bl	8003a86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	48000400 	.word	0x48000400

08001920 <generador_rectas>:

/* USER CODE BEGIN 4 */

float generador_rectas(float m, float b)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	ed87 0a01 	vstr	s0, [r7, #4]
 800192a:	edc7 0a00 	vstr	s1, [r7]

	y = m*x+b;
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <generador_rectas+0x40>)
 8001930:	ed93 7a00 	vldr	s14, [r3]
 8001934:	edd7 7a01 	vldr	s15, [r7, #4]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	edd7 7a00 	vldr	s15, [r7]
 8001940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <generador_rectas+0x44>)
 8001946:	edc3 7a00 	vstr	s15, [r3]

	return y;
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <generador_rectas+0x44>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	ee07 3a90 	vmov	s15, r3
}
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	20000218 	.word	0x20000218
 8001964:	2000021c 	.word	0x2000021c

08001968 <generador_exp>:

float generador_exp(float tau, float ini, char c)
{
 8001968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	ed87 0a03 	vstr	s0, [r7, #12]
 8001974:	edc7 0a02 	vstr	s1, [r7, #8]
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]

	if(c == 'a')
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b61      	cmp	r3, #97	; 0x61
 8001980:	d130      	bne.n	80019e4 <generador_exp+0x7c>
	{
		y = 4.95*(1-exp(-(1/tau)*x));
 8001982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001986:	ed97 7a03 	vldr	s14, [r7, #12]
 800198a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198e:	eeb1 7a67 	vneg.f32	s14, s15
 8001992:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <generador_exp+0x178>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	ee17 0a90 	vmov	r0, s15
 80019a0:	f7fe fd7a 	bl	8000498 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	ec43 2b10 	vmov	d0, r2, r3
 80019ac:	f004 fbcc 	bl	8006148 <exp>
 80019b0:	ec53 2b10 	vmov	r2, r3, d0
 80019b4:	f04f 0000 	mov.w	r0, #0
 80019b8:	494a      	ldr	r1, [pc, #296]	; (8001ae4 <generador_exp+0x17c>)
 80019ba:	f7fe fc0d 	bl	80001d8 <__aeabi_dsub>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	a344      	add	r3, pc, #272	; (adr r3, 8001ad8 <generador_exp+0x170>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fdbc 	bl	8000548 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff f898 	bl	8000b0c <__aeabi_d2f>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a42      	ldr	r2, [pc, #264]	; (8001ae8 <generador_exp+0x180>)
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e06e      	b.n	8001ac2 <generador_exp+0x15a>
	}
	else if(c == 'd')
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d140      	bne.n	8001a6c <generador_exp+0x104>
	{
		y = v_s - (v_s - ini)*exp(-(1/tau)*x);
 80019ea:	4b40      	ldr	r3, [pc, #256]	; (8001aec <generador_exp+0x184>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd52 	bl	8000498 <__aeabi_f2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <generador_exp+0x184>)
 80019fa:	ed93 7a00 	vldr	s14, [r3]
 80019fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a06:	ee17 0a90 	vmov	r0, s15
 8001a0a:	f7fe fd45 	bl	8000498 <__aeabi_f2d>
 8001a0e:	4680      	mov	r8, r0
 8001a10:	4689      	mov	r9, r1
 8001a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a16:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1e:	eeb1 7a67 	vneg.f32	s14, s15
 8001a22:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <generador_exp+0x178>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	ee17 0a90 	vmov	r0, s15
 8001a30:	f7fe fd32 	bl	8000498 <__aeabi_f2d>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	ec43 2b10 	vmov	d0, r2, r3
 8001a3c:	f004 fb84 	bl	8006148 <exp>
 8001a40:	ec53 2b10 	vmov	r2, r3, d0
 8001a44:	4640      	mov	r0, r8
 8001a46:	4649      	mov	r1, r9
 8001a48:	f7fe fd7e 	bl	8000548 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe fbc0 	bl	80001d8 <__aeabi_dsub>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f854 	bl	8000b0c <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <generador_exp+0x180>)
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e02a      	b.n	8001ac2 <generador_exp+0x15a>
	}
	else
	{
		y = ini*exp(-(1/tau)*x);
 8001a6c:	68b8      	ldr	r0, [r7, #8]
 8001a6e:	f7fe fd13 	bl	8000498 <__aeabi_f2d>
 8001a72:	4604      	mov	r4, r0
 8001a74:	460d      	mov	r5, r1
 8001a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a82:	eeb1 7a67 	vneg.f32	s14, s15
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <generador_exp+0x178>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd00 	bl	8000498 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	ec43 2b10 	vmov	d0, r2, r3
 8001aa0:	f004 fb52 	bl	8006148 <exp>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fd4c 	bl	8000548 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f828 	bl	8000b0c <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <generador_exp+0x180>)
 8001ac0:	6013      	str	r3, [r2, #0]
	}

	return y;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <generador_exp+0x180>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	ee07 3a90 	vmov	s15, r3
}
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad6:	bf00      	nop
 8001ad8:	cccccccd 	.word	0xcccccccd
 8001adc:	4013cccc 	.word	0x4013cccc
 8001ae0:	20000218 	.word	0x20000218
 8001ae4:	3ff00000 	.word	0x3ff00000
 8001ae8:	2000021c 	.word	0x2000021c
 8001aec:	200001e0 	.word	0x200001e0

08001af0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4)
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d130      	bne.n	8001b62 <HAL_GPIO_EXTI_Callback+0x72>
	{
		//HAL_Delay(10);

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 8001b00:	2110      	movs	r1, #16
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f002 fcf5 	bl	80044f4 <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d119      	bne.n	8001b44 <HAL_GPIO_EXTI_Callback+0x54>
		{
			Gate = 1;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);    //GATE (A5)
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b20:	f002 fd00 	bl	8004524 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);  //TRIG (A6)
 8001b24:	2200      	movs	r2, #0
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f002 fcfa 	bl	8004524 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001b30:	200a      	movs	r0, #10
 8001b32:	f000 fdef 	bl	8002714 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3e:	f002 fcf1 	bl	8004524 <HAL_GPIO_WritePin>
 8001b42:	e009      	b.n	8001b58 <HAL_GPIO_EXTI_Callback+0x68>
		}
		else
		{
			Gate = 0;
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f002 fce6 	bl	8004524 <HAL_GPIO_WritePin>
		}

		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcValues, 4);  // 4 canales
 8001b58:	2204      	movs	r2, #4
 8001b5a:	491f      	ldr	r1, [pc, #124]	; (8001bd8 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001b5c:	481f      	ldr	r0, [pc, #124]	; (8001bdc <HAL_GPIO_EXTI_Callback+0xec>)
 8001b5e:	f001 f907 	bl	8002d70 <HAL_ADC_Start_DMA>

	}

	if(GPIO_Pin == GPIO_PIN_1)
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d113      	bne.n	8001b90 <HAL_GPIO_EXTI_Callback+0xa0>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET)
 8001b68:	2102      	movs	r1, #2
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b6c:	f002 fcc2 	bl	80044f4 <HAL_GPIO_ReadPin>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d106      	bne.n	8001b84 <HAL_GPIO_EXTI_Callback+0x94>
		{
			flag_lineal = 1;
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
			flag_exponencial = 0;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e005      	b.n	8001b90 <HAL_GPIO_EXTI_Callback+0xa0>
		}
		else
		{
			flag_exponencial = 1;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
			flag_lineal = 0;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == GPIO_PIN_6)
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	2b40      	cmp	r3, #64	; 0x40
 8001b94:	d119      	bne.n	8001bca <HAL_GPIO_EXTI_Callback+0xda>
		{
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 8001b96:	2140      	movs	r1, #64	; 0x40
 8001b98:	4811      	ldr	r0, [pc, #68]	; (8001be0 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001b9a:	f002 fcab 	bl	80044f4 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d109      	bne.n	8001bb8 <HAL_GPIO_EXTI_Callback+0xc8>
			{
				tipo = envolvente;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_GPIO_EXTI_Callback+0xfc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8001baa:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x100>)
 8001bac:	f003 fee2 	bl	8005974 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Start_IT(&htim1);
 8001bb0:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001bb2:	f003 fe8b 	bl	80058cc <HAL_TIM_Base_Start_IT>
				tipo = filtro;
				HAL_TIM_Base_Start_IT(&htim2);
				HAL_TIM_Base_Stop_IT(&htim1);
			}
		}
}
 8001bb6:	e008      	b.n	8001bca <HAL_GPIO_EXTI_Callback+0xda>
				tipo = filtro;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_GPIO_EXTI_Callback+0xfc>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8001bbe:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <HAL_GPIO_EXTI_Callback+0x100>)
 8001bc0:	f003 fe84 	bl	80058cc <HAL_TIM_Base_Start_IT>
				HAL_TIM_Base_Stop_IT(&htim1);
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <HAL_GPIO_EXTI_Callback+0x104>)
 8001bc6:	f003 fed5 	bl	8005974 <HAL_TIM_Base_Stop_IT>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000214 	.word	0x20000214
 8001bd8:	200001fc 	.word	0x200001fc
 8001bdc:	20000080 	.word	0x20000080
 8001be0:	48000400 	.word	0x48000400
 8001be4:	200001e8 	.word	0x200001e8
 8001be8:	200001f8 	.word	0x200001f8
 8001bec:	20000205 	.word	0x20000205
 8001bf0:	2000018c 	.word	0x2000018c
 8001bf4:	20000140 	.word	0x20000140

08001bf8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d115      	bne.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
    	flag = 1;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
        x += 0.002;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc3f 	bl	8000498 <__aeabi_f2d>
 8001c1a:	a30f      	add	r3, pc, #60	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fadc 	bl	80001dc <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe ff6e 	bl	8000b0c <__aeabi_d2f>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c34:	6013      	str	r3, [r2, #0]
    }
    if (htim->Instance == TIM2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d104      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x52>
    {
    	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcValues, 3);  // 2 canales
 8001c40:	2203      	movs	r2, #3
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c46:	f001 f893 	bl	8002d70 <HAL_ADC_Start_DMA>
    }
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	f3af 8000 	nop.w
 8001c58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c5c:	3f60624d 	.word	0x3f60624d
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	20000224 	.word	0x20000224
 8001c68:	20000218 	.word	0x20000218
 8001c6c:	200001fc 	.word	0x200001fc
 8001c70:	20000080 	.word	0x20000080
 8001c74:	00000000 	.word	0x00000000

08001c78 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4abc      	ldr	r2, [pc, #752]	; (8001f78 <HAL_ADC_ConvCpltCallback+0x300>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	f040 82c7 	bne.w	800221a <HAL_ADC_ConvCpltCallback+0x5a2>
    {
    	if(tipo == envolvente)
 8001c8c:	4bbb      	ldr	r3, [pc, #748]	; (8001f7c <HAL_ADC_ConvCpltCallback+0x304>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 80f7 	bne.w	8001e84 <HAL_ADC_ConvCpltCallback+0x20c>
    	{
    		if (modo == lineal)
 8001c96:	4bba      	ldr	r3, [pc, #744]	; (8001f80 <HAL_ADC_ConvCpltCallback+0x308>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d17b      	bne.n	8001d96 <HAL_ADC_ConvCpltCallback+0x11e>
    		{
    			t_a = adcValues[0]*(3.02/4095);  // attack
 8001c9e:	4bb9      	ldr	r3, [pc, #740]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fbe6 	bl	8000474 <__aeabi_i2d>
 8001ca8:	a39b      	add	r3, pc, #620	; (adr r3, 8001f18 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fc4b 	bl	8000548 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff27 	bl	8000b0c <__aeabi_d2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4ab1      	ldr	r2, [pc, #708]	; (8001f88 <HAL_ADC_ConvCpltCallback+0x310>)
 8001cc2:	6013      	str	r3, [r2, #0]
    			if(t_a <= 0.4)
 8001cc4:	4bb0      	ldr	r3, [pc, #704]	; (8001f88 <HAL_ADC_ConvCpltCallback+0x310>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fbe5 	bl	8000498 <__aeabi_f2d>
 8001cce:	a394      	add	r3, pc, #592	; (adr r3, 8001f20 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe feb4 	bl	8000a40 <__aeabi_dcmple>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_ADC_ConvCpltCallback+0x6c>
    			{
    				t_a = 0.4;
 8001cde:	4baa      	ldr	r3, [pc, #680]	; (8001f88 <HAL_ADC_ConvCpltCallback+0x310>)
 8001ce0:	4aaa      	ldr	r2, [pc, #680]	; (8001f8c <HAL_ADC_ConvCpltCallback+0x314>)
 8001ce2:	601a      	str	r2, [r3, #0]
    			}
    			t_d = adcValues[1]*(9.5/4095);  // decay
 8001ce4:	4ba7      	ldr	r3, [pc, #668]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001ce6:	885b      	ldrh	r3, [r3, #2]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fbc3 	bl	8000474 <__aeabi_i2d>
 8001cee:	a38e      	add	r3, pc, #568	; (adr r3, 8001f28 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fc28 	bl	8000548 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7fe ff04 	bl	8000b0c <__aeabi_d2f>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4aa2      	ldr	r2, [pc, #648]	; (8001f90 <HAL_ADC_ConvCpltCallback+0x318>)
 8001d08:	6013      	str	r3, [r2, #0]
    			if(t_d <= 0.4)
 8001d0a:	4ba1      	ldr	r3, [pc, #644]	; (8001f90 <HAL_ADC_ConvCpltCallback+0x318>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fbc2 	bl	8000498 <__aeabi_f2d>
 8001d14:	a382      	add	r3, pc, #520	; (adr r3, 8001f20 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fe91 	bl	8000a40 <__aeabi_dcmple>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_ADC_ConvCpltCallback+0xb2>
    			{
    				t_d = 0.4;
 8001d24:	4b9a      	ldr	r3, [pc, #616]	; (8001f90 <HAL_ADC_ConvCpltCallback+0x318>)
 8001d26:	4a99      	ldr	r2, [pc, #612]	; (8001f8c <HAL_ADC_ConvCpltCallback+0x314>)
 8001d28:	601a      	str	r2, [r3, #0]
    			}
    			v_s = adcValues[2]*(3.3/4095);  // sustain
 8001d2a:	4b96      	ldr	r3, [pc, #600]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001d2c:	889b      	ldrh	r3, [r3, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fba0 	bl	8000474 <__aeabi_i2d>
 8001d34:	a37e      	add	r3, pc, #504	; (adr r3, 8001f30 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc05 	bl	8000548 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe fee1 	bl	8000b0c <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a91      	ldr	r2, [pc, #580]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x31c>)
 8001d4e:	6013      	str	r3, [r2, #0]
    			t_r = adcValues[3]*(11.0/4095);  // Release
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001d52:	88db      	ldrh	r3, [r3, #6]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fb8d 	bl	8000474 <__aeabi_i2d>
 8001d5a:	a377      	add	r3, pc, #476	; (adr r3, 8001f38 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fbf2 	bl	8000548 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe fece 	bl	8000b0c <__aeabi_d2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a89      	ldr	r2, [pc, #548]	; (8001f98 <HAL_ADC_ConvCpltCallback+0x320>)
 8001d74:	6013      	str	r3, [r2, #0]
    			if(t_r <= 0.7)
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_ADC_ConvCpltCallback+0x320>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fb8c 	bl	8000498 <__aeabi_f2d>
 8001d80:	a36f      	add	r3, pc, #444	; (adr r3, 8001f40 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fe5b 	bl	8000a40 <__aeabi_dcmple>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_ADC_ConvCpltCallback+0x11e>
    			{
    				t_r = 0.7;
 8001d90:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_ADC_ConvCpltCallback+0x320>)
 8001d92:	4a82      	ldr	r2, [pc, #520]	; (8001f9c <HAL_ADC_ConvCpltCallback+0x324>)
 8001d94:	601a      	str	r2, [r3, #0]
    			}
    		}
    		if (modo == exponencial)
 8001d96:	4b7a      	ldr	r3, [pc, #488]	; (8001f80 <HAL_ADC_ConvCpltCallback+0x308>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d172      	bne.n	8001e84 <HAL_ADC_ConvCpltCallback+0x20c>
    		{
    			r_a = adcValues[0]*(1400000.0/4095);  // attack
 8001d9e:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fb66 	bl	8000474 <__aeabi_i2d>
 8001da8:	a367      	add	r3, pc, #412	; (adr r3, 8001f48 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fbcb 	bl	8000548 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe fea7 	bl	8000b0c <__aeabi_d2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a77      	ldr	r2, [pc, #476]	; (8001fa0 <HAL_ADC_ConvCpltCallback+0x328>)
 8001dc2:	6013      	str	r3, [r2, #0]
    			if(r_a <= 33100.0)
 8001dc4:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_ADC_ConvCpltCallback+0x328>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001fa4 <HAL_ADC_ConvCpltCallback+0x32c>
 8001dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d802      	bhi.n	8001dde <HAL_ADC_ConvCpltCallback+0x166>
    			{
    				r_a = 33100.0;
 8001dd8:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_ADC_ConvCpltCallback+0x328>)
 8001dda:	4a73      	ldr	r2, [pc, #460]	; (8001fa8 <HAL_ADC_ConvCpltCallback+0x330>)
 8001ddc:	601a      	str	r2, [r3, #0]
    			}
    			r_d = adcValues[1]*(1000000.0/4095);  // decay
 8001dde:	4b69      	ldr	r3, [pc, #420]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001de0:	885b      	ldrh	r3, [r3, #2]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb46 	bl	8000474 <__aeabi_i2d>
 8001de8:	a359      	add	r3, pc, #356	; (adr r3, 8001f50 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fbab 	bl	8000548 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fe87 	bl	8000b0c <__aeabi_d2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <HAL_ADC_ConvCpltCallback+0x334>)
 8001e02:	6013      	str	r3, [r2, #0]
    			if(r_d <= 20000.0)
 8001e04:	4b69      	ldr	r3, [pc, #420]	; (8001fac <HAL_ADC_ConvCpltCallback+0x334>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001fb0 <HAL_ADC_ConvCpltCallback+0x338>
 8001e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d802      	bhi.n	8001e1e <HAL_ADC_ConvCpltCallback+0x1a6>
    			{
    				r_d = 20000.0;
 8001e18:	4b64      	ldr	r3, [pc, #400]	; (8001fac <HAL_ADC_ConvCpltCallback+0x334>)
 8001e1a:	4a66      	ldr	r2, [pc, #408]	; (8001fb4 <HAL_ADC_ConvCpltCallback+0x33c>)
 8001e1c:	601a      	str	r2, [r3, #0]

    			}
    			v_s = adcValues[2]*(3.3/4095);  // sustain
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb26 	bl	8000474 <__aeabi_i2d>
 8001e28:	a341      	add	r3, pc, #260	; (adr r3, 8001f30 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fb8b 	bl	8000548 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fe67 	bl	8000b0c <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a54      	ldr	r2, [pc, #336]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x31c>)
 8001e42:	6013      	str	r3, [r2, #0]
    			r_r = adcValues[3]*(1600000.0/4095);  // Release
 8001e44:	4b4f      	ldr	r3, [pc, #316]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001e46:	88db      	ldrh	r3, [r3, #6]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb13 	bl	8000474 <__aeabi_i2d>
 8001e4e:	a342      	add	r3, pc, #264	; (adr r3, 8001f58 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f7fe fb78 	bl	8000548 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fe54 	bl	8000b0c <__aeabi_d2f>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4a54      	ldr	r2, [pc, #336]	; (8001fb8 <HAL_ADC_ConvCpltCallback+0x340>)
 8001e68:	6013      	str	r3, [r2, #0]
    			if(r_r <= 1000.0)
 8001e6a:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_ADC_ConvCpltCallback+0x340>)
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001fbc <HAL_ADC_ConvCpltCallback+0x344>
 8001e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7c:	d802      	bhi.n	8001e84 <HAL_ADC_ConvCpltCallback+0x20c>
    			{
    				r_r = 1000.0;
 8001e7e:	4b4e      	ldr	r3, [pc, #312]	; (8001fb8 <HAL_ADC_ConvCpltCallback+0x340>)
 8001e80:	4a4f      	ldr	r2, [pc, #316]	; (8001fc0 <HAL_ADC_ConvCpltCallback+0x348>)
 8001e82:	601a      	str	r2, [r3, #0]
    			}
    		}
    	}
    	if (tipo == filtro)
 8001e84:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_ADC_ConvCpltCallback+0x304>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 81c6 	bne.w	800221a <HAL_ADC_ConvCpltCallback+0x5a2>
    	{

    		fc = adcValues[0]*(20000.0/4095);
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe faee 	bl	8000474 <__aeabi_i2d>
 8001e98:	a331      	add	r3, pc, #196	; (adr r3, 8001f60 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fb53 	bl	8000548 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fe2f 	bl	8000b0c <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a44      	ldr	r2, [pc, #272]	; (8001fc4 <HAL_ADC_ConvCpltCallback+0x34c>)
 8001eb2:	6013      	str	r3, [r2, #0]
    		k = adcValues[1]*(3.99/4095);
 8001eb4:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001eb6:	885b      	ldrh	r3, [r3, #2]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fadb 	bl	8000474 <__aeabi_i2d>
 8001ebe:	a32a      	add	r3, pc, #168	; (adr r3, 8001f68 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fb40 	bl	8000548 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f7fe fe1c 	bl	8000b0c <__aeabi_d2f>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a3c      	ldr	r2, [pc, #240]	; (8001fc8 <HAL_ADC_ConvCpltCallback+0x350>)
 8001ed8:	6013      	str	r3, [r2, #0]
    		in = adcValues[2]*(3.3/4095);
 8001eda:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x30c>)
 8001edc:	889b      	ldrh	r3, [r3, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fac8 	bl	8000474 <__aeabi_i2d>
 8001ee4:	a312      	add	r3, pc, #72	; (adr r3, 8001f30 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fb2d 	bl	8000548 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fe09 	bl	8000b0c <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <HAL_ADC_ConvCpltCallback+0x354>)
 8001efe:	6013      	str	r3, [r2, #0]
    		wcd = 2*M_PI*fc;
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_ADC_ConvCpltCallback+0x34c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fac7 	bl	8000498 <__aeabi_f2d>
 8001f0a:	a319      	add	r3, pc, #100	; (adr r3, 8001f70 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	e05e      	b.n	8001fd0 <HAL_ADC_ConvCpltCallback+0x358>
 8001f12:	bf00      	nop
 8001f14:	f3af 8000 	nop.w
 8001f18:	6a15fd89 	.word	0x6a15fd89
 8001f1c:	3f482a78 	.word	0x3f482a78
 8001f20:	9999999a 	.word	0x9999999a
 8001f24:	3fd99999 	.word	0x3fd99999
 8001f28:	13013013 	.word	0x13013013
 8001f2c:	3f630130 	.word	0x3f630130
 8001f30:	e734d9b4 	.word	0xe734d9b4
 8001f34:	3f4a680c 	.word	0x3f4a680c
 8001f38:	16016016 	.word	0x16016016
 8001f3c:	3f660160 	.word	0x3f660160
 8001f40:	66666666 	.word	0x66666666
 8001f44:	3fe66666 	.word	0x3fe66666
 8001f48:	e15e15e1 	.word	0xe15e15e1
 8001f4c:	40755e15 	.word	0x40755e15
 8001f50:	66866867 	.word	0x66866867
 8001f54:	406e8668 	.word	0x406e8668
 8001f58:	b86b86b8 	.word	0xb86b86b8
 8001f5c:	40786b86 	.word	0x40786b86
 8001f60:	93893894 	.word	0x93893894
 8001f64:	40138938 	.word	0x40138938
 8001f68:	f6f7c168 	.word	0xf6f7c168
 8001f6c:	3f4fed83 	.word	0x3f4fed83
 8001f70:	54442d18 	.word	0x54442d18
 8001f74:	401921fb 	.word	0x401921fb
 8001f78:	50040000 	.word	0x50040000
 8001f7c:	20000205 	.word	0x20000205
 8001f80:	20000204 	.word	0x20000204
 8001f84:	200001fc 	.word	0x200001fc
 8001f88:	200001d8 	.word	0x200001d8
 8001f8c:	3ecccccd 	.word	0x3ecccccd
 8001f90:	200001dc 	.word	0x200001dc
 8001f94:	200001e0 	.word	0x200001e0
 8001f98:	200001e4 	.word	0x200001e4
 8001f9c:	3f333333 	.word	0x3f333333
 8001fa0:	200001ec 	.word	0x200001ec
 8001fa4:	47014c00 	.word	0x47014c00
 8001fa8:	47014c00 	.word	0x47014c00
 8001fac:	200001f0 	.word	0x200001f0
 8001fb0:	469c4000 	.word	0x469c4000
 8001fb4:	469c4000 	.word	0x469c4000
 8001fb8:	200001f4 	.word	0x200001f4
 8001fbc:	447a0000 	.word	0x447a0000
 8001fc0:	447a0000 	.word	0x447a0000
 8001fc4:	20000228 	.word	0x20000228
 8001fc8:	2000022c 	.word	0x2000022c
 8001fcc:	20000264 	.word	0x20000264
 8001fd0:	f7fe faba 	bl	8000548 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fd96 	bl	8000b0c <__aeabi_d2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a93      	ldr	r2, [pc, #588]	; (8002230 <HAL_ADC_ConvCpltCallback+0x5b8>)
 8001fe4:	6013      	str	r3, [r2, #0]
    		wca = 2*fs*tan(((1/fs)/2)*wcd);
 8001fe6:	4b93      	ldr	r3, [pc, #588]	; (8002234 <HAL_ADC_ConvCpltCallback+0x5bc>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ff0:	ee17 0a90 	vmov	r0, s15
 8001ff4:	f7fe fa50 	bl	8000498 <__aeabi_f2d>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	460d      	mov	r5, r1
 8001ffc:	4b8d      	ldr	r3, [pc, #564]	; (8002234 <HAL_ADC_ConvCpltCallback+0x5bc>)
 8001ffe:	ed93 7a00 	vldr	s14, [r3]
 8002002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800200e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002012:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_ADC_ConvCpltCallback+0x5b8>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	ee17 0a90 	vmov	r0, s15
 8002020:	f7fe fa3a 	bl	8000498 <__aeabi_f2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	ec43 2b10 	vmov	d0, r2, r3
 800202c:	f004 f8d4 	bl	80061d8 <tan>
 8002030:	ec53 2b10 	vmov	r2, r3, d0
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe fa86 	bl	8000548 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fd62 	bl	8000b0c <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	4a7b      	ldr	r2, [pc, #492]	; (8002238 <HAL_ADC_ConvCpltCallback+0x5c0>)
 800204c:	6013      	str	r3, [r2, #0]
    		g = 1 - exp(-wca/fs);
 800204e:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <HAL_ADC_ConvCpltCallback+0x5c0>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	eeb1 7a67 	vneg.f32	s14, s15
 8002058:	4b76      	ldr	r3, [pc, #472]	; (8002234 <HAL_ADC_ConvCpltCallback+0x5bc>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002062:	ee16 0a90 	vmov	r0, s13
 8002066:	f7fe fa17 	bl	8000498 <__aeabi_f2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	ec43 2b10 	vmov	d0, r2, r3
 8002072:	f004 f869 	bl	8006148 <exp>
 8002076:	ec53 2b10 	vmov	r2, r3, d0
 800207a:	f04f 0000 	mov.w	r0, #0
 800207e:	496f      	ldr	r1, [pc, #444]	; (800223c <HAL_ADC_ConvCpltCallback+0x5c4>)
 8002080:	f7fe f8aa 	bl	80001d8 <__aeabi_dsub>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f7fe fd3e 	bl	8000b0c <__aeabi_d2f>
 8002090:	4603      	mov	r3, r0
 8002092:	4a6b      	ldr	r2, [pc, #428]	; (8002240 <HAL_ADC_ConvCpltCallback+0x5c8>)
 8002094:	6013      	str	r3, [r2, #0]
    		//flag_filtro = 1;

    		ya = ya_ant + g*(in - k*(yd_ant1 + yd_ant2)/2 - ya_ant);
 8002096:	4b6b      	ldr	r3, [pc, #428]	; (8002244 <HAL_ADC_ConvCpltCallback+0x5cc>)
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	4b6a      	ldr	r3, [pc, #424]	; (8002248 <HAL_ADC_ConvCpltCallback+0x5d0>)
 800209e:	edd3 6a00 	vldr	s13, [r3]
 80020a2:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_ADC_ConvCpltCallback+0x5d4>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020ac:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_ADC_ConvCpltCallback+0x5d8>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020b6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80020ba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c2:	4b64      	ldr	r3, [pc, #400]	; (8002254 <HAL_ADC_ConvCpltCallback+0x5dc>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020cc:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_ADC_ConvCpltCallback+0x5c8>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d6:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_ADC_ConvCpltCallback+0x5dc>)
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e0:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_ADC_ConvCpltCallback+0x5e0>)
 80020e2:	edc3 7a00 	vstr	s15, [r3]
    		yb = yb_ant + g*(ya - yb_ant);
 80020e6:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <HAL_ADC_ConvCpltCallback+0x5e0>)
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	4b5b      	ldr	r3, [pc, #364]	; (800225c <HAL_ADC_ConvCpltCallback+0x5e4>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f6:	4b52      	ldr	r3, [pc, #328]	; (8002240 <HAL_ADC_ConvCpltCallback+0x5c8>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002100:	4b56      	ldr	r3, [pc, #344]	; (800225c <HAL_ADC_ConvCpltCallback+0x5e4>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	4b55      	ldr	r3, [pc, #340]	; (8002260 <HAL_ADC_ConvCpltCallback+0x5e8>)
 800210c:	edc3 7a00 	vstr	s15, [r3]
    		yc = yc_ant + g*(yb - yc_ant);
 8002110:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_ADC_ConvCpltCallback+0x5e8>)
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_ADC_ConvCpltCallback+0x5ec>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002120:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_ADC_ConvCpltCallback+0x5c8>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212a:	4b4e      	ldr	r3, [pc, #312]	; (8002264 <HAL_ADC_ConvCpltCallback+0x5ec>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002134:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_ADC_ConvCpltCallback+0x5f0>)
 8002136:	edc3 7a00 	vstr	s15, [r3]
    		yd = yd_ant1 + g*(yc - yd_ant1);
 800213a:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_ADC_ConvCpltCallback+0x5f0>)
 800213c:	ed93 7a00 	vldr	s14, [r3]
 8002140:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_ADC_ConvCpltCallback+0x5d0>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee37 7a67 	vsub.f32	s14, s14, s15
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_ADC_ConvCpltCallback+0x5c8>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002154:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_ADC_ConvCpltCallback+0x5d0>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_ADC_ConvCpltCallback+0x5f4>)
 8002160:	edc3 7a00 	vstr	s15, [r3]
    		ys = yd * (1+k);
 8002164:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_ADC_ConvCpltCallback+0x5d8>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800216e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002172:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_ADC_ConvCpltCallback+0x5f4>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217c:	4b3c      	ldr	r3, [pc, #240]	; (8002270 <HAL_ADC_ConvCpltCallback+0x5f8>)
 800217e:	edc3 7a00 	vstr	s15, [r3]
    		if(ys < 0.0)
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_ADC_ConvCpltCallback+0x5f8>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	d503      	bpl.n	800219a <HAL_ADC_ConvCpltCallback+0x522>
    		{
    			ys = 0.0;
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_ADC_ConvCpltCallback+0x5f8>)
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
    		}
    		if(ys > 3.3)
 800219a:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_ADC_ConvCpltCallback+0x5f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f97a 	bl	8000498 <__aeabi_f2d>
 80021a4:	a320      	add	r3, pc, #128	; (adr r3, 8002228 <HAL_ADC_ConvCpltCallback+0x5b0>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fc5d 	bl	8000a68 <__aeabi_dcmpgt>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_ADC_ConvCpltCallback+0x542>
    		{
    			ys = 3.3;
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_ADC_ConvCpltCallback+0x5f8>)
 80021b6:	4a2f      	ldr	r2, [pc, #188]	; (8002274 <HAL_ADC_ConvCpltCallback+0x5fc>)
 80021b8:	601a      	str	r2, [r3, #0]
    		}

    		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, ys*4095/3.3);
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_ADC_ConvCpltCallback+0x5f8>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002278 <HAL_ADC_ConvCpltCallback+0x600>
 80021c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c8:	ee17 0a90 	vmov	r0, s15
 80021cc:	f7fe f964 	bl	8000498 <__aeabi_f2d>
 80021d0:	a315      	add	r3, pc, #84	; (adr r3, 8002228 <HAL_ADC_ConvCpltCallback+0x5b0>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe fae1 	bl	800079c <__aeabi_ddiv>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe fc73 	bl	8000acc <__aeabi_d2uiz>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2200      	movs	r2, #0
 80021ea:	2110      	movs	r1, #16
 80021ec:	4823      	ldr	r0, [pc, #140]	; (800227c <HAL_ADC_ConvCpltCallback+0x604>)
 80021ee:	f001 fcd3 	bl	8003b98 <HAL_DAC_SetValue>

    		ya_ant = ya;
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_ADC_ConvCpltCallback+0x5e0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_ADC_ConvCpltCallback+0x5dc>)
 80021f8:	6013      	str	r3, [r2, #0]
    		yb_ant = yb;
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_ADC_ConvCpltCallback+0x5e8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_ADC_ConvCpltCallback+0x5e4>)
 8002200:	6013      	str	r3, [r2, #0]
    		yc_ant = yc;
 8002202:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_ADC_ConvCpltCallback+0x5f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_ADC_ConvCpltCallback+0x5ec>)
 8002208:	6013      	str	r3, [r2, #0]
    		yd_ant2 = yd_ant1;
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_ADC_ConvCpltCallback+0x5d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_ADC_ConvCpltCallback+0x5d4>)
 8002210:	6013      	str	r3, [r2, #0]
    		yd_ant1 = yd;
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_ADC_ConvCpltCallback+0x5f4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <HAL_ADC_ConvCpltCallback+0x5d0>)
 8002218:	6013      	str	r3, [r2, #0]
    	}
    }
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bdb0      	pop	{r4, r5, r7, pc}
 8002222:	bf00      	nop
 8002224:	f3af 8000 	nop.w
 8002228:	66666666 	.word	0x66666666
 800222c:	400a6666 	.word	0x400a6666
 8002230:	20000230 	.word	0x20000230
 8002234:	20000004 	.word	0x20000004
 8002238:	20000234 	.word	0x20000234
 800223c:	3ff00000 	.word	0x3ff00000
 8002240:	20000238 	.word	0x20000238
 8002244:	20000264 	.word	0x20000264
 8002248:	20000258 	.word	0x20000258
 800224c:	2000025c 	.word	0x2000025c
 8002250:	2000022c 	.word	0x2000022c
 8002254:	20000240 	.word	0x20000240
 8002258:	2000023c 	.word	0x2000023c
 800225c:	20000248 	.word	0x20000248
 8002260:	20000244 	.word	0x20000244
 8002264:	20000250 	.word	0x20000250
 8002268:	2000024c 	.word	0x2000024c
 800226c:	20000254 	.word	0x20000254
 8002270:	20000260 	.word	0x20000260
 8002274:	40533333 	.word	0x40533333
 8002278:	457ff000 	.word	0x457ff000
 800227c:	2000012c 	.word	0x2000012c

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002288:	e7fe      	b.n	8002288 <Error_Handler+0x8>
	...

0800228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_MspInit+0x44>)
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_MspInit+0x44>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6613      	str	r3, [r2, #96]	; 0x60
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_MspInit+0x44>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_MspInit+0x44>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_MspInit+0x44>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	; 0x58
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_MspInit+0x44>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b09e      	sub	sp, #120	; 0x78
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	2254      	movs	r2, #84	; 0x54
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fef3 	bl	80060e0 <memset>
  if(hadc->Instance==ADC1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a3b      	ldr	r2, [pc, #236]	; (80023ec <HAL_ADC_MspInit+0x118>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d16e      	bne.n	80023e2 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002308:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800230a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800230e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002314:	2301      	movs	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002318:	2310      	movs	r3, #16
 800231a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800231c:	2307      	movs	r3, #7
 800231e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002320:	2302      	movs	r3, #2
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800232e:	f107 0310 	add.w	r3, r7, #16
 8002332:	4618      	mov	r0, r3
 8002334:	f002 ff8a 	bl	800524c <HAL_RCCEx_PeriphCLKConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800233e:	f7ff ff9f 	bl	8002280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_ADC_MspInit+0x11c>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <HAL_ADC_MspInit+0x11c>)
 8002348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800234c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_ADC_MspInit+0x11c>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_ADC_MspInit+0x11c>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_ADC_MspInit+0x11c>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_ADC_MspInit+0x11c>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002372:	230f      	movs	r3, #15
 8002374:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002376:	230b      	movs	r3, #11
 8002378:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002382:	4619      	mov	r1, r3
 8002384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002388:	f001 ff4a 	bl	8004220 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 800238e:	4a1a      	ldr	r2, [pc, #104]	; (80023f8 <HAL_ADC_MspInit+0x124>)
 8002390:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 8002394:	2200      	movs	r2, #0
 8002396:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023bc:	2220      	movs	r2, #32
 80023be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023c6:	480b      	ldr	r0, [pc, #44]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023c8:	f001 fd32 	bl	8003e30 <HAL_DMA_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80023d2:	f7ff ff55 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023da:	64da      	str	r2, [r3, #76]	; 0x4c
 80023dc:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <HAL_ADC_MspInit+0x120>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023e2:	bf00      	nop
 80023e4:	3778      	adds	r7, #120	; 0x78
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	50040000 	.word	0x50040000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	200000e4 	.word	0x200000e4
 80023f8:	40020008 	.word	0x40020008

080023fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a15      	ldr	r2, [pc, #84]	; (8002470 <HAL_DAC_MspInit+0x74>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d124      	bne.n	8002468 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_DAC_MspInit+0x78>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a14      	ldr	r2, [pc, #80]	; (8002474 <HAL_DAC_MspInit+0x78>)
 8002424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_DAC_MspInit+0x78>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_DAC_MspInit+0x78>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_DAC_MspInit+0x78>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_DAC_MspInit+0x78>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800244e:	2320      	movs	r3, #32
 8002450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002452:	2303      	movs	r3, #3
 8002454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f001 fedc 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40007400 	.word	0x40007400
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d114      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 800248c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 8002490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002494:	6613      	str	r3, [r2, #96]	; 0x60
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2019      	movs	r0, #25
 80024a8:	f001 fad1 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024ac:	2019      	movs	r0, #25
 80024ae:	f001 faea 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024b2:	e018      	b.n	80024e6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024bc:	d113      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	201c      	movs	r0, #28
 80024dc:	f001 fab7 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024e0:	201c      	movs	r0, #28
 80024e2:	f001 fad0 	bl	8003a86 <HAL_NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40021000 	.word	0x40021000

080024f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024fc:	e7fe      	b.n	80024fc <NMI_Handler+0x4>

080024fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002544:	f000 f8c6 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002550:	2002      	movs	r0, #2
 8002552:	f001 ffff 	bl	8004554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}

0800255a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800255e:	2010      	movs	r0, #16
 8002560:	f001 fff8 	bl	8004554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <DMA1_Channel1_IRQHandler+0x10>)
 800256e:	f001 fd77 	bl	8004060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200000e4 	.word	0x200000e4

0800257c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002580:	2040      	movs	r0, #64	; 0x40
 8002582:	f001 ffe7 	bl	8004554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002592:	f003 fa1e 	bl	80059d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000140 	.word	0x20000140

080025a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM2_IRQHandler+0x10>)
 80025a6:	f003 fa14 	bl	80059d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000018c 	.word	0x2000018c

080025b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <SystemInit+0x20>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <SystemInit+0x20>)
 80025c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025dc:	f7ff ffea 	bl	80025b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <LoopForever+0x6>)
  ldr r1, =_edata
 80025e2:	490d      	ldr	r1, [pc, #52]	; (8002618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <LoopForever+0xe>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025f8:	4c0a      	ldr	r4, [pc, #40]	; (8002624 <LoopForever+0x16>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002606:	f003 fd79 	bl	80060fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800260a:	f7fe fad1 	bl	8000bb0 <main>

0800260e <LoopForever>:

LoopForever:
    b LoopForever
 800260e:	e7fe      	b.n	800260e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002610:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002618:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800261c:	08007900 	.word	0x08007900
  ldr r2, =_sbss
 8002620:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002624:	200003a4 	.word	0x200003a4

08002628 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC1_IRQHandler>

0800262a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002634:	2003      	movs	r0, #3
 8002636:	f001 f9ff 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800263a:	2000      	movs	r0, #0
 800263c:	f000 f80e 	bl	800265c <HAL_InitTick>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	e001      	b.n	8002650 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800264c:	f7ff fe1e 	bl	800228c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002650:	79fb      	ldrb	r3, [r7, #7]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_InitTick+0x6c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_InitTick+0x70>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <HAL_InitTick+0x6c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4619      	mov	r1, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	4618      	mov	r0, r3
 8002688:	f001 fa0b 	bl	8003aa2 <HAL_SYSTICK_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d809      	bhi.n	80026ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f001 f9d5 	bl	8003a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_InitTick+0x74>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e007      	b.n	80026bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e004      	b.n	80026bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	e001      	b.n	80026bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000010 	.word	0x20000010
 80026cc:	20000008 	.word	0x20000008
 80026d0:	2000000c 	.word	0x2000000c

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000010 	.word	0x20000010
 80026f8:	20000268 	.word	0x20000268

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000268 	.word	0x20000268

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffde 	bl	80026fc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000010 	.word	0x20000010

0800275c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	609a      	str	r2, [r3, #8]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3360      	adds	r3, #96	; 0x60
 80027d6:	461a      	mov	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <LL_ADC_SetOffset+0x44>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	03fff000 	.word	0x03fff000

0800280c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	461a      	mov	r2, r3
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3360      	adds	r3, #96	; 0x60
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	431a      	orrs	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3330      	adds	r3, #48	; 0x30
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	4413      	add	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	211f      	movs	r1, #31
 80028c0:	fa01 f303 	lsl.w	r3, r1, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	401a      	ands	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	f003 011f 	and.w	r1, r3, #31
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	431a      	orrs	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028e0:	bf00      	nop
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3314      	adds	r3, #20
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	0e5b      	lsrs	r3, r3, #25
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	0d1b      	lsrs	r3, r3, #20
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2107      	movs	r1, #7
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	401a      	ands	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	0d1b      	lsrs	r3, r3, #20
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	431a      	orrs	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0318 	and.w	r3, r3, #24
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002968:	40d9      	lsrs	r1, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	400b      	ands	r3, r1
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	431a      	orrs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	0007ffff 	.word	0x0007ffff

0800298c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800299c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6093      	str	r3, [r2, #8]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c4:	d101      	bne.n	80029ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a14:	d101      	bne.n	8002a1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <LL_ADC_IsEnabled+0x18>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <LL_ADC_IsEnabled+0x1a>
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a8a:	f043 0204 	orr.w	r2, r3, #4
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d101      	bne.n	8002ab6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d101      	bne.n	8002adc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e126      	b.n	8002d54 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fbdd 	bl	80022d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff3f 	bl	80029b0 <LL_ADC_IsDeepPowerDownEnabled>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff25 	bl	800298c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff5a 	bl	8002a00 <LL_ADC_IsInternalRegulatorEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d115      	bne.n	8002b7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff3e 	bl	80029d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b5c:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <HAL_ADC_Init+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	4a7f      	ldr	r2, [pc, #508]	; (8002d60 <HAL_ADC_Init+0x274>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff3c 	bl	8002a00 <LL_ADC_IsInternalRegulatorEnabled>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10d      	bne.n	8002baa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	f043 0210 	orr.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff75 	bl	8002a9e <LL_ADC_REG_IsConversionOngoing>
 8002bb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 80bf 	bne.w	8002d42 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 80bb 	bne.w	8002d42 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bd4:	f043 0202 	orr.w	r2, r3, #2
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff35 	bl	8002a50 <LL_ADC_IsEnabled>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bec:	485d      	ldr	r0, [pc, #372]	; (8002d64 <HAL_ADC_Init+0x278>)
 8002bee:	f7ff ff2f 	bl	8002a50 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	485a      	ldr	r0, [pc, #360]	; (8002d68 <HAL_ADC_Init+0x27c>)
 8002c00:	f7ff fdac 	bl	800275c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7e5b      	ldrb	r3, [r3, #25]
 8002c08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d106      	bne.n	8002c40 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	3b01      	subs	r3, #1
 8002c38:	045b      	lsls	r3, r3, #17
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <HAL_ADC_Init+0x280>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff25 	bl	8002ac4 <LL_ADC_INJ_IsConversionOngoing>
 8002c7a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d13d      	bne.n	8002cfe <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d13a      	bne.n	8002cfe <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c8c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c94:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca4:	f023 0302 	bic.w	r3, r3, #2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d118      	bne.n	8002cee <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	611a      	str	r2, [r3, #16]
 8002cec:	e007      	b.n	8002cfe <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10c      	bne.n	8002d20 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f023 010f 	bic.w	r1, r3, #15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1e:	e007      	b.n	8002d30 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 020f 	bic.w	r2, r2, #15
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f023 0303 	bic.w	r3, r3, #3
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
 8002d40:	e007      	b.n	8002d52 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000008 	.word	0x20000008
 8002d60:	053e2d63 	.word	0x053e2d63
 8002d64:	50040000 	.word	0x50040000
 8002d68:	50040300 	.word	0x50040300
 8002d6c:	fff0c007 	.word	0xfff0c007

08002d70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fe8c 	bl	8002a9e <LL_ADC_REG_IsConversionOngoing>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d167      	bne.n	8002e5c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Start_DMA+0x2a>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e063      	b.n	8002e62 <HAL_ADC_Start_DMA+0xf2>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fc5e 	bl	8003664 <ADC_Enable>
 8002da8:	4603      	mov	r3, r0
 8002daa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d14f      	bne.n	8002e52 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f023 0206 	bic.w	r2, r3, #6
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	659a      	str	r2, [r3, #88]	; 0x58
 8002dde:	e002      	b.n	8002de6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <HAL_ADC_Start_DMA+0xfc>)
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df2:	4a1f      	ldr	r2, [pc, #124]	; (8002e70 <HAL_ADC_Start_DMA+0x100>)
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <HAL_ADC_Start_DMA+0x104>)
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	221c      	movs	r2, #28
 8002e04:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0210 	orr.w	r2, r2, #16
 8002e1c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3340      	adds	r3, #64	; 0x40
 8002e38:	4619      	mov	r1, r3
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f001 f8af 	bl	8003fa0 <HAL_DMA_Start_IT>
 8002e42:	4603      	mov	r3, r0
 8002e44:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fe13 	bl	8002a76 <LL_ADC_REG_StartConversion>
 8002e50:	e006      	b.n	8002e60 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002e5a:	e001      	b.n	8002e60 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08003771 	.word	0x08003771
 8002e70:	08003849 	.word	0x08003849
 8002e74:	08003865 	.word	0x08003865

08002e78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b0b6      	sub	sp, #216	; 0xd8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x22>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e3bb      	b.n	800363a <HAL_ADC_ConfigChannel+0x79a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fde5 	bl	8002a9e <LL_ADC_REG_IsConversionOngoing>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 83a0 	bne.w	800361c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d824      	bhi.n	8002f36 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	3b02      	subs	r3, #2
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d81b      	bhi.n	8002f2e <HAL_ADC_ConfigChannel+0x8e>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <HAL_ADC_ConfigChannel+0x5c>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f15 	.word	0x08002f15
 8002f04:	08002f1d 	.word	0x08002f1d
 8002f08:	08002f25 	.word	0x08002f25
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f12:	e010      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002f14:	2312      	movs	r3, #18
 8002f16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f1a:	e00c      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002f1c:	2318      	movs	r3, #24
 8002f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f22:	e008      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f2c:	e003      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002f2e:	2306      	movs	r3, #6
 8002f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002f34:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002f44:	f7ff fca6 	bl	8002894 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fda6 	bl	8002a9e <LL_ADC_REG_IsConversionOngoing>
 8002f52:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fdb2 	bl	8002ac4 <LL_ADC_INJ_IsConversionOngoing>
 8002f60:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 81a4 	bne.w	80032b6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 819f 	bne.w	80032b6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6819      	ldr	r1, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f7ff fcb1 	bl	80028ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	08db      	lsrs	r3, r3, #3
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d00a      	beq.n	8002fc2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6919      	ldr	r1, [r3, #16]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fbc:	f7ff fc02 	bl	80027c4 <LL_ADC_SetOffset>
 8002fc0:	e179      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fc1f 	bl	800280c <LL_ADC_GetOffsetChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x14e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fc14 	bl	800280c <LL_ADC_GetOffsetChannel>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	e01e      	b.n	800302c <HAL_ADC_ConfigChannel+0x18c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fc09 	bl	800280c <LL_ADC_GetOffsetChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800300c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003014:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e004      	b.n	800302a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x1a4>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	e018      	b.n	8003076 <HAL_ADC_ConfigChannel+0x1d6>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800305c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003060:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e004      	b.n	8003076 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800306c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003076:	429a      	cmp	r2, r3
 8003078:	d106      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fbd8 	bl	8002838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fbbc 	bl	800280c <LL_ADC_GetOffsetChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x214>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fbb1 	bl	800280c <LL_ADC_GetOffsetChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	f003 021f 	and.w	r2, r3, #31
 80030b2:	e01e      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x252>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fba6 	bl	800280c <LL_ADC_GetOffsetChannel>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80030d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80030da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80030e2:	2320      	movs	r3, #32
 80030e4:	e004      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80030e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_ADC_ConfigChannel+0x26a>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	0e9b      	lsrs	r3, r3, #26
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	e018      	b.n	800313c <HAL_ADC_ConfigChannel+0x29c>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800311e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003122:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003126:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800312e:	2320      	movs	r3, #32
 8003130:	e004      	b.n	800313c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003132:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800313c:	429a      	cmp	r2, r3
 800313e:	d106      	bne.n	800314e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2200      	movs	r2, #0
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fb75 	bl	8002838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2102      	movs	r1, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fb59 	bl	800280c <LL_ADC_GetOffsetChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <HAL_ADC_ConfigChannel+0x2da>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fb4e 	bl	800280c <LL_ADC_GetOffsetChannel>
 8003170:	4603      	mov	r3, r0
 8003172:	0e9b      	lsrs	r3, r3, #26
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	e01e      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x318>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2102      	movs	r1, #2
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fb43 	bl	800280c <LL_ADC_GetOffsetChannel>
 8003186:	4603      	mov	r3, r0
 8003188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80031a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e004      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80031ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x330>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	e014      	b.n	80031fa <HAL_ADC_ConfigChannel+0x35a>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80031de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80031e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e004      	b.n	80031fa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80031f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d106      	bne.n	800320c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fb16 	bl	8002838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2103      	movs	r1, #3
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fafa 	bl	800280c <LL_ADC_GetOffsetChannel>
 8003218:	4603      	mov	r3, r0
 800321a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x398>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2103      	movs	r1, #3
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff faef 	bl	800280c <LL_ADC_GetOffsetChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	0e9b      	lsrs	r3, r3, #26
 8003232:	f003 021f 	and.w	r2, r3, #31
 8003236:	e017      	b.n	8003268 <HAL_ADC_ConfigChannel+0x3c8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2103      	movs	r1, #3
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fae4 	bl	800280c <LL_ADC_GetOffsetChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003252:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800325a:	2320      	movs	r3, #32
 800325c:	e003      	b.n	8003266 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800325e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x3e0>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	e011      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x404>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800328e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003290:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003292:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800329c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d106      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2103      	movs	r1, #3
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fac1 	bl	8002838 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fbc8 	bl	8002a50 <LL_ADC_IsEnabled>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8140 	bne.w	8003548 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f7ff fb35 	bl	8002944 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	4a8f      	ldr	r2, [pc, #572]	; (800351c <HAL_ADC_ConfigChannel+0x67c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f040 8131 	bne.w	8003548 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_ADC_ConfigChannel+0x46e>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	3301      	adds	r3, #1
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2b09      	cmp	r3, #9
 8003304:	bf94      	ite	ls
 8003306:	2301      	movls	r3, #1
 8003308:	2300      	movhi	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	e019      	b.n	8003342 <HAL_ADC_ConfigChannel+0x4a2>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800331c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e003      	b.n	8003332 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800332a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b09      	cmp	r3, #9
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003342:	2b00      	cmp	r3, #0
 8003344:	d079      	beq.n	800343a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x4c2>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	3301      	adds	r3, #1
 800335a:	069b      	lsls	r3, r3, #26
 800335c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003360:	e015      	b.n	800338e <HAL_ADC_ConfigChannel+0x4ee>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003372:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e003      	b.n	8003386 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800337e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	3301      	adds	r3, #1
 8003388:	069b      	lsls	r3, r3, #26
 800338a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x50e>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	e017      	b.n	80033de <HAL_ADC_ConfigChannel+0x53e>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80033bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033be:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80033c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80033ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2101      	movs	r1, #1
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	ea42 0103 	orr.w	r1, r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x564>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	3301      	adds	r3, #1
 80033f6:	f003 021f 	and.w	r2, r3, #31
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	051b      	lsls	r3, r3, #20
 8003402:	e018      	b.n	8003436 <HAL_ADC_ConfigChannel+0x596>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003436:	430b      	orrs	r3, r1
 8003438:	e081      	b.n	800353e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x5b6>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0e9b      	lsrs	r3, r3, #26
 800344c:	3301      	adds	r3, #1
 800344e:	069b      	lsls	r3, r3, #26
 8003450:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003454:	e015      	b.n	8003482 <HAL_ADC_ConfigChannel+0x5e2>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800346e:	2320      	movs	r3, #32
 8003470:	e003      	b.n	800347a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	069b      	lsls	r3, r3, #26
 800347e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x602>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	3301      	adds	r3, #1
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	e017      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x632>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	61bb      	str	r3, [r7, #24]
  return result;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e003      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	ea42 0103 	orr.w	r1, r2, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x65e>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	3301      	adds	r3, #1
 80034ea:	f003 021f 	and.w	r2, r3, #31
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	051b      	lsls	r3, r3, #20
 80034f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034fc:	e01e      	b.n	800353c <HAL_ADC_ConfigChannel+0x69c>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	60fb      	str	r3, [r7, #12]
  return result;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003516:	2320      	movs	r3, #32
 8003518:	e006      	b.n	8003528 <HAL_ADC_ConfigChannel+0x688>
 800351a:	bf00      	nop
 800351c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f003 021f 	and.w	r2, r3, #31
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	3b1e      	subs	r3, #30
 8003536:	051b      	lsls	r3, r3, #20
 8003538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003542:	4619      	mov	r1, r3
 8003544:	f7ff f9d2 	bl	80028ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <HAL_ADC_ConfigChannel+0x7a4>)
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d06c      	beq.n	800362e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003554:	483c      	ldr	r0, [pc, #240]	; (8003648 <HAL_ADC_ConfigChannel+0x7a8>)
 8003556:	f7ff f927 	bl	80027a8 <LL_ADC_GetCommonPathInternalCh>
 800355a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3a      	ldr	r2, [pc, #232]	; (800364c <HAL_ADC_ConfigChannel+0x7ac>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d127      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800356c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d121      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a35      	ldr	r2, [pc, #212]	; (8003650 <HAL_ADC_ConfigChannel+0x7b0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d157      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003586:	4619      	mov	r1, r3
 8003588:	482f      	ldr	r0, [pc, #188]	; (8003648 <HAL_ADC_ConfigChannel+0x7a8>)
 800358a:	f7ff f8fa 	bl	8002782 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_ADC_ConfigChannel+0x7b4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	4a30      	ldr	r2, [pc, #192]	; (8003658 <HAL_ADC_ConfigChannel+0x7b8>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b6:	e03a      	b.n	800362e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <HAL_ADC_ConfigChannel+0x7bc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d113      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10d      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_ADC_ConfigChannel+0x7b0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d12a      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e0:	4619      	mov	r1, r3
 80035e2:	4819      	ldr	r0, [pc, #100]	; (8003648 <HAL_ADC_ConfigChannel+0x7a8>)
 80035e4:	f7ff f8cd 	bl	8002782 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035e8:	e021      	b.n	800362e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_ADC_ConfigChannel+0x7c0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d11c      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d116      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a12      	ldr	r2, [pc, #72]	; (8003650 <HAL_ADC_ConfigChannel+0x7b0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d111      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800360e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003612:	4619      	mov	r1, r3
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <HAL_ADC_ConfigChannel+0x7a8>)
 8003616:	f7ff f8b4 	bl	8002782 <LL_ADC_SetCommonPathInternalCh>
 800361a:	e008      	b.n	800362e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003636:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800363a:	4618      	mov	r0, r3
 800363c:	37d8      	adds	r7, #216	; 0xd8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	80080000 	.word	0x80080000
 8003648:	50040300 	.word	0x50040300
 800364c:	c7520000 	.word	0xc7520000
 8003650:	50040000 	.word	0x50040000
 8003654:	20000008 	.word	0x20000008
 8003658:	053e2d63 	.word	0x053e2d63
 800365c:	cb840000 	.word	0xcb840000
 8003660:	80000001 	.word	0x80000001

08003664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800366c:	2300      	movs	r3, #0
 800366e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff f9eb 	bl	8002a50 <LL_ADC_IsEnabled>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d169      	bne.n	8003754 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	4b36      	ldr	r3, [pc, #216]	; (8003760 <ADC_Enable+0xfc>)
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f043 0210 	orr.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e055      	b.n	8003756 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f9ba 	bl	8002a28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036b4:	482b      	ldr	r0, [pc, #172]	; (8003764 <ADC_Enable+0x100>)
 80036b6:	f7ff f877 	bl	80027a8 <LL_ADC_GetCommonPathInternalCh>
 80036ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <ADC_Enable+0x104>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	4a28      	ldr	r2, [pc, #160]	; (800376c <ADC_Enable+0x108>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036de:	e002      	b.n	80036e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f9      	bne.n	80036e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036ec:	f7ff f806 	bl	80026fc <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f2:	e028      	b.n	8003746 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff f9a9 	bl	8002a50 <LL_ADC_IsEnabled>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d104      	bne.n	800370e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f98d 	bl	8002a28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800370e:	f7fe fff5 	bl	80026fc <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d914      	bls.n	8003746 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d00d      	beq.n	8003746 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f043 0210 	orr.w	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d1cf      	bne.n	80036f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	8000003f 	.word	0x8000003f
 8003764:	50040300 	.word	0x50040300
 8003768:	20000008 	.word	0x20000008
 800376c:	053e2d63 	.word	0x053e2d63

08003770 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003786:	2b00      	cmp	r3, #0
 8003788:	d14b      	bne.n	8003822 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d021      	beq.n	80037e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff f860 	bl	800286e <LL_ADC_REG_IsTriggerSourceSWStart>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d032      	beq.n	800381a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d12b      	bne.n	800381a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11f      	bne.n	800381a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	f043 0201 	orr.w	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
 80037e6:	e018      	b.n	800381a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d111      	bne.n	800381a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d105      	bne.n	800381a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7fe fa2c 	bl	8001c78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003820:	e00e      	b.n	8003840 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7ff fb2c 	bl	8002e8c <HAL_ADC_ErrorCallback>
}
 8003834:	e004      	b.n	8003840 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fb0e 	bl	8002e78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f043 0204 	orr.w	r2, r3, #4
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7ff fafe 	bl	8002e8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003890:	bf00      	nop
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f7ff ff8e 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff29 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a60:	f7ff ff3e 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f7ff ff8e 	bl	800398c <NVIC_EncodePriority>
 8003a70:	4602      	mov	r2, r0
 8003a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff5d 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff31 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ffa2 	bl	80039f4 <SysTick_Config>
 8003ab0:	4603      	mov	r3, r0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e014      	b.n	8003af6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	791b      	ldrb	r3, [r3, #4]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fe fc8d 	bl	80023fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	795b      	ldrb	r3, [r3, #5]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_DAC_Start+0x16>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e03b      	b.n	8003b8c <HAL_DAC_Start+0x8e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d118      	bne.n	8003b7e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	e00f      	b.n	8003b7e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b6c:	d107      	bne.n	8003b7e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0202 	orr.w	r2, r2, #2
 8003b7c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4413      	add	r3, r2
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	e004      	b.n	8003bcc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3314      	adds	r3, #20
 8003bca:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b088      	sub	sp, #32
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	795b      	ldrb	r3, [r3, #5]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_DAC_ConfigChannel+0x1c>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e114      	b.n	8003e28 <HAL_DAC_ConfigChannel+0x246>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2202      	movs	r2, #2
 8003c08:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	f040 8081 	bne.w	8003d16 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003c14:	f7fe fd72 	bl	80026fc <HAL_GetTick>
 8003c18:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d140      	bne.n	8003ca2 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c20:	e018      	b.n	8003c54 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c22:	f7fe fd6b 	bl	80026fc <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d911      	bls.n	8003c54 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f043 0208 	orr.w	r2, r3, #8
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e0e9      	b.n	8003e28 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1df      	bne.n	8003c22 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003c62:	2001      	movs	r0, #1
 8003c64:	f7fe fd56 	bl	8002714 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	6992      	ldr	r2, [r2, #24]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
 8003c72:	e023      	b.n	8003cbc <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c74:	f7fe fd42 	bl	80026fc <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d90f      	bls.n	8003ca2 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	da0a      	bge.n	8003ca2 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f043 0208 	orr.w	r2, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0c2      	b.n	8003e28 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	dbe3      	blt.n	8003c74 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003cac:	2001      	movs	r0, #1
 8003cae:	f7fe fd31 	bl	8002714 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	6992      	ldr	r2, [r2, #24]
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	ea02 0103 	and.w	r1, r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	21ff      	movs	r1, #255	; 0xff
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	ea02 0103 	and.w	r1, r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6a1a      	ldr	r2, [r3, #32]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d11d      	bne.n	8003d5a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	221f      	movs	r2, #31
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2207      	movs	r2, #7
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43da      	mvns	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	22c0      	movs	r2, #192	; 0xc0
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43da      	mvns	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	400a      	ands	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e098      	b.n	8003f74 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b4d      	ldr	r3, [pc, #308]	; (8003f80 <HAL_DMA_Init+0x150>)
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d80f      	bhi.n	8003e6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <HAL_DMA_Init+0x154>)
 8003e56:	4413      	add	r3, r2
 8003e58:	4a4b      	ldr	r2, [pc, #300]	; (8003f88 <HAL_DMA_Init+0x158>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	091b      	lsrs	r3, r3, #4
 8003e60:	009a      	lsls	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a48      	ldr	r2, [pc, #288]	; (8003f8c <HAL_DMA_Init+0x15c>)
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e6c:	e00e      	b.n	8003e8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b46      	ldr	r3, [pc, #280]	; (8003f90 <HAL_DMA_Init+0x160>)
 8003e76:	4413      	add	r3, r2
 8003e78:	4a43      	ldr	r2, [pc, #268]	; (8003f88 <HAL_DMA_Init+0x158>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	009a      	lsls	r2, r3, #2
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a42      	ldr	r2, [pc, #264]	; (8003f94 <HAL_DMA_Init+0x164>)
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee6:	d039      	beq.n	8003f5c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <HAL_DMA_Init+0x15c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d11a      	bne.n	8003f28 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ef2:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_DMA_Init+0x168>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f003 031c 	and.w	r3, r3, #28
 8003efe:	210f      	movs	r1, #15
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	4924      	ldr	r1, [pc, #144]	; (8003f98 <HAL_DMA_Init+0x168>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f0c:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <HAL_DMA_Init+0x168>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f003 031c 	and.w	r3, r3, #28
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	491d      	ldr	r1, [pc, #116]	; (8003f98 <HAL_DMA_Init+0x168>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
 8003f26:	e019      	b.n	8003f5c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f28:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <HAL_DMA_Init+0x16c>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f003 031c 	and.w	r3, r3, #28
 8003f34:	210f      	movs	r1, #15
 8003f36:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	4917      	ldr	r1, [pc, #92]	; (8003f9c <HAL_DMA_Init+0x16c>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f42:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <HAL_DMA_Init+0x16c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f003 031c 	and.w	r3, r3, #28
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	4911      	ldr	r1, [pc, #68]	; (8003f9c <HAL_DMA_Init+0x16c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40020407 	.word	0x40020407
 8003f84:	bffdfff8 	.word	0xbffdfff8
 8003f88:	cccccccd 	.word	0xcccccccd
 8003f8c:	40020000 	.word	0x40020000
 8003f90:	bffdfbf8 	.word	0xbffdfbf8
 8003f94:	40020400 	.word	0x40020400
 8003f98:	400200a8 	.word	0x400200a8
 8003f9c:	400204a8 	.word	0x400204a8

08003fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_DMA_Start_IT+0x20>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e04b      	b.n	8004058 <HAL_DMA_Start_IT+0xb8>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d13a      	bne.n	800404a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f8e0 	bl	80041be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 020e 	orr.w	r2, r2, #14
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e00f      	b.n	8004038 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 020a 	orr.w	r2, r2, #10
 8004036:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	e005      	b.n	8004056 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004052:	2302      	movs	r3, #2
 8004054:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	f003 031c 	and.w	r3, r3, #28
 8004080:	2204      	movs	r2, #4
 8004082:	409a      	lsls	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d026      	beq.n	80040da <HAL_DMA_IRQHandler+0x7a>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d021      	beq.n	80040da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d107      	bne.n	80040b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	f003 021c 	and.w	r2, r3, #28
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2104      	movs	r1, #4
 80040c2:	fa01 f202 	lsl.w	r2, r1, r2
 80040c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d071      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040d8:	e06c      	b.n	80041b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	f003 031c 	and.w	r3, r3, #28
 80040e2:	2202      	movs	r2, #2
 80040e4:	409a      	lsls	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d02e      	beq.n	800414c <HAL_DMA_IRQHandler+0xec>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d029      	beq.n	800414c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 020a 	bic.w	r2, r2, #10
 8004114:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f003 021c 	and.w	r2, r3, #28
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	2102      	movs	r1, #2
 800412c:	fa01 f202 	lsl.w	r2, r1, r2
 8004130:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d038      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800414a:	e033      	b.n	80041b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	f003 031c 	and.w	r3, r3, #28
 8004154:	2208      	movs	r2, #8
 8004156:	409a      	lsls	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d02a      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x156>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d025      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 020e 	bic.w	r2, r2, #14
 8004178:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f003 021c 	and.w	r2, r3, #28
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2101      	movs	r1, #1
 8004188:	fa01 f202 	lsl.w	r2, r1, r2
 800418c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
}
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	f003 021c 	and.w	r2, r3, #28
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f202 	lsl.w	r2, r1, r2
 80041de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d108      	bne.n	8004202 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004200:	e007      	b.n	8004212 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	60da      	str	r2, [r3, #12]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422e:	e148      	b.n	80044c2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	4013      	ands	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 813a 	beq.w	80044bc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d005      	beq.n	8004260 <HAL_GPIO_Init+0x40>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d130      	bne.n	80042c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	2203      	movs	r2, #3
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004296:	2201      	movs	r2, #1
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	f003 0201 	and.w	r2, r3, #1
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d017      	beq.n	80042fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2203      	movs	r2, #3
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d123      	bne.n	8004352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	08da      	lsrs	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3208      	adds	r2, #8
 8004312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	220f      	movs	r2, #15
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	08da      	lsrs	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3208      	adds	r2, #8
 800434c:	6939      	ldr	r1, [r7, #16]
 800434e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	2203      	movs	r2, #3
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0203 	and.w	r2, r3, #3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8094 	beq.w	80044bc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004394:	4b52      	ldr	r3, [pc, #328]	; (80044e0 <HAL_GPIO_Init+0x2c0>)
 8004396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004398:	4a51      	ldr	r2, [pc, #324]	; (80044e0 <HAL_GPIO_Init+0x2c0>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6613      	str	r3, [r2, #96]	; 0x60
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <HAL_GPIO_Init+0x2c0>)
 80043a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043ac:	4a4d      	ldr	r2, [pc, #308]	; (80044e4 <HAL_GPIO_Init+0x2c4>)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	089b      	lsrs	r3, r3, #2
 80043b2:	3302      	adds	r3, #2
 80043b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	220f      	movs	r2, #15
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043d6:	d00d      	beq.n	80043f4 <HAL_GPIO_Init+0x1d4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a43      	ldr	r2, [pc, #268]	; (80044e8 <HAL_GPIO_Init+0x2c8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <HAL_GPIO_Init+0x1d0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a42      	ldr	r2, [pc, #264]	; (80044ec <HAL_GPIO_Init+0x2cc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_GPIO_Init+0x1cc>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e004      	b.n	80043f6 <HAL_GPIO_Init+0x1d6>
 80043ec:	2307      	movs	r3, #7
 80043ee:	e002      	b.n	80043f6 <HAL_GPIO_Init+0x1d6>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_GPIO_Init+0x1d6>
 80043f4:	2300      	movs	r3, #0
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	f002 0203 	and.w	r2, r2, #3
 80043fc:	0092      	lsls	r2, r2, #2
 80043fe:	4093      	lsls	r3, r2
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004406:	4937      	ldr	r1, [pc, #220]	; (80044e4 <HAL_GPIO_Init+0x2c4>)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	3302      	adds	r3, #2
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004414:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	43db      	mvns	r3, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004438:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	43db      	mvns	r3, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004462:	4a23      	ldr	r2, [pc, #140]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004468:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	43db      	mvns	r3, r3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4013      	ands	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800448c:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004492:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	43db      	mvns	r3, r3
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4013      	ands	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044b6:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <HAL_GPIO_Init+0x2d0>)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	3301      	adds	r3, #1
 80044c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f47f aeaf 	bne.w	8004230 <HAL_GPIO_Init+0x10>
  }
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40010000 	.word	0x40010000
 80044e8:	48000400 	.word	0x48000400
 80044ec:	48000800 	.word	0x48000800
 80044f0:	40010400 	.word	0x40010400

080044f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
 8004510:	e001      	b.n	8004516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	807b      	strh	r3, [r7, #2]
 8004530:	4613      	mov	r3, r2
 8004532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004534:	787b      	ldrb	r3, [r7, #1]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800453a:	887a      	ldrh	r2, [r7, #2]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004540:	e002      	b.n	8004548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d006      	beq.n	8004578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800456a:	4a05      	ldr	r2, [pc, #20]	; (8004580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fabc 	bl	8001af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40010400 	.word	0x40010400

08004584 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <HAL_PWREx_GetVoltageRange+0x18>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40007000 	.word	0x40007000

080045a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ae:	d130      	bne.n	8004612 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80045b0:	4b23      	ldr	r3, [pc, #140]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045bc:	d038      	beq.n	8004630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045be:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045c6:	4a1e      	ldr	r2, [pc, #120]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045ce:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2232      	movs	r2, #50	; 0x32
 80045d4:	fb02 f303 	mul.w	r3, r2, r3
 80045d8:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	0c9b      	lsrs	r3, r3, #18
 80045e0:	3301      	adds	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045e4:	e002      	b.n	80045ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f8:	d102      	bne.n	8004600 <HAL_PWREx_ControlVoltageScaling+0x60>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f2      	bne.n	80045e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460c:	d110      	bne.n	8004630 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e00f      	b.n	8004632 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d007      	beq.n	8004630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004628:	4a05      	ldr	r2, [pc, #20]	; (8004640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800462a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800462e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40007000 	.word	0x40007000
 8004644:	20000008 	.word	0x20000008
 8004648:	431bde83 	.word	0x431bde83

0800464c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f000 bc02 	b.w	8004e64 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004660:	4b96      	ldr	r3, [pc, #600]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800466a:	4b94      	ldr	r3, [pc, #592]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80e4 	beq.w	800484a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <HAL_RCC_OscConfig+0x4c>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b0c      	cmp	r3, #12
 800468c:	f040 808b 	bne.w	80047a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b01      	cmp	r3, #1
 8004694:	f040 8087 	bne.w	80047a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004698:	4b88      	ldr	r3, [pc, #544]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_OscConfig+0x64>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e3d9      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	4b81      	ldr	r3, [pc, #516]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_RCC_OscConfig+0x7e>
 80046c0:	4b7e      	ldr	r3, [pc, #504]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c8:	e005      	b.n	80046d6 <HAL_RCC_OscConfig+0x8a>
 80046ca:	4b7c      	ldr	r3, [pc, #496]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d223      	bcs.n	8004722 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fd54 	bl	800518c <RCC_SetFlashLatencyFromMSIRange>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e3ba      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ee:	4b73      	ldr	r3, [pc, #460]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a72      	ldr	r2, [pc, #456]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80046f4:	f043 0308 	orr.w	r3, r3, #8
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b70      	ldr	r3, [pc, #448]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	496d      	ldr	r1, [pc, #436]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800470c:	4b6b      	ldr	r3, [pc, #428]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	4968      	ldr	r1, [pc, #416]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800471c:	4313      	orrs	r3, r2
 800471e:	604b      	str	r3, [r1, #4]
 8004720:	e025      	b.n	800476e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004722:	4b66      	ldr	r3, [pc, #408]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a65      	ldr	r2, [pc, #404]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004728:	f043 0308 	orr.w	r3, r3, #8
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b63      	ldr	r3, [pc, #396]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4960      	ldr	r1, [pc, #384]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004740:	4b5e      	ldr	r3, [pc, #376]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	495b      	ldr	r1, [pc, #364]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fd14 	bl	800518c <RCC_SetFlashLatencyFromMSIRange>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e37a      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800476e:	f000 fc81 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8004772:	4602      	mov	r2, r0
 8004774:	4b51      	ldr	r3, [pc, #324]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	4950      	ldr	r1, [pc, #320]	; (80048c0 <HAL_RCC_OscConfig+0x274>)
 8004780:	5ccb      	ldrb	r3, [r1, r3]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	fa22 f303 	lsr.w	r3, r2, r3
 800478a:	4a4e      	ldr	r2, [pc, #312]	; (80048c4 <HAL_RCC_OscConfig+0x278>)
 800478c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800478e:	4b4e      	ldr	r3, [pc, #312]	; (80048c8 <HAL_RCC_OscConfig+0x27c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd ff62 	bl	800265c <HAL_InitTick>
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d052      	beq.n	8004848 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	e35e      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d032      	beq.n	8004814 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047ae:	4b43      	ldr	r3, [pc, #268]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a42      	ldr	r2, [pc, #264]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047ba:	f7fd ff9f 	bl	80026fc <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047c2:	f7fd ff9b 	bl	80026fc <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e347      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047d4:	4b39      	ldr	r3, [pc, #228]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047e0:	4b36      	ldr	r3, [pc, #216]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a35      	ldr	r2, [pc, #212]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80047e6:	f043 0308 	orr.w	r3, r3, #8
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b33      	ldr	r3, [pc, #204]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4930      	ldr	r1, [pc, #192]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047fe:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	492b      	ldr	r1, [pc, #172]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
 8004812:	e01a      	b.n	800484a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004814:	4b29      	ldr	r3, [pc, #164]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a28      	ldr	r2, [pc, #160]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004820:	f7fd ff6c 	bl	80026fc <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004828:	f7fd ff68 	bl	80026fc <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e314      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x1dc>
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004848:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d073      	beq.n	800493e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d005      	beq.n	8004868 <HAL_RCC_OscConfig+0x21c>
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d10e      	bne.n	8004880 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d10b      	bne.n	8004880 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	4b14      	ldr	r3, [pc, #80]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d063      	beq.n	800493c <HAL_RCC_OscConfig+0x2f0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d15f      	bne.n	800493c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e2f1      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d106      	bne.n	8004898 <HAL_RCC_OscConfig+0x24c>
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e025      	b.n	80048e4 <HAL_RCC_OscConfig+0x298>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a0:	d114      	bne.n	80048cc <HAL_RCC_OscConfig+0x280>
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a05      	ldr	r2, [pc, #20]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80048a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a02      	ldr	r2, [pc, #8]	; (80048bc <HAL_RCC_OscConfig+0x270>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e013      	b.n	80048e4 <HAL_RCC_OscConfig+0x298>
 80048bc:	40021000 	.word	0x40021000
 80048c0:	080076b0 	.word	0x080076b0
 80048c4:	20000008 	.word	0x20000008
 80048c8:	2000000c 	.word	0x2000000c
 80048cc:	4ba0      	ldr	r3, [pc, #640]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a9f      	ldr	r2, [pc, #636]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80048d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	4b9d      	ldr	r3, [pc, #628]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a9c      	ldr	r2, [pc, #624]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80048de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d013      	beq.n	8004914 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fd ff06 	bl	80026fc <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fd ff02 	bl	80026fc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	; 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e2ae      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004906:	4b92      	ldr	r3, [pc, #584]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x2a8>
 8004912:	e014      	b.n	800493e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd fef2 	bl	80026fc <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800491c:	f7fd feee 	bl	80026fc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e29a      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800492e:	4b88      	ldr	r3, [pc, #544]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f0      	bne.n	800491c <HAL_RCC_OscConfig+0x2d0>
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800493c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d060      	beq.n	8004a0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b04      	cmp	r3, #4
 800494e:	d005      	beq.n	800495c <HAL_RCC_OscConfig+0x310>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b0c      	cmp	r3, #12
 8004954:	d119      	bne.n	800498a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d116      	bne.n	800498a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800495c:	4b7c      	ldr	r3, [pc, #496]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_OscConfig+0x328>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e277      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004974:	4b76      	ldr	r3, [pc, #472]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	4973      	ldr	r1, [pc, #460]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004984:	4313      	orrs	r3, r2
 8004986:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004988:	e040      	b.n	8004a0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d023      	beq.n	80049da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004992:	4b6f      	ldr	r3, [pc, #444]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6e      	ldr	r2, [pc, #440]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499e:	f7fd fead 	bl	80026fc <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a6:	f7fd fea9 	bl	80026fc <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e255      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b8:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c4:	4b62      	ldr	r3, [pc, #392]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	061b      	lsls	r3, r3, #24
 80049d2:	495f      	ldr	r1, [pc, #380]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
 80049d8:	e018      	b.n	8004a0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049da:	4b5d      	ldr	r3, [pc, #372]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a5c      	ldr	r2, [pc, #368]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 80049e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fd fe89 	bl	80026fc <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ee:	f7fd fe85 	bl	80026fc <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e231      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f0      	bne.n	80049ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d03c      	beq.n	8004a92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01c      	beq.n	8004a5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a20:	4b4b      	ldr	r3, [pc, #300]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a26:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fd fe64 	bl	80026fc <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a38:	f7fd fe60 	bl	80026fc <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e20c      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a4a:	4b41      	ldr	r3, [pc, #260]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0ef      	beq.n	8004a38 <HAL_RCC_OscConfig+0x3ec>
 8004a58:	e01b      	b.n	8004a92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a60:	4a3b      	ldr	r2, [pc, #236]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6a:	f7fd fe47 	bl	80026fc <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a72:	f7fd fe43 	bl	80026fc <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e1ef      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a84:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1ef      	bne.n	8004a72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80a6 	beq.w	8004bec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004aa4:	4b2a      	ldr	r3, [pc, #168]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10d      	bne.n	8004acc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab0:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	4a26      	ldr	r2, [pc, #152]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aba:	6593      	str	r3, [r2, #88]	; 0x58
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004acc:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <HAL_RCC_OscConfig+0x508>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d118      	bne.n	8004b0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad8:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <HAL_RCC_OscConfig+0x508>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1d      	ldr	r2, [pc, #116]	; (8004b54 <HAL_RCC_OscConfig+0x508>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ae4:	f7fd fe0a 	bl	80026fc <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aec:	f7fd fe06 	bl	80026fc <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1b2      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004afe:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_RCC_OscConfig+0x508>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d108      	bne.n	8004b24 <HAL_RCC_OscConfig+0x4d8>
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	4a0d      	ldr	r2, [pc, #52]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b22:	e029      	b.n	8004b78 <HAL_RCC_OscConfig+0x52c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b05      	cmp	r3, #5
 8004b2a:	d115      	bne.n	8004b58 <HAL_RCC_OscConfig+0x50c>
 8004b2c:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b3c:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	4a03      	ldr	r2, [pc, #12]	; (8004b50 <HAL_RCC_OscConfig+0x504>)
 8004b44:	f043 0301 	orr.w	r3, r3, #1
 8004b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b4c:	e014      	b.n	8004b78 <HAL_RCC_OscConfig+0x52c>
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40007000 	.word	0x40007000
 8004b58:	4b9a      	ldr	r3, [pc, #616]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	4a99      	ldr	r2, [pc, #612]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b68:	4b96      	ldr	r3, [pc, #600]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	4a95      	ldr	r2, [pc, #596]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004b70:	f023 0304 	bic.w	r3, r3, #4
 8004b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d016      	beq.n	8004bae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fd fdbc 	bl	80026fc <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b88:	f7fd fdb8 	bl	80026fc <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e162      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9e:	4b89      	ldr	r3, [pc, #548]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0ed      	beq.n	8004b88 <HAL_RCC_OscConfig+0x53c>
 8004bac:	e015      	b.n	8004bda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bae:	f7fd fda5 	bl	80026fc <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fd fda1 	bl	80026fc <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e14b      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bcc:	4b7d      	ldr	r3, [pc, #500]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1ed      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bda:	7ffb      	ldrb	r3, [r7, #31]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d105      	bne.n	8004bec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be0:	4b78      	ldr	r3, [pc, #480]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	4a77      	ldr	r2, [pc, #476]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d03c      	beq.n	8004c72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c00:	4b70      	ldr	r3, [pc, #448]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c06:	4a6f      	ldr	r2, [pc, #444]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fd fd74 	bl	80026fc <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c18:	f7fd fd70 	bl	80026fc <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e11c      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c2a:	4b66      	ldr	r3, [pc, #408]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ef      	beq.n	8004c18 <HAL_RCC_OscConfig+0x5cc>
 8004c38:	e01b      	b.n	8004c72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c3a:	4b62      	ldr	r3, [pc, #392]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c40:	4a60      	ldr	r2, [pc, #384]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fd fd57 	bl	80026fc <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c52:	f7fd fd53 	bl	80026fc <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e0ff      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c64:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1ef      	bne.n	8004c52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 80f3 	beq.w	8004e62 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f040 80c9 	bne.w	8004e18 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c86:	4b4f      	ldr	r3, [pc, #316]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f003 0203 	and.w	r2, r3, #3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d12c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d123      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d11b      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d113      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d109      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	085b      	lsrs	r3, r3, #1
 8004cec:	3b01      	subs	r3, #1
 8004cee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d06b      	beq.n	8004dcc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d062      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004cfa:	4b32      	ldr	r3, [pc, #200]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0ac      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d0a:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d16:	f7fd fcf1 	bl	80026fc <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d1e:	f7fd fced 	bl	80026fc <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e099      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d30:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f0      	bne.n	8004d1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d3c:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	4b21      	ldr	r3, [pc, #132]	; (8004dc8 <HAL_RCC_OscConfig+0x77c>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0112      	lsls	r2, r2, #4
 8004d50:	4311      	orrs	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d56:	0212      	lsls	r2, r2, #8
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d5e:	0852      	lsrs	r2, r2, #1
 8004d60:	3a01      	subs	r2, #1
 8004d62:	0552      	lsls	r2, r2, #21
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d6a:	0852      	lsrs	r2, r2, #1
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	0652      	lsls	r2, r2, #25
 8004d70:	4311      	orrs	r1, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d76:	06d2      	lsls	r2, r2, #27
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	4912      	ldr	r1, [pc, #72]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a0f      	ldr	r2, [pc, #60]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4a0c      	ldr	r2, [pc, #48]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d98:	f7fd fcb0 	bl	80026fc <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fd fcac 	bl	80026fc <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e058      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db2:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <HAL_RCC_OscConfig+0x778>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dbe:	e050      	b.n	8004e62 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e04f      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dcc:	4b27      	ldr	r3, [pc, #156]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d144      	bne.n	8004e62 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dd8:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a23      	ldr	r2, [pc, #140]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004de4:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a20      	ldr	r2, [pc, #128]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004df0:	f7fd fc84 	bl	80026fc <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fd fc80 	bl	80026fc <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e02c      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x7ac>
 8004e16:	e024      	b.n	8004e62 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d01f      	beq.n	8004e5e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2a:	f7fd fc67 	bl	80026fc <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fd fc63 	bl	80026fc <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e00f      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	4905      	ldr	r1, [pc, #20]	; (8004e6c <HAL_RCC_OscConfig+0x820>)
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_RCC_OscConfig+0x824>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60cb      	str	r3, [r1, #12]
 8004e5c:	e001      	b.n	8004e62 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	feeefffc 	.word	0xfeeefffc

08004e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0e7      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e88:	4b75      	ldr	r3, [pc, #468]	; (8005060 <HAL_RCC_ClockConfig+0x1ec>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d910      	bls.n	8004eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	4b72      	ldr	r3, [pc, #456]	; (8005060 <HAL_RCC_ClockConfig+0x1ec>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 0207 	bic.w	r2, r3, #7
 8004e9e:	4970      	ldr	r1, [pc, #448]	; (8005060 <HAL_RCC_ClockConfig+0x1ec>)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	4b6e      	ldr	r3, [pc, #440]	; (8005060 <HAL_RCC_ClockConfig+0x1ec>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0cf      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	4b66      	ldr	r3, [pc, #408]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d908      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed4:	4b63      	ldr	r3, [pc, #396]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4960      	ldr	r1, [pc, #384]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d04c      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efa:	4b5a      	ldr	r3, [pc, #360]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d121      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0a6      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d107      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f12:	4b54      	ldr	r3, [pc, #336]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d115      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e09a      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d107      	bne.n	8004f3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f2a:	4b4e      	ldr	r3, [pc, #312]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e08e      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f3a:	4b4a      	ldr	r3, [pc, #296]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e086      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f4a:	4b46      	ldr	r3, [pc, #280]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f023 0203 	bic.w	r2, r3, #3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4943      	ldr	r1, [pc, #268]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5c:	f7fd fbce 	bl	80026fc <HAL_GetTick>
 8004f60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f64:	f7fd fbca 	bl	80026fc <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e06e      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7a:	4b3a      	ldr	r3, [pc, #232]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 020c 	and.w	r2, r3, #12
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d1eb      	bne.n	8004f64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d010      	beq.n	8004fba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	4b31      	ldr	r3, [pc, #196]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d208      	bcs.n	8004fba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	492b      	ldr	r1, [pc, #172]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fba:	4b29      	ldr	r3, [pc, #164]	; (8005060 <HAL_RCC_ClockConfig+0x1ec>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d210      	bcs.n	8004fea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc8:	4b25      	ldr	r3, [pc, #148]	; (8005060 <HAL_RCC_ClockConfig+0x1ec>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f023 0207 	bic.w	r2, r3, #7
 8004fd0:	4923      	ldr	r1, [pc, #140]	; (8005060 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <HAL_RCC_ClockConfig+0x1ec>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e036      	b.n	8005058 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	4918      	ldr	r1, [pc, #96]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8005004:	4313      	orrs	r3, r2
 8005006:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d009      	beq.n	8005028 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005014:	4b13      	ldr	r3, [pc, #76]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4910      	ldr	r1, [pc, #64]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005028:	f000 f824 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <HAL_RCC_ClockConfig+0x1f0>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	490b      	ldr	r1, [pc, #44]	; (8005068 <HAL_RCC_ClockConfig+0x1f4>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
 8005044:	4a09      	ldr	r2, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1f8>)
 8005046:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <HAL_RCC_ClockConfig+0x1fc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fd fb05 	bl	800265c <HAL_InitTick>
 8005052:	4603      	mov	r3, r0
 8005054:	72fb      	strb	r3, [r7, #11]

  return status;
 8005056:	7afb      	ldrb	r3, [r7, #11]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40022000 	.word	0x40022000
 8005064:	40021000 	.word	0x40021000
 8005068:	080076b0 	.word	0x080076b0
 800506c:	20000008 	.word	0x20000008
 8005070:	2000000c 	.word	0x2000000c

08005074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	b089      	sub	sp, #36	; 0x24
 8005078:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005082:	4b3e      	ldr	r3, [pc, #248]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800508c:	4b3b      	ldr	r3, [pc, #236]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x34>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d121      	bne.n	80050e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d11e      	bne.n	80050e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050a8:	4b34      	ldr	r3, [pc, #208]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d107      	bne.n	80050c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 80050b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e005      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050c4:	4b2d      	ldr	r3, [pc, #180]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050d0:	4a2b      	ldr	r2, [pc, #172]	; (8005180 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10d      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050e4:	e00a      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d102      	bne.n	80050f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <HAL_RCC_GetSysClockFreq+0x110>)
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e004      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d101      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050f8:	4b23      	ldr	r3, [pc, #140]	; (8005188 <HAL_RCC_GetSysClockFreq+0x114>)
 80050fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b0c      	cmp	r3, #12
 8005100:	d134      	bne.n	800516c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d003      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0xa6>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d003      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0xac>
 8005118:	e005      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800511a:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <HAL_RCC_GetSysClockFreq+0x110>)
 800511c:	617b      	str	r3, [r7, #20]
      break;
 800511e:	e005      	b.n	800512c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_RCC_GetSysClockFreq+0x114>)
 8005122:	617b      	str	r3, [r7, #20]
      break;
 8005124:	e002      	b.n	800512c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	617b      	str	r3, [r7, #20]
      break;
 800512a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800512c:	4b13      	ldr	r3, [pc, #76]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	3301      	adds	r3, #1
 8005138:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	fb03 f202 	mul.w	r2, r3, r2
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	0e5b      	lsrs	r3, r3, #25
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	3301      	adds	r3, #1
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800516c:	69bb      	ldr	r3, [r7, #24]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3724      	adds	r7, #36	; 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	080076c0 	.word	0x080076c0
 8005184:	00f42400 	.word	0x00f42400
 8005188:	007a1200 	.word	0x007a1200

0800518c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005198:	4b2a      	ldr	r3, [pc, #168]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800519a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051a4:	f7ff f9ee 	bl	8004584 <HAL_PWREx_GetVoltageRange>
 80051a8:	6178      	str	r0, [r7, #20]
 80051aa:	e014      	b.n	80051d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051ac:	4b25      	ldr	r3, [pc, #148]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	4a24      	ldr	r2, [pc, #144]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b6:	6593      	str	r3, [r2, #88]	; 0x58
 80051b8:	4b22      	ldr	r3, [pc, #136]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051c4:	f7ff f9de 	bl	8004584 <HAL_PWREx_GetVoltageRange>
 80051c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051ca:	4b1e      	ldr	r3, [pc, #120]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051dc:	d10b      	bne.n	80051f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b80      	cmp	r3, #128	; 0x80
 80051e2:	d919      	bls.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2ba0      	cmp	r3, #160	; 0xa0
 80051e8:	d902      	bls.n	80051f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051ea:	2302      	movs	r3, #2
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	e013      	b.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051f0:	2301      	movs	r3, #1
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	e010      	b.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d902      	bls.n	8005202 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80051fc:	2303      	movs	r3, #3
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	e00a      	b.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b80      	cmp	r3, #128	; 0x80
 8005206:	d102      	bne.n	800520e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005208:	2302      	movs	r3, #2
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	e004      	b.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b70      	cmp	r3, #112	; 0x70
 8005212:	d101      	bne.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005214:	2301      	movs	r3, #1
 8005216:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f023 0207 	bic.w	r2, r3, #7
 8005220:	4909      	ldr	r1, [pc, #36]	; (8005248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	429a      	cmp	r2, r3
 8005234:	d001      	beq.n	800523a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40021000 	.word	0x40021000
 8005248:	40022000 	.word	0x40022000

0800524c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005254:	2300      	movs	r3, #0
 8005256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005258:	2300      	movs	r3, #0
 800525a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005264:	2b00      	cmp	r3, #0
 8005266:	d031      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005270:	d01a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005276:	d814      	bhi.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800527c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005280:	d10f      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005282:	4b5d      	ldr	r3, [pc, #372]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	4a5c      	ldr	r2, [pc, #368]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800528e:	e00c      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3304      	adds	r3, #4
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f9ce 	bl	8005638 <RCCEx_PLLSAI1_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	74fb      	strb	r3, [r7, #19]
      break;
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80052a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052b0:	4b51      	ldr	r3, [pc, #324]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	494e      	ldr	r1, [pc, #312]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052c6:	e001      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 809e 	beq.w	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052de:	4b46      	ldr	r3, [pc, #280]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f4:	4b40      	ldr	r3, [pc, #256]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	4a3f      	ldr	r2, [pc, #252]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005300:	4b3d      	ldr	r3, [pc, #244]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530c:	2301      	movs	r3, #1
 800530e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005310:	4b3a      	ldr	r3, [pc, #232]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a39      	ldr	r2, [pc, #228]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800531c:	f7fd f9ee 	bl	80026fc <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005322:	e009      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005324:	f7fd f9ea 	bl	80026fc <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d902      	bls.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	74fb      	strb	r3, [r7, #19]
        break;
 8005336:	e005      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005338:	4b30      	ldr	r3, [pc, #192]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ef      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d15a      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800534a:	4b2b      	ldr	r3, [pc, #172]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005354:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01e      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	429a      	cmp	r2, r3
 8005364:	d019      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005366:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005370:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005372:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005378:	4a1f      	ldr	r2, [pc, #124]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800537a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800537e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005382:	4b1d      	ldr	r3, [pc, #116]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800538a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005392:	4a19      	ldr	r2, [pc, #100]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d016      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fd f9aa 	bl	80026fc <HAL_GetTick>
 80053a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053aa:	e00b      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ac:	f7fd f9a6 	bl	80026fc <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d902      	bls.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	74fb      	strb	r3, [r7, #19]
            break;
 80053c2:	e006      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0ec      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	4904      	ldr	r1, [pc, #16]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053ee:	e009      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053f0:	7cfb      	ldrb	r3, [r7, #19]
 80053f2:	74bb      	strb	r3, [r7, #18]
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80053f6:	bf00      	nop
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005404:	7c7b      	ldrb	r3, [r7, #17]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d105      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540a:	4b8a      	ldr	r3, [pc, #552]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	4a89      	ldr	r2, [pc, #548]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005414:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005422:	4b84      	ldr	r3, [pc, #528]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f023 0203 	bic.w	r2, r3, #3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	4980      	ldr	r1, [pc, #512]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005444:	4b7b      	ldr	r3, [pc, #492]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 020c 	bic.w	r2, r3, #12
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	4978      	ldr	r1, [pc, #480]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005466:	4b73      	ldr	r3, [pc, #460]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	496f      	ldr	r1, [pc, #444]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005488:	4b6a      	ldr	r3, [pc, #424]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	4967      	ldr	r1, [pc, #412]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054aa:	4b62      	ldr	r3, [pc, #392]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	495e      	ldr	r1, [pc, #376]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054cc:	4b59      	ldr	r3, [pc, #356]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	4956      	ldr	r1, [pc, #344]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ee:	4b51      	ldr	r3, [pc, #324]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	494d      	ldr	r1, [pc, #308]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d028      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005510:	4b48      	ldr	r3, [pc, #288]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	4945      	ldr	r1, [pc, #276]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552e:	d106      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005530:	4b40      	ldr	r3, [pc, #256]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a3f      	ldr	r2, [pc, #252]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800553a:	60d3      	str	r3, [r2, #12]
 800553c:	e011      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005546:	d10c      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	2101      	movs	r1, #1
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f872 	bl	8005638 <RCCEx_PLLSAI1_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800555e:	7cfb      	ldrb	r3, [r7, #19]
 8005560:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d028      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800556e:	4b31      	ldr	r3, [pc, #196]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	492d      	ldr	r1, [pc, #180]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558c:	d106      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800558e:	4b29      	ldr	r3, [pc, #164]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	4a28      	ldr	r2, [pc, #160]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005598:	60d3      	str	r3, [r2, #12]
 800559a:	e011      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	2101      	movs	r1, #1
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f843 	bl	8005638 <RCCEx_PLLSAI1_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b6:	7cfb      	ldrb	r3, [r7, #19]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01c      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055da:	4916      	ldr	r1, [pc, #88]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ea:	d10c      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	2102      	movs	r1, #2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f820 	bl	8005638 <RCCEx_PLLSAI1_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005620:	4904      	ldr	r1, [pc, #16]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005628:	7cbb      	ldrb	r3, [r7, #18]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000

08005638 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005646:	4b74      	ldr	r3, [pc, #464]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d018      	beq.n	8005684 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005652:	4b71      	ldr	r3, [pc, #452]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0203 	and.w	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d10d      	bne.n	800567e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
       ||
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800566a:	4b6b      	ldr	r3, [pc, #428]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
       ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d047      	beq.n	800570e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
 8005682:	e044      	b.n	800570e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d018      	beq.n	80056be <RCCEx_PLLSAI1_Config+0x86>
 800568c:	2b03      	cmp	r3, #3
 800568e:	d825      	bhi.n	80056dc <RCCEx_PLLSAI1_Config+0xa4>
 8005690:	2b01      	cmp	r3, #1
 8005692:	d002      	beq.n	800569a <RCCEx_PLLSAI1_Config+0x62>
 8005694:	2b02      	cmp	r3, #2
 8005696:	d009      	beq.n	80056ac <RCCEx_PLLSAI1_Config+0x74>
 8005698:	e020      	b.n	80056dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800569a:	4b5f      	ldr	r3, [pc, #380]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d11d      	bne.n	80056e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056aa:	e01a      	b.n	80056e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056ac:	4b5a      	ldr	r3, [pc, #360]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d116      	bne.n	80056e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056bc:	e013      	b.n	80056e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056be:	4b56      	ldr	r3, [pc, #344]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056ca:	4b53      	ldr	r3, [pc, #332]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056da:	e006      	b.n	80056ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e004      	b.n	80056ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056f2:	4b49      	ldr	r3, [pc, #292]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	3b01      	subs	r3, #1
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	430b      	orrs	r3, r1
 8005708:	4943      	ldr	r1, [pc, #268]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800570a:	4313      	orrs	r3, r2
 800570c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d17c      	bne.n	800580e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005714:	4b40      	ldr	r3, [pc, #256]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a3f      	ldr	r2, [pc, #252]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800571a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800571e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005720:	f7fc ffec 	bl	80026fc <HAL_GetTick>
 8005724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005726:	e009      	b.n	800573c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005728:	f7fc ffe8 	bl	80026fc <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d902      	bls.n	800573c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	73fb      	strb	r3, [r7, #15]
        break;
 800573a:	e005      	b.n	8005748 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800573c:	4b36      	ldr	r3, [pc, #216]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1ef      	bne.n	8005728 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d15f      	bne.n	800580e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d110      	bne.n	8005776 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005754:	4b30      	ldr	r3, [pc, #192]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800575c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6892      	ldr	r2, [r2, #8]
 8005764:	0211      	lsls	r1, r2, #8
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68d2      	ldr	r2, [r2, #12]
 800576a:	06d2      	lsls	r2, r2, #27
 800576c:	430a      	orrs	r2, r1
 800576e:	492a      	ldr	r1, [pc, #168]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005770:	4313      	orrs	r3, r2
 8005772:	610b      	str	r3, [r1, #16]
 8005774:	e027      	b.n	80057c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d112      	bne.n	80057a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800577c:	4b26      	ldr	r3, [pc, #152]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6892      	ldr	r2, [r2, #8]
 800578c:	0211      	lsls	r1, r2, #8
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6912      	ldr	r2, [r2, #16]
 8005792:	0852      	lsrs	r2, r2, #1
 8005794:	3a01      	subs	r2, #1
 8005796:	0552      	lsls	r2, r2, #21
 8005798:	430a      	orrs	r2, r1
 800579a:	491f      	ldr	r1, [pc, #124]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800579c:	4313      	orrs	r3, r2
 800579e:	610b      	str	r3, [r1, #16]
 80057a0:	e011      	b.n	80057c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057a2:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6892      	ldr	r2, [r2, #8]
 80057b2:	0211      	lsls	r1, r2, #8
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6952      	ldr	r2, [r2, #20]
 80057b8:	0852      	lsrs	r2, r2, #1
 80057ba:	3a01      	subs	r2, #1
 80057bc:	0652      	lsls	r2, r2, #25
 80057be:	430a      	orrs	r2, r1
 80057c0:	4915      	ldr	r1, [pc, #84]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057c6:	4b14      	ldr	r3, [pc, #80]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a13      	ldr	r2, [pc, #76]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fc ff93 	bl	80026fc <HAL_GetTick>
 80057d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057d8:	e009      	b.n	80057ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057da:	f7fc ff8f 	bl	80026fc <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d902      	bls.n	80057ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	73fb      	strb	r3, [r7, #15]
          break;
 80057ec:	e005      	b.n	80057fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0ef      	beq.n	80057da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	4903      	ldr	r1, [pc, #12]	; (8005818 <RCCEx_PLLSAI1_Config+0x1e0>)
 800580a:	4313      	orrs	r3, r2
 800580c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000

0800581c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e049      	b.n	80058c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fe18 	bl	8002478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f000 fab2 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d001      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e03b      	b.n	800595c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a19      	ldr	r2, [pc, #100]	; (8005968 <HAL_TIM_Base_Start_IT+0x9c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_TIM_Base_Start_IT+0x4e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590e:	d004      	beq.n	800591a <HAL_TIM_Base_Start_IT+0x4e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a15      	ldr	r2, [pc, #84]	; (800596c <HAL_TIM_Base_Start_IT+0xa0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d115      	bne.n	8005946 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	4b13      	ldr	r3, [pc, #76]	; (8005970 <HAL_TIM_Base_Start_IT+0xa4>)
 8005922:	4013      	ands	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b06      	cmp	r3, #6
 800592a:	d015      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x8c>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005932:	d011      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005944:	e008      	b.n	8005958 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e000      	b.n	800595a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40012c00 	.word	0x40012c00
 800596c:	40014000 	.word	0x40014000
 8005970:	00010007 	.word	0x00010007

08005974 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	f241 1311 	movw	r3, #4369	; 0x1111
 8005996:	4013      	ands	r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10f      	bne.n	80059bc <HAL_TIM_Base_Stop_IT+0x48>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6a1a      	ldr	r2, [r3, #32]
 80059a2:	f240 4344 	movw	r3, #1092	; 0x444
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_Base_Stop_IT+0x48>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0201 	bic.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d020      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01b      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f06f 0202 	mvn.w	r2, #2
 8005a06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f9b2 	bl	8005d86 <HAL_TIM_IC_CaptureCallback>
 8005a22:	e005      	b.n	8005a30 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f9a4 	bl	8005d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f9b5 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d020      	beq.n	8005a82 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01b      	beq.n	8005a82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f06f 0204 	mvn.w	r2, #4
 8005a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f98c 	bl	8005d86 <HAL_TIM_IC_CaptureCallback>
 8005a6e:	e005      	b.n	8005a7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f97e 	bl	8005d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f98f 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d020      	beq.n	8005ace <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01b      	beq.n	8005ace <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f06f 0208 	mvn.w	r2, #8
 8005a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f966 	bl	8005d86 <HAL_TIM_IC_CaptureCallback>
 8005aba:	e005      	b.n	8005ac8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f958 	bl	8005d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f969 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01b      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f06f 0210 	mvn.w	r2, #16
 8005aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2208      	movs	r2, #8
 8005af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f940 	bl	8005d86 <HAL_TIM_IC_CaptureCallback>
 8005b06:	e005      	b.n	8005b14 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f932 	bl	8005d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f943 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00c      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f06f 0201 	mvn.w	r2, #1
 8005b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fc f85d 	bl	8001bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00c      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 faa6 	bl	80060b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa9e 	bl	80060cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f8fd 	bl	8005dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0220 	mvn.w	r2, #32
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fa66 	bl	80060a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_TIM_ConfigClockSource+0x1c>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e0b6      	b.n	8005d6a <HAL_TIM_ConfigClockSource+0x18a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c38:	d03e      	beq.n	8005cb8 <HAL_TIM_ConfigClockSource+0xd8>
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3e:	f200 8087 	bhi.w	8005d50 <HAL_TIM_ConfigClockSource+0x170>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c46:	f000 8086 	beq.w	8005d56 <HAL_TIM_ConfigClockSource+0x176>
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4e:	d87f      	bhi.n	8005d50 <HAL_TIM_ConfigClockSource+0x170>
 8005c50:	2b70      	cmp	r3, #112	; 0x70
 8005c52:	d01a      	beq.n	8005c8a <HAL_TIM_ConfigClockSource+0xaa>
 8005c54:	2b70      	cmp	r3, #112	; 0x70
 8005c56:	d87b      	bhi.n	8005d50 <HAL_TIM_ConfigClockSource+0x170>
 8005c58:	2b60      	cmp	r3, #96	; 0x60
 8005c5a:	d050      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x11e>
 8005c5c:	2b60      	cmp	r3, #96	; 0x60
 8005c5e:	d877      	bhi.n	8005d50 <HAL_TIM_ConfigClockSource+0x170>
 8005c60:	2b50      	cmp	r3, #80	; 0x50
 8005c62:	d03c      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0xfe>
 8005c64:	2b50      	cmp	r3, #80	; 0x50
 8005c66:	d873      	bhi.n	8005d50 <HAL_TIM_ConfigClockSource+0x170>
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d058      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x13e>
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d86f      	bhi.n	8005d50 <HAL_TIM_ConfigClockSource+0x170>
 8005c70:	2b30      	cmp	r3, #48	; 0x30
 8005c72:	d064      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x15e>
 8005c74:	2b30      	cmp	r3, #48	; 0x30
 8005c76:	d86b      	bhi.n	8005d50 <HAL_TIM_ConfigClockSource+0x170>
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d060      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x15e>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d867      	bhi.n	8005d50 <HAL_TIM_ConfigClockSource+0x170>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d05c      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x15e>
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d05a      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x15e>
 8005c88:	e062      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c9a:	f000 f97d 	bl	8005f98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	609a      	str	r2, [r3, #8]
      break;
 8005cb6:	e04f      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc8:	f000 f966 	bl	8005f98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cda:	609a      	str	r2, [r3, #8]
      break;
 8005cdc:	e03c      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cea:	461a      	mov	r2, r3
 8005cec:	f000 f8da 	bl	8005ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2150      	movs	r1, #80	; 0x50
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f933 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005cfc:	e02c      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f000 f8f9 	bl	8005f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2160      	movs	r1, #96	; 0x60
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f923 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005d1c:	e01c      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f000 f8ba 	bl	8005ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2140      	movs	r1, #64	; 0x40
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f913 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005d3c:	e00c      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f000 f90a 	bl	8005f62 <TIM_ITRx_SetConfig>
      break;
 8005d4e:	e003      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
      break;
 8005d54:	e000      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a30      	ldr	r2, [pc, #192]	; (8005e98 <TIM_Base_SetConfig+0xd4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_Base_SetConfig+0x20>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d108      	bne.n	8005df6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <TIM_Base_SetConfig+0xd4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_Base_SetConfig+0x52>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d007      	beq.n	8005e16 <TIM_Base_SetConfig+0x52>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <TIM_Base_SetConfig+0xd8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_Base_SetConfig+0x52>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <TIM_Base_SetConfig+0xdc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <TIM_Base_SetConfig+0xd4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_Base_SetConfig+0xa0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a11      	ldr	r2, [pc, #68]	; (8005e9c <TIM_Base_SetConfig+0xd8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_Base_SetConfig+0xa0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <TIM_Base_SetConfig+0xdc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d103      	bne.n	8005e6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d105      	bne.n	8005e8a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f023 0201 	bic.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40012c00 	.word	0x40012c00
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400

08005ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0201 	bic.w	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f023 030a 	bic.w	r3, r3, #10
 8005ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b087      	sub	sp, #28
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f023 0210 	bic.w	r2, r3, #16
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f043 0307 	orr.w	r3, r3, #7
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	609a      	str	r2, [r3, #8]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	021a      	lsls	r2, r3, #8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	609a      	str	r2, [r3, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e04f      	b.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a21      	ldr	r2, [pc, #132]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d108      	bne.n	800602c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006020:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a14      	ldr	r2, [pc, #80]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d004      	beq.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a10      	ldr	r2, [pc, #64]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d10c      	bne.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40014000 	.word	0x40014000

080060a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <__errno>:
 80060f0:	4b01      	ldr	r3, [pc, #4]	; (80060f8 <__errno+0x8>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000060 	.word	0x20000060

080060fc <__libc_init_array>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4d0d      	ldr	r5, [pc, #52]	; (8006134 <__libc_init_array+0x38>)
 8006100:	4c0d      	ldr	r4, [pc, #52]	; (8006138 <__libc_init_array+0x3c>)
 8006102:	1b64      	subs	r4, r4, r5
 8006104:	10a4      	asrs	r4, r4, #2
 8006106:	2600      	movs	r6, #0
 8006108:	42a6      	cmp	r6, r4
 800610a:	d109      	bne.n	8006120 <__libc_init_array+0x24>
 800610c:	4d0b      	ldr	r5, [pc, #44]	; (800613c <__libc_init_array+0x40>)
 800610e:	4c0c      	ldr	r4, [pc, #48]	; (8006140 <__libc_init_array+0x44>)
 8006110:	f001 fac2 	bl	8007698 <_init>
 8006114:	1b64      	subs	r4, r4, r5
 8006116:	10a4      	asrs	r4, r4, #2
 8006118:	2600      	movs	r6, #0
 800611a:	42a6      	cmp	r6, r4
 800611c:	d105      	bne.n	800612a <__libc_init_array+0x2e>
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	f855 3b04 	ldr.w	r3, [r5], #4
 8006124:	4798      	blx	r3
 8006126:	3601      	adds	r6, #1
 8006128:	e7ee      	b.n	8006108 <__libc_init_array+0xc>
 800612a:	f855 3b04 	ldr.w	r3, [r5], #4
 800612e:	4798      	blx	r3
 8006130:	3601      	adds	r6, #1
 8006132:	e7f2      	b.n	800611a <__libc_init_array+0x1e>
 8006134:	080078f8 	.word	0x080078f8
 8006138:	080078f8 	.word	0x080078f8
 800613c:	080078f8 	.word	0x080078f8
 8006140:	080078fc 	.word	0x080078fc
 8006144:	00000000 	.word	0x00000000

08006148 <exp>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	ed2d 8b02 	vpush	{d8}
 800614e:	ec55 4b10 	vmov	r4, r5, d0
 8006152:	f000 fa8d 	bl	8006670 <__ieee754_exp>
 8006156:	eeb0 8a40 	vmov.f32	s16, s0
 800615a:	eef0 8a60 	vmov.f32	s17, s1
 800615e:	ec45 4b10 	vmov	d0, r4, r5
 8006162:	f000 f86d 	bl	8006240 <finite>
 8006166:	b168      	cbz	r0, 8006184 <exp+0x3c>
 8006168:	a317      	add	r3, pc, #92	; (adr r3, 80061c8 <exp+0x80>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	4620      	mov	r0, r4
 8006170:	4629      	mov	r1, r5
 8006172:	f7fa fc79 	bl	8000a68 <__aeabi_dcmpgt>
 8006176:	b160      	cbz	r0, 8006192 <exp+0x4a>
 8006178:	f7ff ffba 	bl	80060f0 <__errno>
 800617c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80061b8 <exp+0x70>
 8006180:	2322      	movs	r3, #34	; 0x22
 8006182:	6003      	str	r3, [r0, #0]
 8006184:	eeb0 0a48 	vmov.f32	s0, s16
 8006188:	eef0 0a68 	vmov.f32	s1, s17
 800618c:	ecbd 8b02 	vpop	{d8}
 8006190:	bd38      	pop	{r3, r4, r5, pc}
 8006192:	a30f      	add	r3, pc, #60	; (adr r3, 80061d0 <exp+0x88>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	4620      	mov	r0, r4
 800619a:	4629      	mov	r1, r5
 800619c:	f7fa fc46 	bl	8000a2c <__aeabi_dcmplt>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d0ef      	beq.n	8006184 <exp+0x3c>
 80061a4:	f7ff ffa4 	bl	80060f0 <__errno>
 80061a8:	2322      	movs	r3, #34	; 0x22
 80061aa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80061c0 <exp+0x78>
 80061ae:	6003      	str	r3, [r0, #0]
 80061b0:	e7e8      	b.n	8006184 <exp+0x3c>
 80061b2:	bf00      	nop
 80061b4:	f3af 8000 	nop.w
 80061b8:	00000000 	.word	0x00000000
 80061bc:	7ff00000 	.word	0x7ff00000
	...
 80061c8:	fefa39ef 	.word	0xfefa39ef
 80061cc:	40862e42 	.word	0x40862e42
 80061d0:	d52d3051 	.word	0xd52d3051
 80061d4:	c0874910 	.word	0xc0874910

080061d8 <tan>:
 80061d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061da:	ec53 2b10 	vmov	r2, r3, d0
 80061de:	4816      	ldr	r0, [pc, #88]	; (8006238 <tan+0x60>)
 80061e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061e4:	4281      	cmp	r1, r0
 80061e6:	dc07      	bgt.n	80061f8 <tan+0x20>
 80061e8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006230 <tan+0x58>
 80061ec:	2001      	movs	r0, #1
 80061ee:	b005      	add	sp, #20
 80061f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f4:	f000 b830 	b.w	8006258 <__kernel_tan>
 80061f8:	4810      	ldr	r0, [pc, #64]	; (800623c <tan+0x64>)
 80061fa:	4281      	cmp	r1, r0
 80061fc:	dd09      	ble.n	8006212 <tan+0x3a>
 80061fe:	ee10 0a10 	vmov	r0, s0
 8006202:	4619      	mov	r1, r3
 8006204:	f7f9 ffe8 	bl	80001d8 <__aeabi_dsub>
 8006208:	ec41 0b10 	vmov	d0, r0, r1
 800620c:	b005      	add	sp, #20
 800620e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006212:	4668      	mov	r0, sp
 8006214:	f000 fbb0 	bl	8006978 <__ieee754_rem_pio2>
 8006218:	0040      	lsls	r0, r0, #1
 800621a:	f000 0002 	and.w	r0, r0, #2
 800621e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006222:	ed9d 0b00 	vldr	d0, [sp]
 8006226:	f1c0 0001 	rsb	r0, r0, #1
 800622a:	f000 f815 	bl	8006258 <__kernel_tan>
 800622e:	e7ed      	b.n	800620c <tan+0x34>
	...
 8006238:	3fe921fb 	.word	0x3fe921fb
 800623c:	7fefffff 	.word	0x7fefffff

08006240 <finite>:
 8006240:	b082      	sub	sp, #8
 8006242:	ed8d 0b00 	vstr	d0, [sp]
 8006246:	9801      	ldr	r0, [sp, #4]
 8006248:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800624c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006250:	0fc0      	lsrs	r0, r0, #31
 8006252:	b002      	add	sp, #8
 8006254:	4770      	bx	lr
	...

08006258 <__kernel_tan>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	ed2d 8b06 	vpush	{d8-d10}
 8006260:	ec5b ab10 	vmov	sl, fp, d0
 8006264:	4be0      	ldr	r3, [pc, #896]	; (80065e8 <__kernel_tan+0x390>)
 8006266:	b083      	sub	sp, #12
 8006268:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800626c:	429f      	cmp	r7, r3
 800626e:	ec59 8b11 	vmov	r8, r9, d1
 8006272:	4606      	mov	r6, r0
 8006274:	f8cd b000 	str.w	fp, [sp]
 8006278:	dc61      	bgt.n	800633e <__kernel_tan+0xe6>
 800627a:	ee10 0a10 	vmov	r0, s0
 800627e:	4659      	mov	r1, fp
 8006280:	f7fa fbfc 	bl	8000a7c <__aeabi_d2iz>
 8006284:	4605      	mov	r5, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	f040 8083 	bne.w	8006392 <__kernel_tan+0x13a>
 800628c:	1c73      	adds	r3, r6, #1
 800628e:	4652      	mov	r2, sl
 8006290:	4313      	orrs	r3, r2
 8006292:	433b      	orrs	r3, r7
 8006294:	d112      	bne.n	80062bc <__kernel_tan+0x64>
 8006296:	ec4b ab10 	vmov	d0, sl, fp
 800629a:	f000 fd73 	bl	8006d84 <fabs>
 800629e:	49d3      	ldr	r1, [pc, #844]	; (80065ec <__kernel_tan+0x394>)
 80062a0:	ec53 2b10 	vmov	r2, r3, d0
 80062a4:	2000      	movs	r0, #0
 80062a6:	f7fa fa79 	bl	800079c <__aeabi_ddiv>
 80062aa:	4682      	mov	sl, r0
 80062ac:	468b      	mov	fp, r1
 80062ae:	ec4b ab10 	vmov	d0, sl, fp
 80062b2:	b003      	add	sp, #12
 80062b4:	ecbd 8b06 	vpop	{d8-d10}
 80062b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062bc:	2e01      	cmp	r6, #1
 80062be:	d0f6      	beq.n	80062ae <__kernel_tan+0x56>
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	4650      	mov	r0, sl
 80062c6:	4659      	mov	r1, fp
 80062c8:	f7f9 ff88 	bl	80001dc <__adddf3>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	460f      	mov	r7, r1
 80062d2:	2000      	movs	r0, #0
 80062d4:	49c6      	ldr	r1, [pc, #792]	; (80065f0 <__kernel_tan+0x398>)
 80062d6:	f7fa fa61 	bl	800079c <__aeabi_ddiv>
 80062da:	e9cd 0100 	strd	r0, r1, [sp]
 80062de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062e2:	462e      	mov	r6, r5
 80062e4:	4652      	mov	r2, sl
 80062e6:	462c      	mov	r4, r5
 80062e8:	4630      	mov	r0, r6
 80062ea:	461d      	mov	r5, r3
 80062ec:	4639      	mov	r1, r7
 80062ee:	465b      	mov	r3, fp
 80062f0:	f7f9 ff72 	bl	80001d8 <__aeabi_dsub>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4640      	mov	r0, r8
 80062fa:	4649      	mov	r1, r9
 80062fc:	f7f9 ff6c 	bl	80001d8 <__aeabi_dsub>
 8006300:	4632      	mov	r2, r6
 8006302:	462b      	mov	r3, r5
 8006304:	f7fa f920 	bl	8000548 <__aeabi_dmul>
 8006308:	4632      	mov	r2, r6
 800630a:	4680      	mov	r8, r0
 800630c:	4689      	mov	r9, r1
 800630e:	462b      	mov	r3, r5
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa f918 	bl	8000548 <__aeabi_dmul>
 8006318:	4bb4      	ldr	r3, [pc, #720]	; (80065ec <__kernel_tan+0x394>)
 800631a:	2200      	movs	r2, #0
 800631c:	f7f9 ff5e 	bl	80001dc <__adddf3>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4640      	mov	r0, r8
 8006326:	4649      	mov	r1, r9
 8006328:	f7f9 ff58 	bl	80001dc <__adddf3>
 800632c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006330:	f7fa f90a 	bl	8000548 <__aeabi_dmul>
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	f7f9 ff50 	bl	80001dc <__adddf3>
 800633c:	e7b5      	b.n	80062aa <__kernel_tan+0x52>
 800633e:	4bad      	ldr	r3, [pc, #692]	; (80065f4 <__kernel_tan+0x39c>)
 8006340:	429f      	cmp	r7, r3
 8006342:	dd26      	ble.n	8006392 <__kernel_tan+0x13a>
 8006344:	9b00      	ldr	r3, [sp, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	da09      	bge.n	800635e <__kernel_tan+0x106>
 800634a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800634e:	469b      	mov	fp, r3
 8006350:	ee10 aa10 	vmov	sl, s0
 8006354:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006358:	ee11 8a10 	vmov	r8, s2
 800635c:	4699      	mov	r9, r3
 800635e:	4652      	mov	r2, sl
 8006360:	465b      	mov	r3, fp
 8006362:	a183      	add	r1, pc, #524	; (adr r1, 8006570 <__kernel_tan+0x318>)
 8006364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006368:	f7f9 ff36 	bl	80001d8 <__aeabi_dsub>
 800636c:	4642      	mov	r2, r8
 800636e:	464b      	mov	r3, r9
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	a180      	add	r1, pc, #512	; (adr r1, 8006578 <__kernel_tan+0x320>)
 8006376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800637a:	f7f9 ff2d 	bl	80001d8 <__aeabi_dsub>
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	f7f9 ff2b 	bl	80001dc <__adddf3>
 8006386:	f04f 0800 	mov.w	r8, #0
 800638a:	4682      	mov	sl, r0
 800638c:	468b      	mov	fp, r1
 800638e:	f04f 0900 	mov.w	r9, #0
 8006392:	4652      	mov	r2, sl
 8006394:	465b      	mov	r3, fp
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	f7fa f8d5 	bl	8000548 <__aeabi_dmul>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	ec43 2b18 	vmov	d8, r2, r3
 80063a6:	f7fa f8cf 	bl	8000548 <__aeabi_dmul>
 80063aa:	ec53 2b18 	vmov	r2, r3, d8
 80063ae:	4604      	mov	r4, r0
 80063b0:	460d      	mov	r5, r1
 80063b2:	4650      	mov	r0, sl
 80063b4:	4659      	mov	r1, fp
 80063b6:	f7fa f8c7 	bl	8000548 <__aeabi_dmul>
 80063ba:	a371      	add	r3, pc, #452	; (adr r3, 8006580 <__kernel_tan+0x328>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	ec41 0b19 	vmov	d9, r0, r1
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f7fa f8be 	bl	8000548 <__aeabi_dmul>
 80063cc:	a36e      	add	r3, pc, #440	; (adr r3, 8006588 <__kernel_tan+0x330>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f7f9 ff03 	bl	80001dc <__adddf3>
 80063d6:	4622      	mov	r2, r4
 80063d8:	462b      	mov	r3, r5
 80063da:	f7fa f8b5 	bl	8000548 <__aeabi_dmul>
 80063de:	a36c      	add	r3, pc, #432	; (adr r3, 8006590 <__kernel_tan+0x338>)
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f7f9 fefa 	bl	80001dc <__adddf3>
 80063e8:	4622      	mov	r2, r4
 80063ea:	462b      	mov	r3, r5
 80063ec:	f7fa f8ac 	bl	8000548 <__aeabi_dmul>
 80063f0:	a369      	add	r3, pc, #420	; (adr r3, 8006598 <__kernel_tan+0x340>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f7f9 fef1 	bl	80001dc <__adddf3>
 80063fa:	4622      	mov	r2, r4
 80063fc:	462b      	mov	r3, r5
 80063fe:	f7fa f8a3 	bl	8000548 <__aeabi_dmul>
 8006402:	a367      	add	r3, pc, #412	; (adr r3, 80065a0 <__kernel_tan+0x348>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7f9 fee8 	bl	80001dc <__adddf3>
 800640c:	4622      	mov	r2, r4
 800640e:	462b      	mov	r3, r5
 8006410:	f7fa f89a 	bl	8000548 <__aeabi_dmul>
 8006414:	a364      	add	r3, pc, #400	; (adr r3, 80065a8 <__kernel_tan+0x350>)
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f7f9 fedf 	bl	80001dc <__adddf3>
 800641e:	ec53 2b18 	vmov	r2, r3, d8
 8006422:	f7fa f891 	bl	8000548 <__aeabi_dmul>
 8006426:	a362      	add	r3, pc, #392	; (adr r3, 80065b0 <__kernel_tan+0x358>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	ec41 0b1a 	vmov	d10, r0, r1
 8006430:	4620      	mov	r0, r4
 8006432:	4629      	mov	r1, r5
 8006434:	f7fa f888 	bl	8000548 <__aeabi_dmul>
 8006438:	a35f      	add	r3, pc, #380	; (adr r3, 80065b8 <__kernel_tan+0x360>)
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f7f9 fecd 	bl	80001dc <__adddf3>
 8006442:	4622      	mov	r2, r4
 8006444:	462b      	mov	r3, r5
 8006446:	f7fa f87f 	bl	8000548 <__aeabi_dmul>
 800644a:	a35d      	add	r3, pc, #372	; (adr r3, 80065c0 <__kernel_tan+0x368>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7f9 fec4 	bl	80001dc <__adddf3>
 8006454:	4622      	mov	r2, r4
 8006456:	462b      	mov	r3, r5
 8006458:	f7fa f876 	bl	8000548 <__aeabi_dmul>
 800645c:	a35a      	add	r3, pc, #360	; (adr r3, 80065c8 <__kernel_tan+0x370>)
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	f7f9 febb 	bl	80001dc <__adddf3>
 8006466:	4622      	mov	r2, r4
 8006468:	462b      	mov	r3, r5
 800646a:	f7fa f86d 	bl	8000548 <__aeabi_dmul>
 800646e:	a358      	add	r3, pc, #352	; (adr r3, 80065d0 <__kernel_tan+0x378>)
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f7f9 feb2 	bl	80001dc <__adddf3>
 8006478:	4622      	mov	r2, r4
 800647a:	462b      	mov	r3, r5
 800647c:	f7fa f864 	bl	8000548 <__aeabi_dmul>
 8006480:	a355      	add	r3, pc, #340	; (adr r3, 80065d8 <__kernel_tan+0x380>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7f9 fea9 	bl	80001dc <__adddf3>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	ec51 0b1a 	vmov	r0, r1, d10
 8006492:	f7f9 fea3 	bl	80001dc <__adddf3>
 8006496:	ec53 2b19 	vmov	r2, r3, d9
 800649a:	f7fa f855 	bl	8000548 <__aeabi_dmul>
 800649e:	4642      	mov	r2, r8
 80064a0:	464b      	mov	r3, r9
 80064a2:	f7f9 fe9b 	bl	80001dc <__adddf3>
 80064a6:	ec53 2b18 	vmov	r2, r3, d8
 80064aa:	f7fa f84d 	bl	8000548 <__aeabi_dmul>
 80064ae:	4642      	mov	r2, r8
 80064b0:	464b      	mov	r3, r9
 80064b2:	f7f9 fe93 	bl	80001dc <__adddf3>
 80064b6:	a34a      	add	r3, pc, #296	; (adr r3, 80065e0 <__kernel_tan+0x388>)
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	4604      	mov	r4, r0
 80064be:	460d      	mov	r5, r1
 80064c0:	ec51 0b19 	vmov	r0, r1, d9
 80064c4:	f7fa f840 	bl	8000548 <__aeabi_dmul>
 80064c8:	4622      	mov	r2, r4
 80064ca:	462b      	mov	r3, r5
 80064cc:	f7f9 fe86 	bl	80001dc <__adddf3>
 80064d0:	460b      	mov	r3, r1
 80064d2:	ec41 0b18 	vmov	d8, r0, r1
 80064d6:	4602      	mov	r2, r0
 80064d8:	4659      	mov	r1, fp
 80064da:	4650      	mov	r0, sl
 80064dc:	f7f9 fe7e 	bl	80001dc <__adddf3>
 80064e0:	4b44      	ldr	r3, [pc, #272]	; (80065f4 <__kernel_tan+0x39c>)
 80064e2:	429f      	cmp	r7, r3
 80064e4:	4604      	mov	r4, r0
 80064e6:	460d      	mov	r5, r1
 80064e8:	f340 8086 	ble.w	80065f8 <__kernel_tan+0x3a0>
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7f9 ffc1 	bl	8000474 <__aeabi_i2d>
 80064f2:	4622      	mov	r2, r4
 80064f4:	4680      	mov	r8, r0
 80064f6:	4689      	mov	r9, r1
 80064f8:	462b      	mov	r3, r5
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	f7fa f823 	bl	8000548 <__aeabi_dmul>
 8006502:	4642      	mov	r2, r8
 8006504:	4606      	mov	r6, r0
 8006506:	460f      	mov	r7, r1
 8006508:	464b      	mov	r3, r9
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	f7f9 fe65 	bl	80001dc <__adddf3>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7fa f93f 	bl	800079c <__aeabi_ddiv>
 800651e:	ec53 2b18 	vmov	r2, r3, d8
 8006522:	f7f9 fe59 	bl	80001d8 <__aeabi_dsub>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4650      	mov	r0, sl
 800652c:	4659      	mov	r1, fp
 800652e:	f7f9 fe53 	bl	80001d8 <__aeabi_dsub>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	f7f9 fe51 	bl	80001dc <__adddf3>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7f9 fe49 	bl	80001d8 <__aeabi_dsub>
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800654c:	f00a 0a02 	and.w	sl, sl, #2
 8006550:	4604      	mov	r4, r0
 8006552:	f1ca 0001 	rsb	r0, sl, #1
 8006556:	460d      	mov	r5, r1
 8006558:	f7f9 ff8c 	bl	8000474 <__aeabi_i2d>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4620      	mov	r0, r4
 8006562:	4629      	mov	r1, r5
 8006564:	f7f9 fff0 	bl	8000548 <__aeabi_dmul>
 8006568:	e69f      	b.n	80062aa <__kernel_tan+0x52>
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w
 8006570:	54442d18 	.word	0x54442d18
 8006574:	3fe921fb 	.word	0x3fe921fb
 8006578:	33145c07 	.word	0x33145c07
 800657c:	3c81a626 	.word	0x3c81a626
 8006580:	74bf7ad4 	.word	0x74bf7ad4
 8006584:	3efb2a70 	.word	0x3efb2a70
 8006588:	32f0a7e9 	.word	0x32f0a7e9
 800658c:	3f12b80f 	.word	0x3f12b80f
 8006590:	1a8d1068 	.word	0x1a8d1068
 8006594:	3f3026f7 	.word	0x3f3026f7
 8006598:	fee08315 	.word	0xfee08315
 800659c:	3f57dbc8 	.word	0x3f57dbc8
 80065a0:	e96e8493 	.word	0xe96e8493
 80065a4:	3f8226e3 	.word	0x3f8226e3
 80065a8:	1bb341fe 	.word	0x1bb341fe
 80065ac:	3faba1ba 	.word	0x3faba1ba
 80065b0:	db605373 	.word	0xdb605373
 80065b4:	bef375cb 	.word	0xbef375cb
 80065b8:	a03792a6 	.word	0xa03792a6
 80065bc:	3f147e88 	.word	0x3f147e88
 80065c0:	f2f26501 	.word	0xf2f26501
 80065c4:	3f4344d8 	.word	0x3f4344d8
 80065c8:	c9560328 	.word	0xc9560328
 80065cc:	3f6d6d22 	.word	0x3f6d6d22
 80065d0:	8406d637 	.word	0x8406d637
 80065d4:	3f9664f4 	.word	0x3f9664f4
 80065d8:	1110fe7a 	.word	0x1110fe7a
 80065dc:	3fc11111 	.word	0x3fc11111
 80065e0:	55555563 	.word	0x55555563
 80065e4:	3fd55555 	.word	0x3fd55555
 80065e8:	3e2fffff 	.word	0x3e2fffff
 80065ec:	3ff00000 	.word	0x3ff00000
 80065f0:	bff00000 	.word	0xbff00000
 80065f4:	3fe59427 	.word	0x3fe59427
 80065f8:	2e01      	cmp	r6, #1
 80065fa:	d02f      	beq.n	800665c <__kernel_tan+0x404>
 80065fc:	460f      	mov	r7, r1
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4689      	mov	r9, r1
 8006604:	2000      	movs	r0, #0
 8006606:	4917      	ldr	r1, [pc, #92]	; (8006664 <__kernel_tan+0x40c>)
 8006608:	f7fa f8c8 	bl	800079c <__aeabi_ddiv>
 800660c:	2600      	movs	r6, #0
 800660e:	e9cd 0100 	strd	r0, r1, [sp]
 8006612:	4652      	mov	r2, sl
 8006614:	465b      	mov	r3, fp
 8006616:	4630      	mov	r0, r6
 8006618:	4639      	mov	r1, r7
 800661a:	f7f9 fddd 	bl	80001d8 <__aeabi_dsub>
 800661e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	ec51 0b18 	vmov	r0, r1, d8
 800662a:	f7f9 fdd5 	bl	80001d8 <__aeabi_dsub>
 800662e:	4632      	mov	r2, r6
 8006630:	462b      	mov	r3, r5
 8006632:	f7f9 ff89 	bl	8000548 <__aeabi_dmul>
 8006636:	46b0      	mov	r8, r6
 8006638:	460f      	mov	r7, r1
 800663a:	4642      	mov	r2, r8
 800663c:	462b      	mov	r3, r5
 800663e:	4634      	mov	r4, r6
 8006640:	4649      	mov	r1, r9
 8006642:	4606      	mov	r6, r0
 8006644:	4640      	mov	r0, r8
 8006646:	f7f9 ff7f 	bl	8000548 <__aeabi_dmul>
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <__kernel_tan+0x410>)
 800664c:	2200      	movs	r2, #0
 800664e:	f7f9 fdc5 	bl	80001dc <__adddf3>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4630      	mov	r0, r6
 8006658:	4639      	mov	r1, r7
 800665a:	e665      	b.n	8006328 <__kernel_tan+0xd0>
 800665c:	4682      	mov	sl, r0
 800665e:	468b      	mov	fp, r1
 8006660:	e625      	b.n	80062ae <__kernel_tan+0x56>
 8006662:	bf00      	nop
 8006664:	bff00000 	.word	0xbff00000
 8006668:	3ff00000 	.word	0x3ff00000
 800666c:	00000000 	.word	0x00000000

08006670 <__ieee754_exp>:
 8006670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	ec55 4b10 	vmov	r4, r5, d0
 8006678:	49b5      	ldr	r1, [pc, #724]	; (8006950 <__ieee754_exp+0x2e0>)
 800667a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800667e:	428a      	cmp	r2, r1
 8006680:	ed2d 8b04 	vpush	{d8-d9}
 8006684:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8006688:	d93b      	bls.n	8006702 <__ieee754_exp+0x92>
 800668a:	49b2      	ldr	r1, [pc, #712]	; (8006954 <__ieee754_exp+0x2e4>)
 800668c:	428a      	cmp	r2, r1
 800668e:	d916      	bls.n	80066be <__ieee754_exp+0x4e>
 8006690:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006694:	4323      	orrs	r3, r4
 8006696:	ee10 2a10 	vmov	r2, s0
 800669a:	d007      	beq.n	80066ac <__ieee754_exp+0x3c>
 800669c:	462b      	mov	r3, r5
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	f7f9 fd9b 	bl	80001dc <__adddf3>
 80066a6:	4604      	mov	r4, r0
 80066a8:	460d      	mov	r5, r1
 80066aa:	e002      	b.n	80066b2 <__ieee754_exp+0x42>
 80066ac:	b10e      	cbz	r6, 80066b2 <__ieee754_exp+0x42>
 80066ae:	2400      	movs	r4, #0
 80066b0:	2500      	movs	r5, #0
 80066b2:	ecbd 8b04 	vpop	{d8-d9}
 80066b6:	ec45 4b10 	vmov	d0, r4, r5
 80066ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066be:	a38e      	add	r3, pc, #568	; (adr r3, 80068f8 <__ieee754_exp+0x288>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	ee10 0a10 	vmov	r0, s0
 80066c8:	4629      	mov	r1, r5
 80066ca:	f7fa f9cd 	bl	8000a68 <__aeabi_dcmpgt>
 80066ce:	4607      	mov	r7, r0
 80066d0:	b130      	cbz	r0, 80066e0 <__ieee754_exp+0x70>
 80066d2:	ecbd 8b04 	vpop	{d8-d9}
 80066d6:	2000      	movs	r0, #0
 80066d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	f000 bb82 	b.w	8006de4 <__math_oflow>
 80066e0:	a387      	add	r3, pc, #540	; (adr r3, 8006900 <__ieee754_exp+0x290>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	4620      	mov	r0, r4
 80066e8:	4629      	mov	r1, r5
 80066ea:	f7fa f99f 	bl	8000a2c <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	f000 808b 	beq.w	800680a <__ieee754_exp+0x19a>
 80066f4:	ecbd 8b04 	vpop	{d8-d9}
 80066f8:	4638      	mov	r0, r7
 80066fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066fe:	f000 bb68 	b.w	8006dd2 <__math_uflow>
 8006702:	4b95      	ldr	r3, [pc, #596]	; (8006958 <__ieee754_exp+0x2e8>)
 8006704:	429a      	cmp	r2, r3
 8006706:	f240 80ac 	bls.w	8006862 <__ieee754_exp+0x1f2>
 800670a:	4b94      	ldr	r3, [pc, #592]	; (800695c <__ieee754_exp+0x2ec>)
 800670c:	429a      	cmp	r2, r3
 800670e:	d87c      	bhi.n	800680a <__ieee754_exp+0x19a>
 8006710:	4b93      	ldr	r3, [pc, #588]	; (8006960 <__ieee754_exp+0x2f0>)
 8006712:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	ee10 0a10 	vmov	r0, s0
 800671e:	4629      	mov	r1, r5
 8006720:	f7f9 fd5a 	bl	80001d8 <__aeabi_dsub>
 8006724:	4b8f      	ldr	r3, [pc, #572]	; (8006964 <__ieee754_exp+0x2f4>)
 8006726:	00f7      	lsls	r7, r6, #3
 8006728:	443b      	add	r3, r7
 800672a:	ed93 7b00 	vldr	d7, [r3]
 800672e:	f1c6 0a01 	rsb	sl, r6, #1
 8006732:	4680      	mov	r8, r0
 8006734:	4689      	mov	r9, r1
 8006736:	ebaa 0a06 	sub.w	sl, sl, r6
 800673a:	eeb0 8a47 	vmov.f32	s16, s14
 800673e:	eef0 8a67 	vmov.f32	s17, s15
 8006742:	ec53 2b18 	vmov	r2, r3, d8
 8006746:	4640      	mov	r0, r8
 8006748:	4649      	mov	r1, r9
 800674a:	f7f9 fd45 	bl	80001d8 <__aeabi_dsub>
 800674e:	4604      	mov	r4, r0
 8006750:	460d      	mov	r5, r1
 8006752:	4622      	mov	r2, r4
 8006754:	462b      	mov	r3, r5
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7f9 fef5 	bl	8000548 <__aeabi_dmul>
 800675e:	a36a      	add	r3, pc, #424	; (adr r3, 8006908 <__ieee754_exp+0x298>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	4606      	mov	r6, r0
 8006766:	460f      	mov	r7, r1
 8006768:	f7f9 feee 	bl	8000548 <__aeabi_dmul>
 800676c:	a368      	add	r3, pc, #416	; (adr r3, 8006910 <__ieee754_exp+0x2a0>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f7f9 fd31 	bl	80001d8 <__aeabi_dsub>
 8006776:	4632      	mov	r2, r6
 8006778:	463b      	mov	r3, r7
 800677a:	f7f9 fee5 	bl	8000548 <__aeabi_dmul>
 800677e:	a366      	add	r3, pc, #408	; (adr r3, 8006918 <__ieee754_exp+0x2a8>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7f9 fd2a 	bl	80001dc <__adddf3>
 8006788:	4632      	mov	r2, r6
 800678a:	463b      	mov	r3, r7
 800678c:	f7f9 fedc 	bl	8000548 <__aeabi_dmul>
 8006790:	a363      	add	r3, pc, #396	; (adr r3, 8006920 <__ieee754_exp+0x2b0>)
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	f7f9 fd1f 	bl	80001d8 <__aeabi_dsub>
 800679a:	4632      	mov	r2, r6
 800679c:	463b      	mov	r3, r7
 800679e:	f7f9 fed3 	bl	8000548 <__aeabi_dmul>
 80067a2:	a361      	add	r3, pc, #388	; (adr r3, 8006928 <__ieee754_exp+0x2b8>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 fd18 	bl	80001dc <__adddf3>
 80067ac:	4632      	mov	r2, r6
 80067ae:	463b      	mov	r3, r7
 80067b0:	f7f9 feca 	bl	8000548 <__aeabi_dmul>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4620      	mov	r0, r4
 80067ba:	4629      	mov	r1, r5
 80067bc:	f7f9 fd0c 	bl	80001d8 <__aeabi_dsub>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4606      	mov	r6, r0
 80067c6:	460f      	mov	r7, r1
 80067c8:	4620      	mov	r0, r4
 80067ca:	4629      	mov	r1, r5
 80067cc:	f7f9 febc 	bl	8000548 <__aeabi_dmul>
 80067d0:	ec41 0b19 	vmov	d9, r0, r1
 80067d4:	f1ba 0f00 	cmp.w	sl, #0
 80067d8:	d15d      	bne.n	8006896 <__ieee754_exp+0x226>
 80067da:	2200      	movs	r2, #0
 80067dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fcf8 	bl	80001d8 <__aeabi_dsub>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	ec51 0b19 	vmov	r0, r1, d9
 80067f0:	f7f9 ffd4 	bl	800079c <__aeabi_ddiv>
 80067f4:	4622      	mov	r2, r4
 80067f6:	462b      	mov	r3, r5
 80067f8:	f7f9 fcee 	bl	80001d8 <__aeabi_dsub>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	2000      	movs	r0, #0
 8006802:	4959      	ldr	r1, [pc, #356]	; (8006968 <__ieee754_exp+0x2f8>)
 8006804:	f7f9 fce8 	bl	80001d8 <__aeabi_dsub>
 8006808:	e74d      	b.n	80066a6 <__ieee754_exp+0x36>
 800680a:	4b58      	ldr	r3, [pc, #352]	; (800696c <__ieee754_exp+0x2fc>)
 800680c:	4620      	mov	r0, r4
 800680e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006812:	4629      	mov	r1, r5
 8006814:	a346      	add	r3, pc, #280	; (adr r3, 8006930 <__ieee754_exp+0x2c0>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fe95 	bl	8000548 <__aeabi_dmul>
 800681e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006822:	f7f9 fcdb 	bl	80001dc <__adddf3>
 8006826:	f7fa f929 	bl	8000a7c <__aeabi_d2iz>
 800682a:	4682      	mov	sl, r0
 800682c:	f7f9 fe22 	bl	8000474 <__aeabi_i2d>
 8006830:	a341      	add	r3, pc, #260	; (adr r3, 8006938 <__ieee754_exp+0x2c8>)
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	4606      	mov	r6, r0
 8006838:	460f      	mov	r7, r1
 800683a:	f7f9 fe85 	bl	8000548 <__aeabi_dmul>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4620      	mov	r0, r4
 8006844:	4629      	mov	r1, r5
 8006846:	f7f9 fcc7 	bl	80001d8 <__aeabi_dsub>
 800684a:	a33d      	add	r3, pc, #244	; (adr r3, 8006940 <__ieee754_exp+0x2d0>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	4680      	mov	r8, r0
 8006852:	4689      	mov	r9, r1
 8006854:	4630      	mov	r0, r6
 8006856:	4639      	mov	r1, r7
 8006858:	f7f9 fe76 	bl	8000548 <__aeabi_dmul>
 800685c:	ec41 0b18 	vmov	d8, r0, r1
 8006860:	e76f      	b.n	8006742 <__ieee754_exp+0xd2>
 8006862:	4b43      	ldr	r3, [pc, #268]	; (8006970 <__ieee754_exp+0x300>)
 8006864:	429a      	cmp	r2, r3
 8006866:	d811      	bhi.n	800688c <__ieee754_exp+0x21c>
 8006868:	a337      	add	r3, pc, #220	; (adr r3, 8006948 <__ieee754_exp+0x2d8>)
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	ee10 0a10 	vmov	r0, s0
 8006872:	4629      	mov	r1, r5
 8006874:	f7f9 fcb2 	bl	80001dc <__adddf3>
 8006878:	4b3b      	ldr	r3, [pc, #236]	; (8006968 <__ieee754_exp+0x2f8>)
 800687a:	2200      	movs	r2, #0
 800687c:	f7fa f8f4 	bl	8000a68 <__aeabi_dcmpgt>
 8006880:	b138      	cbz	r0, 8006892 <__ieee754_exp+0x222>
 8006882:	4b39      	ldr	r3, [pc, #228]	; (8006968 <__ieee754_exp+0x2f8>)
 8006884:	2200      	movs	r2, #0
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	e70a      	b.n	80066a2 <__ieee754_exp+0x32>
 800688c:	f04f 0a00 	mov.w	sl, #0
 8006890:	e75f      	b.n	8006752 <__ieee754_exp+0xe2>
 8006892:	4682      	mov	sl, r0
 8006894:	e75d      	b.n	8006752 <__ieee754_exp+0xe2>
 8006896:	4632      	mov	r2, r6
 8006898:	463b      	mov	r3, r7
 800689a:	2000      	movs	r0, #0
 800689c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80068a0:	f7f9 fc9a 	bl	80001d8 <__aeabi_dsub>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	ec51 0b19 	vmov	r0, r1, d9
 80068ac:	f7f9 ff76 	bl	800079c <__aeabi_ddiv>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	ec51 0b18 	vmov	r0, r1, d8
 80068b8:	f7f9 fc8e 	bl	80001d8 <__aeabi_dsub>
 80068bc:	4642      	mov	r2, r8
 80068be:	464b      	mov	r3, r9
 80068c0:	f7f9 fc8a 	bl	80001d8 <__aeabi_dsub>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	2000      	movs	r0, #0
 80068ca:	4927      	ldr	r1, [pc, #156]	; (8006968 <__ieee754_exp+0x2f8>)
 80068cc:	f7f9 fc84 	bl	80001d8 <__aeabi_dsub>
 80068d0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80068d4:	4592      	cmp	sl, r2
 80068d6:	db02      	blt.n	80068de <__ieee754_exp+0x26e>
 80068d8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80068dc:	e6e3      	b.n	80066a6 <__ieee754_exp+0x36>
 80068de:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80068e2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80068e6:	2200      	movs	r2, #0
 80068e8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80068ec:	f7f9 fe2c 	bl	8000548 <__aeabi_dmul>
 80068f0:	e6d9      	b.n	80066a6 <__ieee754_exp+0x36>
 80068f2:	bf00      	nop
 80068f4:	f3af 8000 	nop.w
 80068f8:	fefa39ef 	.word	0xfefa39ef
 80068fc:	40862e42 	.word	0x40862e42
 8006900:	d52d3051 	.word	0xd52d3051
 8006904:	c0874910 	.word	0xc0874910
 8006908:	72bea4d0 	.word	0x72bea4d0
 800690c:	3e663769 	.word	0x3e663769
 8006910:	c5d26bf1 	.word	0xc5d26bf1
 8006914:	3ebbbd41 	.word	0x3ebbbd41
 8006918:	af25de2c 	.word	0xaf25de2c
 800691c:	3f11566a 	.word	0x3f11566a
 8006920:	16bebd93 	.word	0x16bebd93
 8006924:	3f66c16c 	.word	0x3f66c16c
 8006928:	5555553e 	.word	0x5555553e
 800692c:	3fc55555 	.word	0x3fc55555
 8006930:	652b82fe 	.word	0x652b82fe
 8006934:	3ff71547 	.word	0x3ff71547
 8006938:	fee00000 	.word	0xfee00000
 800693c:	3fe62e42 	.word	0x3fe62e42
 8006940:	35793c76 	.word	0x35793c76
 8006944:	3dea39ef 	.word	0x3dea39ef
 8006948:	8800759c 	.word	0x8800759c
 800694c:	7e37e43c 	.word	0x7e37e43c
 8006950:	40862e41 	.word	0x40862e41
 8006954:	7fefffff 	.word	0x7fefffff
 8006958:	3fd62e42 	.word	0x3fd62e42
 800695c:	3ff0a2b1 	.word	0x3ff0a2b1
 8006960:	08007700 	.word	0x08007700
 8006964:	08007710 	.word	0x08007710
 8006968:	3ff00000 	.word	0x3ff00000
 800696c:	080076f0 	.word	0x080076f0
 8006970:	3defffff 	.word	0x3defffff
 8006974:	00000000 	.word	0x00000000

08006978 <__ieee754_rem_pio2>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	ed2d 8b02 	vpush	{d8}
 8006980:	ec55 4b10 	vmov	r4, r5, d0
 8006984:	4bca      	ldr	r3, [pc, #808]	; (8006cb0 <__ieee754_rem_pio2+0x338>)
 8006986:	b08b      	sub	sp, #44	; 0x2c
 8006988:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800698c:	4598      	cmp	r8, r3
 800698e:	4682      	mov	sl, r0
 8006990:	9502      	str	r5, [sp, #8]
 8006992:	dc08      	bgt.n	80069a6 <__ieee754_rem_pio2+0x2e>
 8006994:	2200      	movs	r2, #0
 8006996:	2300      	movs	r3, #0
 8006998:	ed80 0b00 	vstr	d0, [r0]
 800699c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80069a0:	f04f 0b00 	mov.w	fp, #0
 80069a4:	e028      	b.n	80069f8 <__ieee754_rem_pio2+0x80>
 80069a6:	4bc3      	ldr	r3, [pc, #780]	; (8006cb4 <__ieee754_rem_pio2+0x33c>)
 80069a8:	4598      	cmp	r8, r3
 80069aa:	dc78      	bgt.n	8006a9e <__ieee754_rem_pio2+0x126>
 80069ac:	9b02      	ldr	r3, [sp, #8]
 80069ae:	4ec2      	ldr	r6, [pc, #776]	; (8006cb8 <__ieee754_rem_pio2+0x340>)
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	ee10 0a10 	vmov	r0, s0
 80069b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006c78 <__ieee754_rem_pio2+0x300>)
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	4629      	mov	r1, r5
 80069be:	dd39      	ble.n	8006a34 <__ieee754_rem_pio2+0xbc>
 80069c0:	f7f9 fc0a 	bl	80001d8 <__aeabi_dsub>
 80069c4:	45b0      	cmp	r8, r6
 80069c6:	4604      	mov	r4, r0
 80069c8:	460d      	mov	r5, r1
 80069ca:	d01b      	beq.n	8006a04 <__ieee754_rem_pio2+0x8c>
 80069cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006c80 <__ieee754_rem_pio2+0x308>)
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	f7f9 fc01 	bl	80001d8 <__aeabi_dsub>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	e9ca 2300 	strd	r2, r3, [sl]
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f7f9 fbf9 	bl	80001d8 <__aeabi_dsub>
 80069e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006c80 <__ieee754_rem_pio2+0x308>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7f9 fbf4 	bl	80001d8 <__aeabi_dsub>
 80069f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80069f4:	f04f 0b01 	mov.w	fp, #1
 80069f8:	4658      	mov	r0, fp
 80069fa:	b00b      	add	sp, #44	; 0x2c
 80069fc:	ecbd 8b02 	vpop	{d8}
 8006a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a04:	a3a0      	add	r3, pc, #640	; (adr r3, 8006c88 <__ieee754_rem_pio2+0x310>)
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f7f9 fbe5 	bl	80001d8 <__aeabi_dsub>
 8006a0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006c90 <__ieee754_rem_pio2+0x318>)
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	4604      	mov	r4, r0
 8006a16:	460d      	mov	r5, r1
 8006a18:	f7f9 fbde 	bl	80001d8 <__aeabi_dsub>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	e9ca 2300 	strd	r2, r3, [sl]
 8006a24:	4620      	mov	r0, r4
 8006a26:	4629      	mov	r1, r5
 8006a28:	f7f9 fbd6 	bl	80001d8 <__aeabi_dsub>
 8006a2c:	a398      	add	r3, pc, #608	; (adr r3, 8006c90 <__ieee754_rem_pio2+0x318>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	e7db      	b.n	80069ec <__ieee754_rem_pio2+0x74>
 8006a34:	f7f9 fbd2 	bl	80001dc <__adddf3>
 8006a38:	45b0      	cmp	r8, r6
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	460d      	mov	r5, r1
 8006a3e:	d016      	beq.n	8006a6e <__ieee754_rem_pio2+0xf6>
 8006a40:	a38f      	add	r3, pc, #572	; (adr r3, 8006c80 <__ieee754_rem_pio2+0x308>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fbc9 	bl	80001dc <__adddf3>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	e9ca 2300 	strd	r2, r3, [sl]
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7f9 fbbf 	bl	80001d8 <__aeabi_dsub>
 8006a5a:	a389      	add	r3, pc, #548	; (adr r3, 8006c80 <__ieee754_rem_pio2+0x308>)
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f7f9 fbbc 	bl	80001dc <__adddf3>
 8006a64:	f04f 3bff 	mov.w	fp, #4294967295
 8006a68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a6c:	e7c4      	b.n	80069f8 <__ieee754_rem_pio2+0x80>
 8006a6e:	a386      	add	r3, pc, #536	; (adr r3, 8006c88 <__ieee754_rem_pio2+0x310>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fbb2 	bl	80001dc <__adddf3>
 8006a78:	a385      	add	r3, pc, #532	; (adr r3, 8006c90 <__ieee754_rem_pio2+0x318>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	4604      	mov	r4, r0
 8006a80:	460d      	mov	r5, r1
 8006a82:	f7f9 fbab 	bl	80001dc <__adddf3>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	e9ca 2300 	strd	r2, r3, [sl]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	f7f9 fba1 	bl	80001d8 <__aeabi_dsub>
 8006a96:	a37e      	add	r3, pc, #504	; (adr r3, 8006c90 <__ieee754_rem_pio2+0x318>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	e7e0      	b.n	8006a60 <__ieee754_rem_pio2+0xe8>
 8006a9e:	4b87      	ldr	r3, [pc, #540]	; (8006cbc <__ieee754_rem_pio2+0x344>)
 8006aa0:	4598      	cmp	r8, r3
 8006aa2:	f300 80d8 	bgt.w	8006c56 <__ieee754_rem_pio2+0x2de>
 8006aa6:	f000 f96d 	bl	8006d84 <fabs>
 8006aaa:	ec55 4b10 	vmov	r4, r5, d0
 8006aae:	ee10 0a10 	vmov	r0, s0
 8006ab2:	a379      	add	r3, pc, #484	; (adr r3, 8006c98 <__ieee754_rem_pio2+0x320>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	4629      	mov	r1, r5
 8006aba:	f7f9 fd45 	bl	8000548 <__aeabi_dmul>
 8006abe:	4b80      	ldr	r3, [pc, #512]	; (8006cc0 <__ieee754_rem_pio2+0x348>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f7f9 fb8b 	bl	80001dc <__adddf3>
 8006ac6:	f7f9 ffd9 	bl	8000a7c <__aeabi_d2iz>
 8006aca:	4683      	mov	fp, r0
 8006acc:	f7f9 fcd2 	bl	8000474 <__aeabi_i2d>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	ec43 2b18 	vmov	d8, r2, r3
 8006ad8:	a367      	add	r3, pc, #412	; (adr r3, 8006c78 <__ieee754_rem_pio2+0x300>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fd33 	bl	8000548 <__aeabi_dmul>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7f9 fb75 	bl	80001d8 <__aeabi_dsub>
 8006aee:	a364      	add	r3, pc, #400	; (adr r3, 8006c80 <__ieee754_rem_pio2+0x308>)
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	4606      	mov	r6, r0
 8006af6:	460f      	mov	r7, r1
 8006af8:	ec51 0b18 	vmov	r0, r1, d8
 8006afc:	f7f9 fd24 	bl	8000548 <__aeabi_dmul>
 8006b00:	f1bb 0f1f 	cmp.w	fp, #31
 8006b04:	4604      	mov	r4, r0
 8006b06:	460d      	mov	r5, r1
 8006b08:	dc0d      	bgt.n	8006b26 <__ieee754_rem_pio2+0x1ae>
 8006b0a:	4b6e      	ldr	r3, [pc, #440]	; (8006cc4 <__ieee754_rem_pio2+0x34c>)
 8006b0c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b14:	4543      	cmp	r3, r8
 8006b16:	d006      	beq.n	8006b26 <__ieee754_rem_pio2+0x1ae>
 8006b18:	4622      	mov	r2, r4
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f7f9 fb5a 	bl	80001d8 <__aeabi_dsub>
 8006b24:	e00e      	b.n	8006b44 <__ieee754_rem_pio2+0x1cc>
 8006b26:	462b      	mov	r3, r5
 8006b28:	4622      	mov	r2, r4
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	f7f9 fb53 	bl	80001d8 <__aeabi_dsub>
 8006b32:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006b36:	9303      	str	r3, [sp, #12]
 8006b38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b3c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	dc02      	bgt.n	8006b4a <__ieee754_rem_pio2+0x1d2>
 8006b44:	e9ca 0100 	strd	r0, r1, [sl]
 8006b48:	e039      	b.n	8006bbe <__ieee754_rem_pio2+0x246>
 8006b4a:	a34f      	add	r3, pc, #316	; (adr r3, 8006c88 <__ieee754_rem_pio2+0x310>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	ec51 0b18 	vmov	r0, r1, d8
 8006b54:	f7f9 fcf8 	bl	8000548 <__aeabi_dmul>
 8006b58:	4604      	mov	r4, r0
 8006b5a:	460d      	mov	r5, r1
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4630      	mov	r0, r6
 8006b62:	4639      	mov	r1, r7
 8006b64:	f7f9 fb38 	bl	80001d8 <__aeabi_dsub>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4689      	mov	r9, r1
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 fb30 	bl	80001d8 <__aeabi_dsub>
 8006b78:	4622      	mov	r2, r4
 8006b7a:	462b      	mov	r3, r5
 8006b7c:	f7f9 fb2c 	bl	80001d8 <__aeabi_dsub>
 8006b80:	a343      	add	r3, pc, #268	; (adr r3, 8006c90 <__ieee754_rem_pio2+0x318>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	4604      	mov	r4, r0
 8006b88:	460d      	mov	r5, r1
 8006b8a:	ec51 0b18 	vmov	r0, r1, d8
 8006b8e:	f7f9 fcdb 	bl	8000548 <__aeabi_dmul>
 8006b92:	4622      	mov	r2, r4
 8006b94:	462b      	mov	r3, r5
 8006b96:	f7f9 fb1f 	bl	80001d8 <__aeabi_dsub>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	460d      	mov	r5, r1
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	f7f9 fb17 	bl	80001d8 <__aeabi_dsub>
 8006baa:	9a03      	ldr	r2, [sp, #12]
 8006bac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b31      	cmp	r3, #49	; 0x31
 8006bb4:	dc24      	bgt.n	8006c00 <__ieee754_rem_pio2+0x288>
 8006bb6:	e9ca 0100 	strd	r0, r1, [sl]
 8006bba:	4646      	mov	r6, r8
 8006bbc:	464f      	mov	r7, r9
 8006bbe:	e9da 8900 	ldrd	r8, r9, [sl]
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	4642      	mov	r2, r8
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7f9 fb05 	bl	80001d8 <__aeabi_dsub>
 8006bce:	462b      	mov	r3, r5
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	f7f9 fb01 	bl	80001d8 <__aeabi_dsub>
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006bde:	f6bf af0b 	bge.w	80069f8 <__ieee754_rem_pio2+0x80>
 8006be2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006be6:	f8ca 3004 	str.w	r3, [sl, #4]
 8006bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bee:	f8ca 8000 	str.w	r8, [sl]
 8006bf2:	f8ca 0008 	str.w	r0, [sl, #8]
 8006bf6:	f8ca 300c 	str.w	r3, [sl, #12]
 8006bfa:	f1cb 0b00 	rsb	fp, fp, #0
 8006bfe:	e6fb      	b.n	80069f8 <__ieee754_rem_pio2+0x80>
 8006c00:	a327      	add	r3, pc, #156	; (adr r3, 8006ca0 <__ieee754_rem_pio2+0x328>)
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	ec51 0b18 	vmov	r0, r1, d8
 8006c0a:	f7f9 fc9d 	bl	8000548 <__aeabi_dmul>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	460d      	mov	r5, r1
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4640      	mov	r0, r8
 8006c18:	4649      	mov	r1, r9
 8006c1a:	f7f9 fadd 	bl	80001d8 <__aeabi_dsub>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4606      	mov	r6, r0
 8006c24:	460f      	mov	r7, r1
 8006c26:	4640      	mov	r0, r8
 8006c28:	4649      	mov	r1, r9
 8006c2a:	f7f9 fad5 	bl	80001d8 <__aeabi_dsub>
 8006c2e:	4622      	mov	r2, r4
 8006c30:	462b      	mov	r3, r5
 8006c32:	f7f9 fad1 	bl	80001d8 <__aeabi_dsub>
 8006c36:	a31c      	add	r3, pc, #112	; (adr r3, 8006ca8 <__ieee754_rem_pio2+0x330>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	ec51 0b18 	vmov	r0, r1, d8
 8006c44:	f7f9 fc80 	bl	8000548 <__aeabi_dmul>
 8006c48:	4622      	mov	r2, r4
 8006c4a:	462b      	mov	r3, r5
 8006c4c:	f7f9 fac4 	bl	80001d8 <__aeabi_dsub>
 8006c50:	4604      	mov	r4, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	e760      	b.n	8006b18 <__ieee754_rem_pio2+0x1a0>
 8006c56:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <__ieee754_rem_pio2+0x350>)
 8006c58:	4598      	cmp	r8, r3
 8006c5a:	dd37      	ble.n	8006ccc <__ieee754_rem_pio2+0x354>
 8006c5c:	ee10 2a10 	vmov	r2, s0
 8006c60:	462b      	mov	r3, r5
 8006c62:	4620      	mov	r0, r4
 8006c64:	4629      	mov	r1, r5
 8006c66:	f7f9 fab7 	bl	80001d8 <__aeabi_dsub>
 8006c6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c6e:	e9ca 0100 	strd	r0, r1, [sl]
 8006c72:	e695      	b.n	80069a0 <__ieee754_rem_pio2+0x28>
 8006c74:	f3af 8000 	nop.w
 8006c78:	54400000 	.word	0x54400000
 8006c7c:	3ff921fb 	.word	0x3ff921fb
 8006c80:	1a626331 	.word	0x1a626331
 8006c84:	3dd0b461 	.word	0x3dd0b461
 8006c88:	1a600000 	.word	0x1a600000
 8006c8c:	3dd0b461 	.word	0x3dd0b461
 8006c90:	2e037073 	.word	0x2e037073
 8006c94:	3ba3198a 	.word	0x3ba3198a
 8006c98:	6dc9c883 	.word	0x6dc9c883
 8006c9c:	3fe45f30 	.word	0x3fe45f30
 8006ca0:	2e000000 	.word	0x2e000000
 8006ca4:	3ba3198a 	.word	0x3ba3198a
 8006ca8:	252049c1 	.word	0x252049c1
 8006cac:	397b839a 	.word	0x397b839a
 8006cb0:	3fe921fb 	.word	0x3fe921fb
 8006cb4:	4002d97b 	.word	0x4002d97b
 8006cb8:	3ff921fb 	.word	0x3ff921fb
 8006cbc:	413921fb 	.word	0x413921fb
 8006cc0:	3fe00000 	.word	0x3fe00000
 8006cc4:	08007720 	.word	0x08007720
 8006cc8:	7fefffff 	.word	0x7fefffff
 8006ccc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006cd0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006cd4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006cd8:	4620      	mov	r0, r4
 8006cda:	460d      	mov	r5, r1
 8006cdc:	f7f9 fece 	bl	8000a7c <__aeabi_d2iz>
 8006ce0:	f7f9 fbc8 	bl	8000474 <__aeabi_i2d>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cf0:	f7f9 fa72 	bl	80001d8 <__aeabi_dsub>
 8006cf4:	4b21      	ldr	r3, [pc, #132]	; (8006d7c <__ieee754_rem_pio2+0x404>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f7f9 fc26 	bl	8000548 <__aeabi_dmul>
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	4604      	mov	r4, r0
 8006d00:	f7f9 febc 	bl	8000a7c <__aeabi_d2iz>
 8006d04:	f7f9 fbb6 	bl	8000474 <__aeabi_i2d>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d14:	f7f9 fa60 	bl	80001d8 <__aeabi_dsub>
 8006d18:	4b18      	ldr	r3, [pc, #96]	; (8006d7c <__ieee754_rem_pio2+0x404>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f7f9 fc14 	bl	8000548 <__aeabi_dmul>
 8006d20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d24:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006d28:	2703      	movs	r7, #3
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006d32:	4622      	mov	r2, r4
 8006d34:	462b      	mov	r3, r5
 8006d36:	46b9      	mov	r9, r7
 8006d38:	3f01      	subs	r7, #1
 8006d3a:	f7f9 fe6d 	bl	8000a18 <__aeabi_dcmpeq>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d1f5      	bne.n	8006d2e <__ieee754_rem_pio2+0x3b6>
 8006d42:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <__ieee754_rem_pio2+0x408>)
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	2302      	movs	r3, #2
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	4632      	mov	r2, r6
 8006d4c:	464b      	mov	r3, r9
 8006d4e:	4651      	mov	r1, sl
 8006d50:	a804      	add	r0, sp, #16
 8006d52:	f000 f851 	bl	8006df8 <__kernel_rem_pio2>
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	4683      	mov	fp, r0
 8006d5c:	f6bf ae4c 	bge.w	80069f8 <__ieee754_rem_pio2+0x80>
 8006d60:	e9da 2100 	ldrd	r2, r1, [sl]
 8006d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d68:	e9ca 2300 	strd	r2, r3, [sl]
 8006d6c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006d70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d74:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006d78:	e73f      	b.n	8006bfa <__ieee754_rem_pio2+0x282>
 8006d7a:	bf00      	nop
 8006d7c:	41700000 	.word	0x41700000
 8006d80:	080077a0 	.word	0x080077a0

08006d84 <fabs>:
 8006d84:	ec51 0b10 	vmov	r0, r1, d0
 8006d88:	ee10 2a10 	vmov	r2, s0
 8006d8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d90:	ec43 2b10 	vmov	d0, r2, r3
 8006d94:	4770      	bx	lr

08006d96 <with_errno>:
 8006d96:	b570      	push	{r4, r5, r6, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	f7ff f9a7 	bl	80060f0 <__errno>
 8006da2:	4629      	mov	r1, r5
 8006da4:	6006      	str	r6, [r0, #0]
 8006da6:	4620      	mov	r0, r4
 8006da8:	bd70      	pop	{r4, r5, r6, pc}

08006daa <xflow>:
 8006daa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dac:	4614      	mov	r4, r2
 8006dae:	461d      	mov	r5, r3
 8006db0:	b108      	cbz	r0, 8006db6 <xflow+0xc>
 8006db2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006db6:	e9cd 2300 	strd	r2, r3, [sp]
 8006dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7f9 fbc1 	bl	8000548 <__aeabi_dmul>
 8006dc6:	2222      	movs	r2, #34	; 0x22
 8006dc8:	b003      	add	sp, #12
 8006dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dce:	f7ff bfe2 	b.w	8006d96 <with_errno>

08006dd2 <__math_uflow>:
 8006dd2:	b508      	push	{r3, lr}
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dda:	f7ff ffe6 	bl	8006daa <xflow>
 8006dde:	ec41 0b10 	vmov	d0, r0, r1
 8006de2:	bd08      	pop	{r3, pc}

08006de4 <__math_oflow>:
 8006de4:	b508      	push	{r3, lr}
 8006de6:	2200      	movs	r2, #0
 8006de8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006dec:	f7ff ffdd 	bl	8006daa <xflow>
 8006df0:	ec41 0b10 	vmov	d0, r0, r1
 8006df4:	bd08      	pop	{r3, pc}
	...

08006df8 <__kernel_rem_pio2>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	ed2d 8b02 	vpush	{d8}
 8006e00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006e04:	f112 0f14 	cmn.w	r2, #20
 8006e08:	9306      	str	r3, [sp, #24]
 8006e0a:	9104      	str	r1, [sp, #16]
 8006e0c:	4bc2      	ldr	r3, [pc, #776]	; (8007118 <__kernel_rem_pio2+0x320>)
 8006e0e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006e10:	9009      	str	r0, [sp, #36]	; 0x24
 8006e12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	9b06      	ldr	r3, [sp, #24]
 8006e1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e1e:	bfa8      	it	ge
 8006e20:	1ed4      	subge	r4, r2, #3
 8006e22:	9305      	str	r3, [sp, #20]
 8006e24:	bfb2      	itee	lt
 8006e26:	2400      	movlt	r4, #0
 8006e28:	2318      	movge	r3, #24
 8006e2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006e2e:	f06f 0317 	mvn.w	r3, #23
 8006e32:	fb04 3303 	mla	r3, r4, r3, r3
 8006e36:	eb03 0a02 	add.w	sl, r3, r2
 8006e3a:	9b00      	ldr	r3, [sp, #0]
 8006e3c:	9a05      	ldr	r2, [sp, #20]
 8006e3e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007108 <__kernel_rem_pio2+0x310>
 8006e42:	eb03 0802 	add.w	r8, r3, r2
 8006e46:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006e48:	1aa7      	subs	r7, r4, r2
 8006e4a:	ae20      	add	r6, sp, #128	; 0x80
 8006e4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006e50:	2500      	movs	r5, #0
 8006e52:	4545      	cmp	r5, r8
 8006e54:	dd13      	ble.n	8006e7e <__kernel_rem_pio2+0x86>
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	aa20      	add	r2, sp, #128	; 0x80
 8006e5a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006e5e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006e62:	f04f 0800 	mov.w	r8, #0
 8006e66:	9b00      	ldr	r3, [sp, #0]
 8006e68:	4598      	cmp	r8, r3
 8006e6a:	dc31      	bgt.n	8006ed0 <__kernel_rem_pio2+0xd8>
 8006e6c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007108 <__kernel_rem_pio2+0x310>
 8006e70:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e78:	462f      	mov	r7, r5
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	e01b      	b.n	8006eb6 <__kernel_rem_pio2+0xbe>
 8006e7e:	42ef      	cmn	r7, r5
 8006e80:	d407      	bmi.n	8006e92 <__kernel_rem_pio2+0x9a>
 8006e82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006e86:	f7f9 faf5 	bl	8000474 <__aeabi_i2d>
 8006e8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006e8e:	3501      	adds	r5, #1
 8006e90:	e7df      	b.n	8006e52 <__kernel_rem_pio2+0x5a>
 8006e92:	ec51 0b18 	vmov	r0, r1, d8
 8006e96:	e7f8      	b.n	8006e8a <__kernel_rem_pio2+0x92>
 8006e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006ea0:	f7f9 fb52 	bl	8000548 <__aeabi_dmul>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eac:	f7f9 f996 	bl	80001dc <__adddf3>
 8006eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	9b05      	ldr	r3, [sp, #20]
 8006eb8:	429e      	cmp	r6, r3
 8006eba:	f1a7 0708 	sub.w	r7, r7, #8
 8006ebe:	ddeb      	ble.n	8006e98 <__kernel_rem_pio2+0xa0>
 8006ec0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ec4:	f108 0801 	add.w	r8, r8, #1
 8006ec8:	ecab 7b02 	vstmia	fp!, {d7}
 8006ecc:	3508      	adds	r5, #8
 8006ece:	e7ca      	b.n	8006e66 <__kernel_rem_pio2+0x6e>
 8006ed0:	9b00      	ldr	r3, [sp, #0]
 8006ed2:	aa0c      	add	r2, sp, #48	; 0x30
 8006ed4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eda:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006edc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006ee0:	9c00      	ldr	r4, [sp, #0]
 8006ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ee4:	00e3      	lsls	r3, r4, #3
 8006ee6:	9308      	str	r3, [sp, #32]
 8006ee8:	ab98      	add	r3, sp, #608	; 0x260
 8006eea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006eee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006ef2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006ef6:	ab70      	add	r3, sp, #448	; 0x1c0
 8006ef8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006efc:	46c3      	mov	fp, r8
 8006efe:	46a1      	mov	r9, r4
 8006f00:	f1b9 0f00 	cmp.w	r9, #0
 8006f04:	f1a5 0508 	sub.w	r5, r5, #8
 8006f08:	dc77      	bgt.n	8006ffa <__kernel_rem_pio2+0x202>
 8006f0a:	ec47 6b10 	vmov	d0, r6, r7
 8006f0e:	4650      	mov	r0, sl
 8006f10:	f000 fac2 	bl	8007498 <scalbn>
 8006f14:	ec57 6b10 	vmov	r6, r7, d0
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006f1e:	ee10 0a10 	vmov	r0, s0
 8006f22:	4639      	mov	r1, r7
 8006f24:	f7f9 fb10 	bl	8000548 <__aeabi_dmul>
 8006f28:	ec41 0b10 	vmov	d0, r0, r1
 8006f2c:	f000 fb34 	bl	8007598 <floor>
 8006f30:	4b7a      	ldr	r3, [pc, #488]	; (800711c <__kernel_rem_pio2+0x324>)
 8006f32:	ec51 0b10 	vmov	r0, r1, d0
 8006f36:	2200      	movs	r2, #0
 8006f38:	f7f9 fb06 	bl	8000548 <__aeabi_dmul>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4630      	mov	r0, r6
 8006f42:	4639      	mov	r1, r7
 8006f44:	f7f9 f948 	bl	80001d8 <__aeabi_dsub>
 8006f48:	460f      	mov	r7, r1
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	f7f9 fd96 	bl	8000a7c <__aeabi_d2iz>
 8006f50:	9002      	str	r0, [sp, #8]
 8006f52:	f7f9 fa8f 	bl	8000474 <__aeabi_i2d>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	f7f9 f93b 	bl	80001d8 <__aeabi_dsub>
 8006f62:	f1ba 0f00 	cmp.w	sl, #0
 8006f66:	4606      	mov	r6, r0
 8006f68:	460f      	mov	r7, r1
 8006f6a:	dd6d      	ble.n	8007048 <__kernel_rem_pio2+0x250>
 8006f6c:	1e61      	subs	r1, r4, #1
 8006f6e:	ab0c      	add	r3, sp, #48	; 0x30
 8006f70:	9d02      	ldr	r5, [sp, #8]
 8006f72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f76:	f1ca 0018 	rsb	r0, sl, #24
 8006f7a:	fa43 f200 	asr.w	r2, r3, r0
 8006f7e:	4415      	add	r5, r2
 8006f80:	4082      	lsls	r2, r0
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	aa0c      	add	r2, sp, #48	; 0x30
 8006f86:	9502      	str	r5, [sp, #8]
 8006f88:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006f8c:	f1ca 0217 	rsb	r2, sl, #23
 8006f90:	fa43 fb02 	asr.w	fp, r3, r2
 8006f94:	f1bb 0f00 	cmp.w	fp, #0
 8006f98:	dd65      	ble.n	8007066 <__kernel_rem_pio2+0x26e>
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	9302      	str	r3, [sp, #8]
 8006fa2:	4615      	mov	r5, r2
 8006fa4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006fa8:	4294      	cmp	r4, r2
 8006faa:	f300 809f 	bgt.w	80070ec <__kernel_rem_pio2+0x2f4>
 8006fae:	f1ba 0f00 	cmp.w	sl, #0
 8006fb2:	dd07      	ble.n	8006fc4 <__kernel_rem_pio2+0x1cc>
 8006fb4:	f1ba 0f01 	cmp.w	sl, #1
 8006fb8:	f000 80c1 	beq.w	800713e <__kernel_rem_pio2+0x346>
 8006fbc:	f1ba 0f02 	cmp.w	sl, #2
 8006fc0:	f000 80c7 	beq.w	8007152 <__kernel_rem_pio2+0x35a>
 8006fc4:	f1bb 0f02 	cmp.w	fp, #2
 8006fc8:	d14d      	bne.n	8007066 <__kernel_rem_pio2+0x26e>
 8006fca:	4632      	mov	r2, r6
 8006fcc:	463b      	mov	r3, r7
 8006fce:	4954      	ldr	r1, [pc, #336]	; (8007120 <__kernel_rem_pio2+0x328>)
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f7f9 f901 	bl	80001d8 <__aeabi_dsub>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460f      	mov	r7, r1
 8006fda:	2d00      	cmp	r5, #0
 8006fdc:	d043      	beq.n	8007066 <__kernel_rem_pio2+0x26e>
 8006fde:	4650      	mov	r0, sl
 8006fe0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007110 <__kernel_rem_pio2+0x318>
 8006fe4:	f000 fa58 	bl	8007498 <scalbn>
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	ec53 2b10 	vmov	r2, r3, d0
 8006ff0:	f7f9 f8f2 	bl	80001d8 <__aeabi_dsub>
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	460f      	mov	r7, r1
 8006ff8:	e035      	b.n	8007066 <__kernel_rem_pio2+0x26e>
 8006ffa:	4b4a      	ldr	r3, [pc, #296]	; (8007124 <__kernel_rem_pio2+0x32c>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4630      	mov	r0, r6
 8007000:	4639      	mov	r1, r7
 8007002:	f7f9 faa1 	bl	8000548 <__aeabi_dmul>
 8007006:	f7f9 fd39 	bl	8000a7c <__aeabi_d2iz>
 800700a:	f7f9 fa33 	bl	8000474 <__aeabi_i2d>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	ec43 2b18 	vmov	d8, r2, r3
 8007016:	4b44      	ldr	r3, [pc, #272]	; (8007128 <__kernel_rem_pio2+0x330>)
 8007018:	2200      	movs	r2, #0
 800701a:	f7f9 fa95 	bl	8000548 <__aeabi_dmul>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4630      	mov	r0, r6
 8007024:	4639      	mov	r1, r7
 8007026:	f7f9 f8d7 	bl	80001d8 <__aeabi_dsub>
 800702a:	f7f9 fd27 	bl	8000a7c <__aeabi_d2iz>
 800702e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007032:	f84b 0b04 	str.w	r0, [fp], #4
 8007036:	ec51 0b18 	vmov	r0, r1, d8
 800703a:	f7f9 f8cf 	bl	80001dc <__adddf3>
 800703e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007042:	4606      	mov	r6, r0
 8007044:	460f      	mov	r7, r1
 8007046:	e75b      	b.n	8006f00 <__kernel_rem_pio2+0x108>
 8007048:	d106      	bne.n	8007058 <__kernel_rem_pio2+0x260>
 800704a:	1e63      	subs	r3, r4, #1
 800704c:	aa0c      	add	r2, sp, #48	; 0x30
 800704e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007052:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007056:	e79d      	b.n	8006f94 <__kernel_rem_pio2+0x19c>
 8007058:	4b34      	ldr	r3, [pc, #208]	; (800712c <__kernel_rem_pio2+0x334>)
 800705a:	2200      	movs	r2, #0
 800705c:	f7f9 fcfa 	bl	8000a54 <__aeabi_dcmpge>
 8007060:	2800      	cmp	r0, #0
 8007062:	d140      	bne.n	80070e6 <__kernel_rem_pio2+0x2ee>
 8007064:	4683      	mov	fp, r0
 8007066:	2200      	movs	r2, #0
 8007068:	2300      	movs	r3, #0
 800706a:	4630      	mov	r0, r6
 800706c:	4639      	mov	r1, r7
 800706e:	f7f9 fcd3 	bl	8000a18 <__aeabi_dcmpeq>
 8007072:	2800      	cmp	r0, #0
 8007074:	f000 80c1 	beq.w	80071fa <__kernel_rem_pio2+0x402>
 8007078:	1e65      	subs	r5, r4, #1
 800707a:	462b      	mov	r3, r5
 800707c:	2200      	movs	r2, #0
 800707e:	9900      	ldr	r1, [sp, #0]
 8007080:	428b      	cmp	r3, r1
 8007082:	da6d      	bge.n	8007160 <__kernel_rem_pio2+0x368>
 8007084:	2a00      	cmp	r2, #0
 8007086:	f000 808a 	beq.w	800719e <__kernel_rem_pio2+0x3a6>
 800708a:	ab0c      	add	r3, sp, #48	; 0x30
 800708c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007090:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80ae 	beq.w	80071f6 <__kernel_rem_pio2+0x3fe>
 800709a:	4650      	mov	r0, sl
 800709c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007110 <__kernel_rem_pio2+0x318>
 80070a0:	f000 f9fa 	bl	8007498 <scalbn>
 80070a4:	1c6b      	adds	r3, r5, #1
 80070a6:	00da      	lsls	r2, r3, #3
 80070a8:	9205      	str	r2, [sp, #20]
 80070aa:	ec57 6b10 	vmov	r6, r7, d0
 80070ae:	aa70      	add	r2, sp, #448	; 0x1c0
 80070b0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007124 <__kernel_rem_pio2+0x32c>
 80070b4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80070b8:	462c      	mov	r4, r5
 80070ba:	f04f 0800 	mov.w	r8, #0
 80070be:	2c00      	cmp	r4, #0
 80070c0:	f280 80d4 	bge.w	800726c <__kernel_rem_pio2+0x474>
 80070c4:	462c      	mov	r4, r5
 80070c6:	2c00      	cmp	r4, #0
 80070c8:	f2c0 8102 	blt.w	80072d0 <__kernel_rem_pio2+0x4d8>
 80070cc:	4b18      	ldr	r3, [pc, #96]	; (8007130 <__kernel_rem_pio2+0x338>)
 80070ce:	461e      	mov	r6, r3
 80070d0:	ab70      	add	r3, sp, #448	; 0x1c0
 80070d2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80070d6:	1b2b      	subs	r3, r5, r4
 80070d8:	f04f 0900 	mov.w	r9, #0
 80070dc:	f04f 0a00 	mov.w	sl, #0
 80070e0:	2700      	movs	r7, #0
 80070e2:	9306      	str	r3, [sp, #24]
 80070e4:	e0e6      	b.n	80072b4 <__kernel_rem_pio2+0x4bc>
 80070e6:	f04f 0b02 	mov.w	fp, #2
 80070ea:	e756      	b.n	8006f9a <__kernel_rem_pio2+0x1a2>
 80070ec:	f8d8 3000 	ldr.w	r3, [r8]
 80070f0:	bb05      	cbnz	r5, 8007134 <__kernel_rem_pio2+0x33c>
 80070f2:	b123      	cbz	r3, 80070fe <__kernel_rem_pio2+0x306>
 80070f4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80070f8:	f8c8 3000 	str.w	r3, [r8]
 80070fc:	2301      	movs	r3, #1
 80070fe:	3201      	adds	r2, #1
 8007100:	f108 0804 	add.w	r8, r8, #4
 8007104:	461d      	mov	r5, r3
 8007106:	e74f      	b.n	8006fa8 <__kernel_rem_pio2+0x1b0>
	...
 8007114:	3ff00000 	.word	0x3ff00000
 8007118:	080078e8 	.word	0x080078e8
 800711c:	40200000 	.word	0x40200000
 8007120:	3ff00000 	.word	0x3ff00000
 8007124:	3e700000 	.word	0x3e700000
 8007128:	41700000 	.word	0x41700000
 800712c:	3fe00000 	.word	0x3fe00000
 8007130:	080078a8 	.word	0x080078a8
 8007134:	1acb      	subs	r3, r1, r3
 8007136:	f8c8 3000 	str.w	r3, [r8]
 800713a:	462b      	mov	r3, r5
 800713c:	e7df      	b.n	80070fe <__kernel_rem_pio2+0x306>
 800713e:	1e62      	subs	r2, r4, #1
 8007140:	ab0c      	add	r3, sp, #48	; 0x30
 8007142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007146:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800714a:	a90c      	add	r1, sp, #48	; 0x30
 800714c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007150:	e738      	b.n	8006fc4 <__kernel_rem_pio2+0x1cc>
 8007152:	1e62      	subs	r2, r4, #1
 8007154:	ab0c      	add	r3, sp, #48	; 0x30
 8007156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800715e:	e7f4      	b.n	800714a <__kernel_rem_pio2+0x352>
 8007160:	a90c      	add	r1, sp, #48	; 0x30
 8007162:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007166:	3b01      	subs	r3, #1
 8007168:	430a      	orrs	r2, r1
 800716a:	e788      	b.n	800707e <__kernel_rem_pio2+0x286>
 800716c:	3301      	adds	r3, #1
 800716e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007172:	2900      	cmp	r1, #0
 8007174:	d0fa      	beq.n	800716c <__kernel_rem_pio2+0x374>
 8007176:	9a08      	ldr	r2, [sp, #32]
 8007178:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800717c:	446a      	add	r2, sp
 800717e:	3a98      	subs	r2, #152	; 0x98
 8007180:	9208      	str	r2, [sp, #32]
 8007182:	9a06      	ldr	r2, [sp, #24]
 8007184:	a920      	add	r1, sp, #128	; 0x80
 8007186:	18a2      	adds	r2, r4, r2
 8007188:	18e3      	adds	r3, r4, r3
 800718a:	f104 0801 	add.w	r8, r4, #1
 800718e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007192:	9302      	str	r3, [sp, #8]
 8007194:	9b02      	ldr	r3, [sp, #8]
 8007196:	4543      	cmp	r3, r8
 8007198:	da04      	bge.n	80071a4 <__kernel_rem_pio2+0x3ac>
 800719a:	461c      	mov	r4, r3
 800719c:	e6a2      	b.n	8006ee4 <__kernel_rem_pio2+0xec>
 800719e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071a0:	2301      	movs	r3, #1
 80071a2:	e7e4      	b.n	800716e <__kernel_rem_pio2+0x376>
 80071a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80071aa:	f7f9 f963 	bl	8000474 <__aeabi_i2d>
 80071ae:	e8e5 0102 	strd	r0, r1, [r5], #8
 80071b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b4:	46ab      	mov	fp, r5
 80071b6:	461c      	mov	r4, r3
 80071b8:	f04f 0900 	mov.w	r9, #0
 80071bc:	2600      	movs	r6, #0
 80071be:	2700      	movs	r7, #0
 80071c0:	9b05      	ldr	r3, [sp, #20]
 80071c2:	4599      	cmp	r9, r3
 80071c4:	dd06      	ble.n	80071d4 <__kernel_rem_pio2+0x3dc>
 80071c6:	9b08      	ldr	r3, [sp, #32]
 80071c8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80071cc:	f108 0801 	add.w	r8, r8, #1
 80071d0:	9308      	str	r3, [sp, #32]
 80071d2:	e7df      	b.n	8007194 <__kernel_rem_pio2+0x39c>
 80071d4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80071d8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80071dc:	f7f9 f9b4 	bl	8000548 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f8 fff8 	bl	80001dc <__adddf3>
 80071ec:	f109 0901 	add.w	r9, r9, #1
 80071f0:	4606      	mov	r6, r0
 80071f2:	460f      	mov	r7, r1
 80071f4:	e7e4      	b.n	80071c0 <__kernel_rem_pio2+0x3c8>
 80071f6:	3d01      	subs	r5, #1
 80071f8:	e747      	b.n	800708a <__kernel_rem_pio2+0x292>
 80071fa:	ec47 6b10 	vmov	d0, r6, r7
 80071fe:	f1ca 0000 	rsb	r0, sl, #0
 8007202:	f000 f949 	bl	8007498 <scalbn>
 8007206:	ec57 6b10 	vmov	r6, r7, d0
 800720a:	4ba0      	ldr	r3, [pc, #640]	; (800748c <__kernel_rem_pio2+0x694>)
 800720c:	ee10 0a10 	vmov	r0, s0
 8007210:	2200      	movs	r2, #0
 8007212:	4639      	mov	r1, r7
 8007214:	f7f9 fc1e 	bl	8000a54 <__aeabi_dcmpge>
 8007218:	b1f8      	cbz	r0, 800725a <__kernel_rem_pio2+0x462>
 800721a:	4b9d      	ldr	r3, [pc, #628]	; (8007490 <__kernel_rem_pio2+0x698>)
 800721c:	2200      	movs	r2, #0
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 f991 	bl	8000548 <__aeabi_dmul>
 8007226:	f7f9 fc29 	bl	8000a7c <__aeabi_d2iz>
 800722a:	4680      	mov	r8, r0
 800722c:	f7f9 f922 	bl	8000474 <__aeabi_i2d>
 8007230:	4b96      	ldr	r3, [pc, #600]	; (800748c <__kernel_rem_pio2+0x694>)
 8007232:	2200      	movs	r2, #0
 8007234:	f7f9 f988 	bl	8000548 <__aeabi_dmul>
 8007238:	460b      	mov	r3, r1
 800723a:	4602      	mov	r2, r0
 800723c:	4639      	mov	r1, r7
 800723e:	4630      	mov	r0, r6
 8007240:	f7f8 ffca 	bl	80001d8 <__aeabi_dsub>
 8007244:	f7f9 fc1a 	bl	8000a7c <__aeabi_d2iz>
 8007248:	1c65      	adds	r5, r4, #1
 800724a:	ab0c      	add	r3, sp, #48	; 0x30
 800724c:	f10a 0a18 	add.w	sl, sl, #24
 8007250:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007254:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007258:	e71f      	b.n	800709a <__kernel_rem_pio2+0x2a2>
 800725a:	4630      	mov	r0, r6
 800725c:	4639      	mov	r1, r7
 800725e:	f7f9 fc0d 	bl	8000a7c <__aeabi_d2iz>
 8007262:	ab0c      	add	r3, sp, #48	; 0x30
 8007264:	4625      	mov	r5, r4
 8007266:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800726a:	e716      	b.n	800709a <__kernel_rem_pio2+0x2a2>
 800726c:	ab0c      	add	r3, sp, #48	; 0x30
 800726e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007272:	f7f9 f8ff 	bl	8000474 <__aeabi_i2d>
 8007276:	4632      	mov	r2, r6
 8007278:	463b      	mov	r3, r7
 800727a:	f7f9 f965 	bl	8000548 <__aeabi_dmul>
 800727e:	4642      	mov	r2, r8
 8007280:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007284:	464b      	mov	r3, r9
 8007286:	4630      	mov	r0, r6
 8007288:	4639      	mov	r1, r7
 800728a:	f7f9 f95d 	bl	8000548 <__aeabi_dmul>
 800728e:	3c01      	subs	r4, #1
 8007290:	4606      	mov	r6, r0
 8007292:	460f      	mov	r7, r1
 8007294:	e713      	b.n	80070be <__kernel_rem_pio2+0x2c6>
 8007296:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800729a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800729e:	f7f9 f953 	bl	8000548 <__aeabi_dmul>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4648      	mov	r0, r9
 80072a8:	4651      	mov	r1, sl
 80072aa:	f7f8 ff97 	bl	80001dc <__adddf3>
 80072ae:	3701      	adds	r7, #1
 80072b0:	4681      	mov	r9, r0
 80072b2:	468a      	mov	sl, r1
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	429f      	cmp	r7, r3
 80072b8:	dc02      	bgt.n	80072c0 <__kernel_rem_pio2+0x4c8>
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	429f      	cmp	r7, r3
 80072be:	ddea      	ble.n	8007296 <__kernel_rem_pio2+0x49e>
 80072c0:	9a06      	ldr	r2, [sp, #24]
 80072c2:	ab48      	add	r3, sp, #288	; 0x120
 80072c4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80072c8:	e9c6 9a00 	strd	r9, sl, [r6]
 80072cc:	3c01      	subs	r4, #1
 80072ce:	e6fa      	b.n	80070c6 <__kernel_rem_pio2+0x2ce>
 80072d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	dc0b      	bgt.n	80072ee <__kernel_rem_pio2+0x4f6>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dc39      	bgt.n	800734e <__kernel_rem_pio2+0x556>
 80072da:	d05d      	beq.n	8007398 <__kernel_rem_pio2+0x5a0>
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	f003 0007 	and.w	r0, r3, #7
 80072e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80072e6:	ecbd 8b02 	vpop	{d8}
 80072ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d1f3      	bne.n	80072dc <__kernel_rem_pio2+0x4e4>
 80072f4:	9b05      	ldr	r3, [sp, #20]
 80072f6:	9500      	str	r5, [sp, #0]
 80072f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80072fc:	eb0d 0403 	add.w	r4, sp, r3
 8007300:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007304:	46a2      	mov	sl, r4
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f1aa 0a08 	sub.w	sl, sl, #8
 800730e:	dc69      	bgt.n	80073e4 <__kernel_rem_pio2+0x5ec>
 8007310:	46aa      	mov	sl, r5
 8007312:	f1ba 0f01 	cmp.w	sl, #1
 8007316:	f1a4 0408 	sub.w	r4, r4, #8
 800731a:	f300 8083 	bgt.w	8007424 <__kernel_rem_pio2+0x62c>
 800731e:	9c05      	ldr	r4, [sp, #20]
 8007320:	ab48      	add	r3, sp, #288	; 0x120
 8007322:	441c      	add	r4, r3
 8007324:	2000      	movs	r0, #0
 8007326:	2100      	movs	r1, #0
 8007328:	2d01      	cmp	r5, #1
 800732a:	f300 809a 	bgt.w	8007462 <__kernel_rem_pio2+0x66a>
 800732e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007332:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007336:	f1bb 0f00 	cmp.w	fp, #0
 800733a:	f040 8098 	bne.w	800746e <__kernel_rem_pio2+0x676>
 800733e:	9b04      	ldr	r3, [sp, #16]
 8007340:	e9c3 7800 	strd	r7, r8, [r3]
 8007344:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007348:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800734c:	e7c6      	b.n	80072dc <__kernel_rem_pio2+0x4e4>
 800734e:	9e05      	ldr	r6, [sp, #20]
 8007350:	ab48      	add	r3, sp, #288	; 0x120
 8007352:	441e      	add	r6, r3
 8007354:	462c      	mov	r4, r5
 8007356:	2000      	movs	r0, #0
 8007358:	2100      	movs	r1, #0
 800735a:	2c00      	cmp	r4, #0
 800735c:	da33      	bge.n	80073c6 <__kernel_rem_pio2+0x5ce>
 800735e:	f1bb 0f00 	cmp.w	fp, #0
 8007362:	d036      	beq.n	80073d2 <__kernel_rem_pio2+0x5da>
 8007364:	4602      	mov	r2, r0
 8007366:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800736a:	9c04      	ldr	r4, [sp, #16]
 800736c:	e9c4 2300 	strd	r2, r3, [r4]
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007378:	f7f8 ff2e 	bl	80001d8 <__aeabi_dsub>
 800737c:	ae4a      	add	r6, sp, #296	; 0x128
 800737e:	2401      	movs	r4, #1
 8007380:	42a5      	cmp	r5, r4
 8007382:	da29      	bge.n	80073d8 <__kernel_rem_pio2+0x5e0>
 8007384:	f1bb 0f00 	cmp.w	fp, #0
 8007388:	d002      	beq.n	8007390 <__kernel_rem_pio2+0x598>
 800738a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800738e:	4619      	mov	r1, r3
 8007390:	9b04      	ldr	r3, [sp, #16]
 8007392:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007396:	e7a1      	b.n	80072dc <__kernel_rem_pio2+0x4e4>
 8007398:	9c05      	ldr	r4, [sp, #20]
 800739a:	ab48      	add	r3, sp, #288	; 0x120
 800739c:	441c      	add	r4, r3
 800739e:	2000      	movs	r0, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	da09      	bge.n	80073ba <__kernel_rem_pio2+0x5c2>
 80073a6:	f1bb 0f00 	cmp.w	fp, #0
 80073aa:	d002      	beq.n	80073b2 <__kernel_rem_pio2+0x5ba>
 80073ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073b0:	4619      	mov	r1, r3
 80073b2:	9b04      	ldr	r3, [sp, #16]
 80073b4:	e9c3 0100 	strd	r0, r1, [r3]
 80073b8:	e790      	b.n	80072dc <__kernel_rem_pio2+0x4e4>
 80073ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80073be:	f7f8 ff0d 	bl	80001dc <__adddf3>
 80073c2:	3d01      	subs	r5, #1
 80073c4:	e7ed      	b.n	80073a2 <__kernel_rem_pio2+0x5aa>
 80073c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80073ca:	f7f8 ff07 	bl	80001dc <__adddf3>
 80073ce:	3c01      	subs	r4, #1
 80073d0:	e7c3      	b.n	800735a <__kernel_rem_pio2+0x562>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	e7c8      	b.n	800736a <__kernel_rem_pio2+0x572>
 80073d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80073dc:	f7f8 fefe 	bl	80001dc <__adddf3>
 80073e0:	3401      	adds	r4, #1
 80073e2:	e7cd      	b.n	8007380 <__kernel_rem_pio2+0x588>
 80073e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80073e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80073ec:	9b00      	ldr	r3, [sp, #0]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	4632      	mov	r2, r6
 80073f4:	463b      	mov	r3, r7
 80073f6:	4640      	mov	r0, r8
 80073f8:	4649      	mov	r1, r9
 80073fa:	f7f8 feef 	bl	80001dc <__adddf3>
 80073fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4640      	mov	r0, r8
 8007408:	4649      	mov	r1, r9
 800740a:	f7f8 fee5 	bl	80001d8 <__aeabi_dsub>
 800740e:	4632      	mov	r2, r6
 8007410:	463b      	mov	r3, r7
 8007412:	f7f8 fee3 	bl	80001dc <__adddf3>
 8007416:	ed9d 7b06 	vldr	d7, [sp, #24]
 800741a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800741e:	ed8a 7b00 	vstr	d7, [sl]
 8007422:	e770      	b.n	8007306 <__kernel_rem_pio2+0x50e>
 8007424:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007428:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800742c:	4640      	mov	r0, r8
 800742e:	4632      	mov	r2, r6
 8007430:	463b      	mov	r3, r7
 8007432:	4649      	mov	r1, r9
 8007434:	f7f8 fed2 	bl	80001dc <__adddf3>
 8007438:	e9cd 0100 	strd	r0, r1, [sp]
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4640      	mov	r0, r8
 8007442:	4649      	mov	r1, r9
 8007444:	f7f8 fec8 	bl	80001d8 <__aeabi_dsub>
 8007448:	4632      	mov	r2, r6
 800744a:	463b      	mov	r3, r7
 800744c:	f7f8 fec6 	bl	80001dc <__adddf3>
 8007450:	ed9d 7b00 	vldr	d7, [sp]
 8007454:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007458:	ed84 7b00 	vstr	d7, [r4]
 800745c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007460:	e757      	b.n	8007312 <__kernel_rem_pio2+0x51a>
 8007462:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007466:	f7f8 feb9 	bl	80001dc <__adddf3>
 800746a:	3d01      	subs	r5, #1
 800746c:	e75c      	b.n	8007328 <__kernel_rem_pio2+0x530>
 800746e:	9b04      	ldr	r3, [sp, #16]
 8007470:	9a04      	ldr	r2, [sp, #16]
 8007472:	601f      	str	r7, [r3, #0]
 8007474:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007478:	605c      	str	r4, [r3, #4]
 800747a:	609d      	str	r5, [r3, #8]
 800747c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007480:	60d3      	str	r3, [r2, #12]
 8007482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007486:	6110      	str	r0, [r2, #16]
 8007488:	6153      	str	r3, [r2, #20]
 800748a:	e727      	b.n	80072dc <__kernel_rem_pio2+0x4e4>
 800748c:	41700000 	.word	0x41700000
 8007490:	3e700000 	.word	0x3e700000
 8007494:	00000000 	.word	0x00000000

08007498 <scalbn>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	ec55 4b10 	vmov	r4, r5, d0
 800749e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80074a2:	4606      	mov	r6, r0
 80074a4:	462b      	mov	r3, r5
 80074a6:	b999      	cbnz	r1, 80074d0 <scalbn+0x38>
 80074a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80074ac:	4323      	orrs	r3, r4
 80074ae:	d03f      	beq.n	8007530 <scalbn+0x98>
 80074b0:	4b35      	ldr	r3, [pc, #212]	; (8007588 <scalbn+0xf0>)
 80074b2:	4629      	mov	r1, r5
 80074b4:	ee10 0a10 	vmov	r0, s0
 80074b8:	2200      	movs	r2, #0
 80074ba:	f7f9 f845 	bl	8000548 <__aeabi_dmul>
 80074be:	4b33      	ldr	r3, [pc, #204]	; (800758c <scalbn+0xf4>)
 80074c0:	429e      	cmp	r6, r3
 80074c2:	4604      	mov	r4, r0
 80074c4:	460d      	mov	r5, r1
 80074c6:	da10      	bge.n	80074ea <scalbn+0x52>
 80074c8:	a327      	add	r3, pc, #156	; (adr r3, 8007568 <scalbn+0xd0>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	e01f      	b.n	8007510 <scalbn+0x78>
 80074d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80074d4:	4291      	cmp	r1, r2
 80074d6:	d10c      	bne.n	80074f2 <scalbn+0x5a>
 80074d8:	ee10 2a10 	vmov	r2, s0
 80074dc:	4620      	mov	r0, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	f7f8 fe7c 	bl	80001dc <__adddf3>
 80074e4:	4604      	mov	r4, r0
 80074e6:	460d      	mov	r5, r1
 80074e8:	e022      	b.n	8007530 <scalbn+0x98>
 80074ea:	460b      	mov	r3, r1
 80074ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80074f0:	3936      	subs	r1, #54	; 0x36
 80074f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80074f6:	4296      	cmp	r6, r2
 80074f8:	dd0d      	ble.n	8007516 <scalbn+0x7e>
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	a11c      	add	r1, pc, #112	; (adr r1, 8007570 <scalbn+0xd8>)
 80074fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007502:	da02      	bge.n	800750a <scalbn+0x72>
 8007504:	a11c      	add	r1, pc, #112	; (adr r1, 8007578 <scalbn+0xe0>)
 8007506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800750a:	a319      	add	r3, pc, #100	; (adr r3, 8007570 <scalbn+0xd8>)
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f7f9 f81a 	bl	8000548 <__aeabi_dmul>
 8007514:	e7e6      	b.n	80074e4 <scalbn+0x4c>
 8007516:	1872      	adds	r2, r6, r1
 8007518:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800751c:	428a      	cmp	r2, r1
 800751e:	dcec      	bgt.n	80074fa <scalbn+0x62>
 8007520:	2a00      	cmp	r2, #0
 8007522:	dd08      	ble.n	8007536 <scalbn+0x9e>
 8007524:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007528:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800752c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007530:	ec45 4b10 	vmov	d0, r4, r5
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800753a:	da08      	bge.n	800754e <scalbn+0xb6>
 800753c:	2d00      	cmp	r5, #0
 800753e:	a10a      	add	r1, pc, #40	; (adr r1, 8007568 <scalbn+0xd0>)
 8007540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007544:	dac0      	bge.n	80074c8 <scalbn+0x30>
 8007546:	a10e      	add	r1, pc, #56	; (adr r1, 8007580 <scalbn+0xe8>)
 8007548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800754c:	e7bc      	b.n	80074c8 <scalbn+0x30>
 800754e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007552:	3236      	adds	r2, #54	; 0x36
 8007554:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007558:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800755c:	4620      	mov	r0, r4
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <scalbn+0xf8>)
 8007560:	2200      	movs	r2, #0
 8007562:	e7d5      	b.n	8007510 <scalbn+0x78>
 8007564:	f3af 8000 	nop.w
 8007568:	c2f8f359 	.word	0xc2f8f359
 800756c:	01a56e1f 	.word	0x01a56e1f
 8007570:	8800759c 	.word	0x8800759c
 8007574:	7e37e43c 	.word	0x7e37e43c
 8007578:	8800759c 	.word	0x8800759c
 800757c:	fe37e43c 	.word	0xfe37e43c
 8007580:	c2f8f359 	.word	0xc2f8f359
 8007584:	81a56e1f 	.word	0x81a56e1f
 8007588:	43500000 	.word	0x43500000
 800758c:	ffff3cb0 	.word	0xffff3cb0
 8007590:	3c900000 	.word	0x3c900000
 8007594:	00000000 	.word	0x00000000

08007598 <floor>:
 8007598:	ec51 0b10 	vmov	r0, r1, d0
 800759c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80075a8:	2e13      	cmp	r6, #19
 80075aa:	ee10 5a10 	vmov	r5, s0
 80075ae:	ee10 8a10 	vmov	r8, s0
 80075b2:	460c      	mov	r4, r1
 80075b4:	dc31      	bgt.n	800761a <floor+0x82>
 80075b6:	2e00      	cmp	r6, #0
 80075b8:	da14      	bge.n	80075e4 <floor+0x4c>
 80075ba:	a333      	add	r3, pc, #204	; (adr r3, 8007688 <floor+0xf0>)
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	f7f8 fe0c 	bl	80001dc <__adddf3>
 80075c4:	2200      	movs	r2, #0
 80075c6:	2300      	movs	r3, #0
 80075c8:	f7f9 fa4e 	bl	8000a68 <__aeabi_dcmpgt>
 80075cc:	b138      	cbz	r0, 80075de <floor+0x46>
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	da53      	bge.n	800767a <floor+0xe2>
 80075d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80075d6:	4325      	orrs	r5, r4
 80075d8:	d052      	beq.n	8007680 <floor+0xe8>
 80075da:	4c2d      	ldr	r4, [pc, #180]	; (8007690 <floor+0xf8>)
 80075dc:	2500      	movs	r5, #0
 80075de:	4621      	mov	r1, r4
 80075e0:	4628      	mov	r0, r5
 80075e2:	e024      	b.n	800762e <floor+0x96>
 80075e4:	4f2b      	ldr	r7, [pc, #172]	; (8007694 <floor+0xfc>)
 80075e6:	4137      	asrs	r7, r6
 80075e8:	ea01 0307 	and.w	r3, r1, r7
 80075ec:	4303      	orrs	r3, r0
 80075ee:	d01e      	beq.n	800762e <floor+0x96>
 80075f0:	a325      	add	r3, pc, #148	; (adr r3, 8007688 <floor+0xf0>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f8 fdf1 	bl	80001dc <__adddf3>
 80075fa:	2200      	movs	r2, #0
 80075fc:	2300      	movs	r3, #0
 80075fe:	f7f9 fa33 	bl	8000a68 <__aeabi_dcmpgt>
 8007602:	2800      	cmp	r0, #0
 8007604:	d0eb      	beq.n	80075de <floor+0x46>
 8007606:	2c00      	cmp	r4, #0
 8007608:	bfbe      	ittt	lt
 800760a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800760e:	4133      	asrlt	r3, r6
 8007610:	18e4      	addlt	r4, r4, r3
 8007612:	ea24 0407 	bic.w	r4, r4, r7
 8007616:	2500      	movs	r5, #0
 8007618:	e7e1      	b.n	80075de <floor+0x46>
 800761a:	2e33      	cmp	r6, #51	; 0x33
 800761c:	dd0b      	ble.n	8007636 <floor+0x9e>
 800761e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007622:	d104      	bne.n	800762e <floor+0x96>
 8007624:	ee10 2a10 	vmov	r2, s0
 8007628:	460b      	mov	r3, r1
 800762a:	f7f8 fdd7 	bl	80001dc <__adddf3>
 800762e:	ec41 0b10 	vmov	d0, r0, r1
 8007632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007636:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800763a:	f04f 37ff 	mov.w	r7, #4294967295
 800763e:	40df      	lsrs	r7, r3
 8007640:	4238      	tst	r0, r7
 8007642:	d0f4      	beq.n	800762e <floor+0x96>
 8007644:	a310      	add	r3, pc, #64	; (adr r3, 8007688 <floor+0xf0>)
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	f7f8 fdc7 	bl	80001dc <__adddf3>
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	f7f9 fa09 	bl	8000a68 <__aeabi_dcmpgt>
 8007656:	2800      	cmp	r0, #0
 8007658:	d0c1      	beq.n	80075de <floor+0x46>
 800765a:	2c00      	cmp	r4, #0
 800765c:	da0a      	bge.n	8007674 <floor+0xdc>
 800765e:	2e14      	cmp	r6, #20
 8007660:	d101      	bne.n	8007666 <floor+0xce>
 8007662:	3401      	adds	r4, #1
 8007664:	e006      	b.n	8007674 <floor+0xdc>
 8007666:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800766a:	2301      	movs	r3, #1
 800766c:	40b3      	lsls	r3, r6
 800766e:	441d      	add	r5, r3
 8007670:	45a8      	cmp	r8, r5
 8007672:	d8f6      	bhi.n	8007662 <floor+0xca>
 8007674:	ea25 0507 	bic.w	r5, r5, r7
 8007678:	e7b1      	b.n	80075de <floor+0x46>
 800767a:	2500      	movs	r5, #0
 800767c:	462c      	mov	r4, r5
 800767e:	e7ae      	b.n	80075de <floor+0x46>
 8007680:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007684:	e7ab      	b.n	80075de <floor+0x46>
 8007686:	bf00      	nop
 8007688:	8800759c 	.word	0x8800759c
 800768c:	7e37e43c 	.word	0x7e37e43c
 8007690:	bff00000 	.word	0xbff00000
 8007694:	000fffff 	.word	0x000fffff

08007698 <_init>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr

080076a4 <_fini>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr

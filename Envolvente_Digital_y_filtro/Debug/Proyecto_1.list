
Proyecto_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e7c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800504c  0800504c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800504c  0800504c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800504c  0800504c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000001c  08005070  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08005070  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6b1  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb9  00000000  00000000  0002e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00030700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b70  00000000  00000000  000315d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211b5  00000000  00000000  00032148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9cc  00000000  00000000  000532fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d5b  00000000  00000000  00062cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040c0  00000000  00000000  00135a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00139ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ff4 	.word	0x08004ff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08004ff4 	.word	0x08004ff4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	0000      	movs	r0, r0
	...

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fd76 	bl	8001656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f9e3 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 fb1d 	bl	80011ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b72:	f000 fa31 	bl	8000fd8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b76:	f000 fa93 	bl	80010a0 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000b7a:	f000 fac3 	bl	8001104 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_EXTI_Callback(GPIO_PIN_4);

  	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000b7e:	2110      	movs	r1, #16
 8000b80:	4897      	ldr	r0, [pc, #604]	; (8000de0 <main+0x280>)
 8000b82:	f002 f942 	bl	8002e0a <HAL_DAC_Start>
  	HAL_TIM_Base_Start_IT(&htim1);
 8000b86:	4897      	ldr	r0, [pc, #604]	; (8000de4 <main+0x284>)
 8000b88:	f003 fe2e 	bl	80047e8 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch(etapas)
 8000b8c:	4b96      	ldr	r3, [pc, #600]	; (8000de8 <main+0x288>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d8fb      	bhi.n	8000b8c <main+0x2c>
 8000b94:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <main+0x3c>)
 8000b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000bb1 	.word	0x08000bb1
 8000ba0:	08000cd9 	.word	0x08000cd9
 8000ba4:	08000d6f 	.word	0x08000d6f
 8000ba8:	08000e19 	.word	0x08000e19
 8000bac:	08000ed7 	.word	0x08000ed7
	  {
	  	  case attack:

	  		  float pendiente_a = 3.3/var;
 8000bb0:	4b8e      	ldr	r3, [pc, #568]	; (8000dec <main+0x28c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc6f 	bl	8000498 <__aeabi_f2d>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	a186      	add	r1, pc, #536	; (adr r1, 8000dd8 <main+0x278>)
 8000bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bc4:	f7ff fdea 	bl	800079c <__aeabi_ddiv>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	460b      	mov	r3, r1
 8000bcc:	4610      	mov	r0, r2
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f7ff ff74 	bl	8000abc <__aeabi_d2f>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	603b      	str	r3, [r7, #0]
	  		  b_a = 0;
 8000bd8:	4b85      	ldr	r3, [pc, #532]	; (8000df0 <main+0x290>)
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]

	  		  if(flag == 1)
 8000be0:	4b84      	ldr	r3, [pc, #528]	; (8000df4 <main+0x294>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d12c      	bne.n	8000c42 <main+0xe2>
	  		  {
	  			  env = generador_rectas(pendiente_a, b_a);
 8000be8:	4b81      	ldr	r3, [pc, #516]	; (8000df0 <main+0x290>)
 8000bea:	edd3 7a00 	vldr	s15, [r3]
 8000bee:	eef0 0a67 	vmov.f32	s1, s15
 8000bf2:	ed97 0a00 	vldr	s0, [r7]
 8000bf6:	f000 fb1f 	bl	8001238 <generador_rectas>
 8000bfa:	eef0 7a40 	vmov.f32	s15, s0
 8000bfe:	4b7e      	ldr	r3, [pc, #504]	; (8000df8 <main+0x298>)
 8000c00:	edc3 7a00 	vstr	s15, [r3]
	  			  flag = 0;
 8000c04:	4b7b      	ldr	r3, [pc, #492]	; (8000df4 <main+0x294>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
	  			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000c0a:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <main+0x298>)
 8000c0c:	edd3 7a00 	vldr	s15, [r3]
 8000c10:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8000dfc <main+0x29c>
 8000c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c18:	ee17 0a90 	vmov	r0, s15
 8000c1c:	f7ff fc3c 	bl	8000498 <__aeabi_f2d>
 8000c20:	a36d      	add	r3, pc, #436	; (adr r3, 8000dd8 <main+0x278>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff fdb9 	bl	800079c <__aeabi_ddiv>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff ff23 	bl	8000a7c <__aeabi_d2uiz>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4868      	ldr	r0, [pc, #416]	; (8000de0 <main+0x280>)
 8000c3e:	f002 f931 	bl	8002ea4 <HAL_DAC_SetValue>
	  		  }

	  		  if(env >= 3.3)
 8000c42:	4b6d      	ldr	r3, [pc, #436]	; (8000df8 <main+0x298>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fc26 	bl	8000498 <__aeabi_f2d>
 8000c4c:	a362      	add	r3, pc, #392	; (adr r3, 8000dd8 <main+0x278>)
 8000c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c52:	f7ff feff 	bl	8000a54 <__aeabi_dcmpge>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d039      	beq.n	8000cd0 <main+0x170>
	  		  {
	  			  etapas = decay;
 8000c5c:	4b62      	ldr	r3, [pc, #392]	; (8000de8 <main+0x288>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
	  			  pendiente_d = (v_s - 3.3)/t_d;
 8000c62:	4b67      	ldr	r3, [pc, #412]	; (8000e00 <main+0x2a0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fc16 	bl	8000498 <__aeabi_f2d>
 8000c6c:	a35a      	add	r3, pc, #360	; (adr r3, 8000dd8 <main+0x278>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fab1 	bl	80001d8 <__aeabi_dsub>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4614      	mov	r4, r2
 8000c7c:	461d      	mov	r5, r3
 8000c7e:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <main+0x2a4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc08 	bl	8000498 <__aeabi_f2d>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	f7ff fd84 	bl	800079c <__aeabi_ddiv>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f7ff ff0e 	bl	8000abc <__aeabi_d2f>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a59      	ldr	r2, [pc, #356]	; (8000e08 <main+0x2a8>)
 8000ca4:	6013      	str	r3, [r2, #0]
	  			  b_d = v_s - pendiente_d * t_d;
 8000ca6:	4b56      	ldr	r3, [pc, #344]	; (8000e00 <main+0x2a0>)
 8000ca8:	ed93 7a00 	vldr	s14, [r3]
 8000cac:	4b56      	ldr	r3, [pc, #344]	; (8000e08 <main+0x2a8>)
 8000cae:	edd3 6a00 	vldr	s13, [r3]
 8000cb2:	4b54      	ldr	r3, [pc, #336]	; (8000e04 <main+0x2a4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc0:	4b52      	ldr	r3, [pc, #328]	; (8000e0c <main+0x2ac>)
 8000cc2:	edc3 7a00 	vstr	s15, [r3]
	  			  x = 0;
 8000cc6:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <main+0x2b0>)
 8000cc8:	f04f 0200 	mov.w	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			  etapas = attack;
	  		  }

	  		  break;
 8000cce:	e113      	b.n	8000ef8 <main+0x398>
	  			  etapas = attack;
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <main+0x288>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000cd6:	e10f      	b.n	8000ef8 <main+0x398>
	  	  case decay:

	  		  //float pendiente_d = (v_s - 3.3)/t_d;
	  		  //b_d = v_s - pendiente_d * t_d;

	  		  if(flag == 1)
 8000cd8:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <main+0x294>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d12f      	bne.n	8000d40 <main+0x1e0>
	  		  {
	  			  env = generador_rectas(pendiente_d, b_d);
 8000ce0:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <main+0x2a8>)
 8000ce2:	edd3 7a00 	vldr	s15, [r3]
 8000ce6:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <main+0x2ac>)
 8000ce8:	ed93 7a00 	vldr	s14, [r3]
 8000cec:	eef0 0a47 	vmov.f32	s1, s14
 8000cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf4:	f000 faa0 	bl	8001238 <generador_rectas>
 8000cf8:	eef0 7a40 	vmov.f32	s15, s0
 8000cfc:	4b3e      	ldr	r3, [pc, #248]	; (8000df8 <main+0x298>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	  			  flag = 0;
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <main+0x294>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
	  			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000d08:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <main+0x298>)
 8000d0a:	edd3 7a00 	vldr	s15, [r3]
 8000d0e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000dfc <main+0x29c>
 8000d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d16:	ee17 0a90 	vmov	r0, s15
 8000d1a:	f7ff fbbd 	bl	8000498 <__aeabi_f2d>
 8000d1e:	a32e      	add	r3, pc, #184	; (adr r3, 8000dd8 <main+0x278>)
 8000d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d24:	f7ff fd3a 	bl	800079c <__aeabi_ddiv>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f7ff fea4 	bl	8000a7c <__aeabi_d2uiz>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2200      	movs	r2, #0
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <main+0x280>)
 8000d3c:	f002 f8b2 	bl	8002ea4 <HAL_DAC_SetValue>
	  		  }

	  		  if(env <= v_s)
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <main+0x298>)
 8000d42:	ed93 7a00 	vldr	s14, [r3]
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <main+0x2a0>)
 8000d48:	edd3 7a00 	vldr	s15, [r3]
 8000d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d54:	d807      	bhi.n	8000d66 <main+0x206>
	  		  {
	  			  etapas = sustain;
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <main+0x288>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <main+0x2b0>)
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			  etapas = decay;
	  		  }

	  		  break;
 8000d64:	e0c8      	b.n	8000ef8 <main+0x398>
	  			  etapas = decay;
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <main+0x288>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000d6c:	e0c4      	b.n	8000ef8 <main+0x398>
	  	  case sustain:

	  		  if(flag == 1)
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <main+0x294>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d11e      	bne.n	8000db4 <main+0x254>
	  		  {
	  			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <main+0x298>)
 8000d78:	edd3 7a00 	vldr	s15, [r3]
 8000d7c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000dfc <main+0x29c>
 8000d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d84:	ee17 0a90 	vmov	r0, s15
 8000d88:	f7ff fb86 	bl	8000498 <__aeabi_f2d>
 8000d8c:	a312      	add	r3, pc, #72	; (adr r3, 8000dd8 <main+0x278>)
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	f7ff fd03 	bl	800079c <__aeabi_ddiv>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f7ff fe6d 	bl	8000a7c <__aeabi_d2uiz>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2200      	movs	r2, #0
 8000da6:	2110      	movs	r1, #16
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <main+0x280>)
 8000daa:	f002 f87b 	bl	8002ea4 <HAL_DAC_SetValue>
	  			  flag = 0;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <main+0x294>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
	  		  }

	  		  if(Gate == 0)
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <main+0x2b4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d107      	bne.n	8000dcc <main+0x26c>
	  		  {
	  			  etapas = release;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <main+0x288>)
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <main+0x2b0>)
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			etapas = sustain;
	  		  }

	  		  break;
 8000dca:	e095      	b.n	8000ef8 <main+0x398>
	  			etapas = sustain;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <main+0x288>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000dd2:	e091      	b.n	8000ef8 <main+0x398>
 8000dd4:	f3af 8000 	nop.w
 8000dd8:	66666666 	.word	0x66666666
 8000ddc:	400a6666 	.word	0x400a6666
 8000de0:	2000009c 	.word	0x2000009c
 8000de4:	200000b0 	.word	0x200000b0
 8000de8:	20000000 	.word	0x20000000
 8000dec:	200000fc 	.word	0x200000fc
 8000df0:	20000100 	.word	0x20000100
 8000df4:	2000011c 	.word	0x2000011c
 8000df8:	20000118 	.word	0x20000118
 8000dfc:	457ff000 	.word	0x457ff000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000120 	.word	0x20000120
 8000e0c:	20000104 	.word	0x20000104
 8000e10:	20000110 	.word	0x20000110
 8000e14:	2000010c 	.word	0x2000010c
	  	  case release:

	  		  float pendiente_r = (0 - v_s)/t_r;
 8000e18:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <main+0x3a8>)
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000f0c <main+0x3ac>
 8000e22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <main+0x3b0>)
 8000e28:	ed93 7a00 	vldr	s14, [r3]
 8000e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e30:	edc7 7a01 	vstr	s15, [r7, #4]
	  		  b_r = - pendiente_r * t_r;
 8000e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e38:	eeb1 7a67 	vneg.f32	s14, s15
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <main+0x3b0>)
 8000e3e:	edd3 7a00 	vldr	s15, [r3]
 8000e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <main+0x3b4>)
 8000e48:	edc3 7a00 	vstr	s15, [r3]

	  		  if(flag == 1)
 8000e4c:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <main+0x3b8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d12c      	bne.n	8000eae <main+0x34e>
	  		  {
	  			  env = generador_rectas(pendiente_r, b_r);
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <main+0x3b4>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	eef0 0a67 	vmov.f32	s1, s15
 8000e5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e62:	f000 f9e9 	bl	8001238 <generador_rectas>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <main+0x3bc>)
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
				  flag = 0;
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <main+0x3b8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
				  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <main+0x3bc>)
 8000e78:	edd3 7a00 	vldr	s15, [r3]
 8000e7c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000f20 <main+0x3c0>
 8000e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e84:	ee17 0a90 	vmov	r0, s15
 8000e88:	f7ff fb06 	bl	8000498 <__aeabi_f2d>
 8000e8c:	a31c      	add	r3, pc, #112	; (adr r3, 8000f00 <main+0x3a0>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	f7ff fc83 	bl	800079c <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fded 	bl	8000a7c <__aeabi_d2uiz>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	481e      	ldr	r0, [pc, #120]	; (8000f24 <main+0x3c4>)
 8000eaa:	f001 fffb 	bl	8002ea4 <HAL_DAC_SetValue>
	  		  }

	  		  if(env <=0)
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <main+0x3bc>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d807      	bhi.n	8000ece <main+0x36e>
	  		  {
	  			  etapas = off;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <main+0x3c8>)
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <main+0x3cc>)
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			  etapas = release;
	  		  }

	  		  break;
 8000ecc:	e014      	b.n	8000ef8 <main+0x398>
	  			  etapas = release;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <main+0x3c8>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000ed4:	e010      	b.n	8000ef8 <main+0x398>
	  	  case off:

	  		  if(Gate == 1)
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <main+0x3d0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d107      	bne.n	8000eee <main+0x38e>
	  		  {
	  			  etapas = attack;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <main+0x3c8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <main+0x3cc>)
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			  etapas = off;
	  		  }

	  		  break;
 8000eec:	e002      	b.n	8000ef4 <main+0x394>
	  			  etapas = off;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <main+0x3c8>)
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000ef4:	bf00      	nop
 8000ef6:	e649      	b.n	8000b8c <main+0x2c>
	  switch(etapas)
 8000ef8:	e648      	b.n	8000b8c <main+0x2c>
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w
 8000f00:	66666666 	.word	0x66666666
 8000f04:	400a6666 	.word	0x400a6666
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	00000000 	.word	0x00000000
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000108 	.word	0x20000108
 8000f18:	2000011c 	.word	0x2000011c
 8000f1c:	20000118 	.word	0x20000118
 8000f20:	457ff000 	.word	0x457ff000
 8000f24:	2000009c 	.word	0x2000009c
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000110 	.word	0x20000110
 8000f30:	2000010c 	.word	0x2000010c

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	; 0x58
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	2244      	movs	r2, #68	; 0x44
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 f82a 	bl	8004f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f5a:	f002 faaf 	bl	80034bc <HAL_PWREx_ControlVoltageScaling>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f64:	f000 fa0e 	bl	8001384 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f74:	2360      	movs	r3, #96	; 0x60
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f84:	2328      	movs	r3, #40	; 0x28
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 fae5 	bl	8003568 <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fa4:	f000 f9ee 	bl	8001384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa8:	230f      	movs	r3, #15
 8000faa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	2303      	movs	r3, #3
 8000fae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fee5 	bl	8003d90 <HAL_RCC_ClockConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fcc:	f000 f9da 	bl	8001384 <Error_Handler>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3758      	adds	r7, #88	; 0x58
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <MX_ADC1_Init+0xbc>)
 8000ff0:	4a29      	ldr	r2, [pc, #164]	; (8001098 <MX_ADC1_Init+0xc0>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <MX_ADC1_Init+0xbc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <MX_ADC1_Init+0xbc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_ADC1_Init+0xbc>)
 800100e:	2204      	movs	r2, #4
 8001010:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001014:	2200      	movs	r2, #0
 8001016:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_ADC1_Init+0xbc>)
 800101a:	2200      	movs	r2, #0
 800101c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001020:	2201      	movs	r2, #1
 8001022:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_ADC1_Init+0xbc>)
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_ADC1_Init+0xbc>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001042:	2200      	movs	r2, #0
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <MX_ADC1_Init+0xbc>)
 8001050:	f000 fdb0 	bl	8001bb4 <HAL_ADC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800105a:	f000 f993 	bl	8001384 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_ADC1_Init+0xc4>)
 8001060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001062:	2306      	movs	r3, #6
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106a:	237f      	movs	r3, #127	; 0x7f
 800106c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106e:	2304      	movs	r3, #4
 8001070:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_ADC1_Init+0xbc>)
 800107c:	f001 f80e 	bl	800209c <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001086:	f000 f97d 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000038 	.word	0x20000038
 8001098:	50040000 	.word	0x50040000
 800109c:	14f00020 	.word	0x14f00020

080010a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2224      	movs	r2, #36	; 0x24
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 ff75 	bl	8004f9c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_DAC1_Init+0x5c>)
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_DAC1_Init+0x60>)
 80010b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <MX_DAC1_Init+0x5c>)
 80010ba:	f001 fe84 	bl	8002dc6 <HAL_DAC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010c4:	f000 f95e 	bl	8001384 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2210      	movs	r2, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <MX_DAC1_Init+0x5c>)
 80010e4:	f001 ff03 	bl	8002eee <HAL_DAC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80010ee:	f000 f949 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000009c 	.word	0x2000009c
 8001100:	40007400 	.word	0x40007400

08001104 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_TIM1_Init+0xa0>)
 8001124:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <MX_TIM1_Init+0xa4>)
 8001126:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_TIM1_Init+0xa0>)
 800112a:	224f      	movs	r2, #79	; 0x4f
 800112c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM1_Init+0xa0>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM1_Init+0xa0>)
 8001136:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800113a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM1_Init+0xa0>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM1_Init+0xa0>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM1_Init+0xa0>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800114e:	4815      	ldr	r0, [pc, #84]	; (80011a4 <MX_TIM1_Init+0xa0>)
 8001150:	f003 faf2 	bl	8004738 <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800115a:	f000 f913 	bl	8001384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <MX_TIM1_Init+0xa0>)
 800116c:	f003 fc97 	bl	8004a9e <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001176:	f000 f905 	bl	8001384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM1_Init+0xa0>)
 800118c:	f003 fe82 	bl	8004e94 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001196:	f000 f8f5 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000b0 	.word	0x200000b0
 80011a8:	40012c00 	.word	0x40012c00

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_GPIO_Init+0x88>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <MX_GPIO_Init+0x88>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_GPIO_Init+0x88>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f002 f92e 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011e4:	2310      	movs	r3, #16
 80011e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011e8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80011ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ee:	2302      	movs	r3, #2
 80011f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f001 ff9f 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011fe:	2340      	movs	r3, #64	; 0x40
 8001200:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f001 ff91 	bl	800313c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	200a      	movs	r0, #10
 8001220:	f001 fd9b 	bl	8002d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001224:	200a      	movs	r0, #10
 8001226:	f001 fdb4 	bl	8002d92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <generador_rectas>:

/* USER CODE BEGIN 4 */

float generador_rectas(float m, float b)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001242:	edc7 0a00 	vstr	s1, [r7]

	y = m*x+b;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <generador_rectas+0x40>)
 8001248:	ed93 7a00 	vldr	s14, [r3]
 800124c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001254:	edd7 7a00 	vldr	s15, [r7]
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <generador_rectas+0x44>)
 800125e:	edc3 7a00 	vstr	s15, [r3]

	//x += 20e-6;

	return y;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <generador_rectas+0x44>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	ee07 3a90 	vmov	s15, r3
}
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000110 	.word	0x20000110
 800127c:	20000114 	.word	0x20000114

08001280 <HAL_GPIO_EXTI_Callback>:

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4)
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	2b10      	cmp	r3, #16
 800128e:	d13a      	bne.n	8001306 <HAL_GPIO_EXTI_Callback+0x86>
	{
		//HAL_Delay(10);

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 8001290:	2110      	movs	r1, #16
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f002 f8bb 	bl	8003410 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d109      	bne.n	80012b4 <HAL_GPIO_EXTI_Callback+0x34>
		{
			Gate = 1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_GPIO_EXTI_Callback+0x98>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2140      	movs	r1, #64	; 0x40
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f002 f8c7 	bl	8003440 <HAL_GPIO_WritePin>
 80012b2:	e008      	b.n	80012c6 <HAL_GPIO_EXTI_Callback+0x46>
		}
		else
		{
			Gate = 0;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_GPIO_EXTI_Callback+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2140      	movs	r1, #64	; 0x40
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f002 f8bd 	bl	8003440 <HAL_GPIO_WritePin>
		}

		HAL_ADC_Start(&hadc1); // Inicia la conversión ADC
 80012c6:	4815      	ldr	r0, [pc, #84]	; (800131c <HAL_GPIO_EXTI_Callback+0x9c>)
 80012c8:	f000 fdb6 	bl	8001e38 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Espera la conversión
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <HAL_GPIO_EXTI_Callback+0x9c>)
 80012d2:	f000 fe47 	bl	8001f64 <HAL_ADC_PollForConversion>
		var = HAL_ADC_GetValue(&hadc1)*(2.6/4095); // Lee el valor convertido
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <HAL_GPIO_EXTI_Callback+0x9c>)
 80012d8:	f000 fed3 	bl	8002082 <HAL_ADC_GetValue>
 80012dc:	4603      	mov	r3, r0
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8b8 	bl	8000454 <__aeabi_ui2d>
 80012e4:	a30a      	add	r3, pc, #40	; (adr r3, 8001310 <HAL_GPIO_EXTI_Callback+0x90>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f92d 	bl	8000548 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fbe1 	bl	8000abc <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_GPIO_EXTI_Callback+0xa0>)
 80012fe:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1); // Detiene la conversión*/
 8001300:	4806      	ldr	r0, [pc, #24]	; (800131c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001302:	f000 fdfc 	bl	8001efe <HAL_ADC_Stop>
	}
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	ae67b348 	.word	0xae67b348
 8001314:	3f44ce19 	.word	0x3f44ce19
 8001318:	2000010c 	.word	0x2000010c
 800131c:	20000038 	.word	0x20000038
 8001320:	200000fc 	.word	0x200000fc
 8001324:	00000000 	.word	0x00000000

08001328 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d115      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
    	flag = 1;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
        x += 0.002;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8a7 	bl	8000498 <__aeabi_f2d>
 800134a:	a309      	add	r3, pc, #36	; (adr r3, 8001370 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7fe ff44 	bl	80001dc <__adddf3>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fbae 	bl	8000abc <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001364:	6013      	str	r3, [r2, #0]
    }
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	d2f1a9fc 	.word	0xd2f1a9fc
 8001374:	3f60624d 	.word	0x3f60624d
 8001378:	40012c00 	.word	0x40012c00
 800137c:	2000011c 	.word	0x2000011c
 8001380:	20000110 	.word	0x20000110

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	e7fe      	b.n	800138c <Error_Handler+0x8>
	...

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_MspInit+0x44>)
 8001398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <HAL_MspInit+0x44>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6613      	str	r3, [r2, #96]	; 0x60
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_MspInit+0x44>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_MspInit+0x44>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_MspInit+0x44>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_MspInit+0x44>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09e      	sub	sp, #120	; 0x78
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2254      	movs	r2, #84	; 0x54
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fdcf 	bl	8004f9c <memset>
  if(hadc->Instance==ADC1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a25      	ldr	r2, [pc, #148]	; (8001498 <HAL_ADC_MspInit+0xc0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d143      	bne.n	8001490 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001408:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800140e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001412:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001414:	2301      	movs	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800141c:	2310      	movs	r3, #16
 800141e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001420:	2307      	movs	r3, #7
 8001422:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001424:	2302      	movs	r3, #2
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800142c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fe96 	bl	8004168 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001442:	f7ff ff9f 	bl	8001384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_ADC_MspInit+0xc4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_ADC_MspInit+0xc4>)
 800144c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_ADC_MspInit+0xc4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_ADC_MspInit+0xc4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_ADC_MspInit+0xc4>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_ADC_MspInit+0xc4>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001476:	2301      	movs	r3, #1
 8001478:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800147a:	230b      	movs	r3, #11
 800147c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148c:	f001 fe56 	bl	800313c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3778      	adds	r7, #120	; 0x78
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	50040000 	.word	0x50040000
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a15      	ldr	r2, [pc, #84]	; (8001514 <HAL_DAC_MspInit+0x74>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d124      	bne.n	800150c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_DAC_MspInit+0x78>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_DAC_MspInit+0x78>)
 80014c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_DAC_MspInit+0x78>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_DAC_MspInit+0x78>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_DAC_MspInit+0x78>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_DAC_MspInit+0x78>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014f2:	2320      	movs	r3, #32
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f001 fe18 	bl	800313c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40007400 	.word	0x40007400
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_TIM_Base_MspInit+0x44>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d113      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_TIM_Base_MspInit+0x48>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <HAL_TIM_Base_MspInit+0x48>)
 8001534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_TIM_Base_MspInit+0x48>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2019      	movs	r0, #25
 800154c:	f001 fc05 	bl	8002d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001550:	2019      	movs	r0, #25
 8001552:	f001 fc1e 	bl	8002d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40012c00 	.word	0x40012c00
 8001564:	40021000 	.word	0x40021000

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800156c:	e7fe      	b.n	800156c <NMI_Handler+0x4>

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f000 f8a4 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80015c0:	2010      	movs	r0, #16
 80015c2:	f001 ff55 	bl	8003470 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015d2:	f003 f95d 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200000b0 	.word	0x200000b0

080015e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f7ff ffea 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopForever+0x6>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <LoopForever+0xe>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <LoopForever+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f003 fcbb 	bl	8004fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001636:	f7ff fa93 	bl	8000b60 <main>

0800163a <LoopForever>:

LoopForever:
    b LoopForever
 800163a:	e7fe      	b.n	800163a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800163c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001648:	08005054 	.word	0x08005054
  ldr r2, =_sbss
 800164c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001650:	20000128 	.word	0x20000128

08001654 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC1_IRQHandler>

08001656 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f001 fb6f 	bl	8002d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f80e 	bl	8001688 <HAL_InitTick>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	e001      	b.n	800167c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001678:	f7ff fe8a 	bl	8001390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800167c:	79fb      	ldrb	r3, [r7, #7]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_InitTick+0x6c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d023      	beq.n	80016e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_InitTick+0x70>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_InitTick+0x6c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fb7b 	bl	8002dae <HAL_SYSTICK_Config>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d809      	bhi.n	80016d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f001 fb45 	bl	8002d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_InitTick+0x74>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e007      	b.n	80016e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e004      	b.n	80016e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e001      	b.n	80016e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000018 	.word	0x20000018
 80016f8:	20000010 	.word	0x20000010
 80016fc:	20000014 	.word	0x20000014

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000018 	.word	0x20000018
 8001724:	20000124 	.word	0x20000124

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000124 	.word	0x20000124

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000018 	.word	0x20000018

08001788 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3360      	adds	r3, #96	; 0x60
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <LL_ADC_SetOffset+0x44>)
 8001812:	4013      	ands	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	4313      	orrs	r3, r2
 8001820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001828:	bf00      	nop
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	03fff000 	.word	0x03fff000

08001838 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3360      	adds	r3, #96	; 0x60
 8001846:	461a      	mov	r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3360      	adds	r3, #96	; 0x60
 8001874:	461a      	mov	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	431a      	orrs	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800188e:	bf00      	nop
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3330      	adds	r3, #48	; 0x30
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	4413      	add	r3, r2
 80018de:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	211f      	movs	r1, #31
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	f003 011f 	and.w	r1, r3, #31
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	431a      	orrs	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3314      	adds	r3, #20
 8001928:	461a      	mov	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	0e5b      	lsrs	r3, r3, #25
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	0d1b      	lsrs	r3, r3, #20
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	2107      	movs	r1, #7
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	401a      	ands	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0d1b      	lsrs	r3, r3, #20
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0318 	and.w	r3, r3, #24
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001994:	40d9      	lsrs	r1, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	400b      	ands	r3, r1
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	431a      	orrs	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	0007ffff 	.word	0x0007ffff

080019b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6093      	str	r3, [r2, #8]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a68:	f043 0201 	orr.w	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a90:	f043 0202 	orr.w	r2, r3, #2
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <LL_ADC_IsEnabled+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_ADC_IsEnabled+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_IsDisableOngoing+0x18>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b2c:	f043 0210 	orr.w	r2, r3, #16
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b7a:	f043 0220 	orr.w	r2, r3, #32
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e126      	b.n	8001e1c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fbfb 	bl	80013d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fef1 	bl	80019dc <LL_ADC_IsDeepPowerDownEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fed7 	bl	80019b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff0c 	bl	8001a2c <LL_ADC_IsInternalRegulatorEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d115      	bne.n	8001c46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fef0 	bl	8001a04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c24:	4b7f      	ldr	r3, [pc, #508]	; (8001e24 <HAL_ADC_Init+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	4a7f      	ldr	r2, [pc, #508]	; (8001e28 <HAL_ADC_Init+0x274>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c38:	e002      	b.n	8001c40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f9      	bne.n	8001c3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff feee 	bl	8001a2c <LL_ADC_IsInternalRegulatorEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10d      	bne.n	8001c72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	f043 0210 	orr.w	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff62 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 8001c7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 80bf 	bne.w	8001e0a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f040 80bb 	bne.w	8001e0a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c9c:	f043 0202 	orr.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fefb 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10b      	bne.n	8001ccc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb4:	485d      	ldr	r0, [pc, #372]	; (8001e2c <HAL_ADC_Init+0x278>)
 8001cb6:	f7ff fef5 	bl	8001aa4 <LL_ADC_IsEnabled>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	485a      	ldr	r0, [pc, #360]	; (8001e30 <HAL_ADC_Init+0x27c>)
 8001cc8:	f7ff fd5e 	bl	8001788 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7e5b      	ldrb	r3, [r3, #25]
 8001cd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cdc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ce2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d106      	bne.n	8001d08 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	045b      	lsls	r3, r3, #17
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	4b42      	ldr	r3, [pc, #264]	; (8001e34 <HAL_ADC_Init+0x280>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff26 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 8001d42:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d13d      	bne.n	8001dc6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13a      	bne.n	8001dc6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d54:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d5c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d6c:	f023 0302 	bic.w	r3, r3, #2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	69b9      	ldr	r1, [r7, #24]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d118      	bne.n	8001db6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d8e:	f023 0304 	bic.w	r3, r3, #4
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001da6:	430a      	orrs	r2, r1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	e007      	b.n	8001dc6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10c      	bne.n	8001de8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f023 010f 	bic.w	r1, r3, #15
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
 8001de6:	e007      	b.n	8001df8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 020f 	bic.w	r2, r2, #15
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f023 0303 	bic.w	r3, r3, #3
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
 8001e08:	e007      	b.n	8001e1a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f043 0210 	orr.w	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000010 	.word	0x20000010
 8001e28:	053e2d63 	.word	0x053e2d63
 8001e2c:	50040000 	.word	0x50040000
 8001e30:	50040300 	.word	0x50040300
 8001e34:	fff0c007 	.word	0xfff0c007

08001e38 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fe7b 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d14f      	bne.n	8001ef0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Start+0x26>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e04b      	b.n	8001ef6 <HAL_ADC_Start+0xbe>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fdb6 	bl	80029d8 <ADC_Enable>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d137      	bne.n	8001ee6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e96:	d106      	bne.n	8001ea6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f023 0206 	bic.w	r2, r3, #6
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ea4:	e002      	b.n	8001eac <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	221c      	movs	r2, #28
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fe06 	bl	8001af0 <LL_ADC_REG_StartConversion>
 8001ee4:	e006      	b.n	8001ef4 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001eee:	e001      	b.n	8001ef4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_Stop+0x16>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e023      	b.n	8001f5c <HAL_ADC_Stop+0x5e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fc9e 	bl	8002860 <ADC_ConversionStop>
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d111      	bne.n	8001f52 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fdd8 	bl	8002ae4 <ADC_Disable>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d102      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f76:	2308      	movs	r3, #8
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e010      	b.n	8001f9e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	f043 0220 	orr.w	r2, r3, #32
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06f      	b.n	800207a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f9e:	f7ff fbc3 	bl	8001728 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fa4:	e021      	b.n	8001fea <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d01d      	beq.n	8001fea <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001fae:	f7ff fbbb 	bl	8001728 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d302      	bcc.n	8001fc4 <HAL_ADC_PollForConversion+0x60>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d112      	bne.n	8001fea <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f043 0204 	orr.w	r2, r3, #4
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e047      	b.n	800207a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0d6      	beq.n	8001fa6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fc46 	bl	800189a <LL_ADC_REG_IsTriggerSourceSWStart>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01c      	beq.n	800204e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7e5b      	ldrb	r3, [r3, #25]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d118      	bne.n	800204e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b08      	cmp	r3, #8
 8002028:	d111      	bne.n	800204e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d104      	bne.n	8002066 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e008      	b.n	8002078 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	220c      	movs	r2, #12
 8002076:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0b6      	sub	sp, #216	; 0xd8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x22>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e3bb      	b.n	8002836 <HAL_ADC_ConfigChannel+0x79a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fd38 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 83a0 	bne.w	8002818 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d824      	bhi.n	8002132 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	3b02      	subs	r3, #2
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d81b      	bhi.n	800212a <HAL_ADC_ConfigChannel+0x8e>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <HAL_ADC_ConfigChannel+0x5c>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002109 	.word	0x08002109
 80020fc:	08002111 	.word	0x08002111
 8002100:	08002119 	.word	0x08002119
 8002104:	08002121 	.word	0x08002121
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002108:	230c      	movs	r3, #12
 800210a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800210e:	e010      	b.n	8002132 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002110:	2312      	movs	r3, #18
 8002112:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002116:	e00c      	b.n	8002132 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002118:	2318      	movs	r3, #24
 800211a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800211e:	e008      	b.n	8002132 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002128:	e003      	b.n	8002132 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800212a:	2306      	movs	r3, #6
 800212c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002130:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002140:	f7ff fbbe 	bl	80018c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fcf9 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 800214e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fd19 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 800215c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 81a4 	bne.w	80024b2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800216a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 819f 	bne.w	80024b2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	461a      	mov	r2, r3
 8002182:	f7ff fbc9 	bl	8001918 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	08db      	lsrs	r3, r3, #3
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00a      	beq.n	80021be <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6919      	ldr	r1, [r3, #16]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021b8:	f7ff fb1a 	bl	80017f0 <LL_ADC_SetOffset>
 80021bc:	e179      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fb37 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x14e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fb2c 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	e01e      	b.n	8002228 <HAL_ADC_ConfigChannel+0x18c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb21 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002208:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e004      	b.n	8002226 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800221c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x1a4>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	e018      	b.n	8002272 <HAL_ADC_ConfigChannel+0x1d6>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800225c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e004      	b.n	8002272 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002272:	429a      	cmp	r2, r3
 8002274:	d106      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff faf0 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fad4 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x214>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2101      	movs	r1, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fac9 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	f003 021f 	and.w	r2, r3, #31
 80022ae:	e01e      	b.n	80022ee <HAL_ADC_ConfigChannel+0x252>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fabe 	bl	8001838 <LL_ADC_GetOffsetChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80022ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80022d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e004      	b.n	80022ec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80022e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x26a>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	e018      	b.n	8002338 <HAL_ADC_ConfigChannel+0x29c>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800231a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800231e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002322:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e004      	b.n	8002338 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800232e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fa8d 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2102      	movs	r1, #2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fa71 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x2da>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2102      	movs	r1, #2
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fa66 	bl	8001838 <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	e01e      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x318>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2102      	movs	r1, #2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fa5b 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800239c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e004      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80023a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x330>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	e014      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x35a>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80023da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e004      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80023ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d106      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	2102      	movs	r1, #2
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fa2e 	bl	8001864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2103      	movs	r1, #3
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fa12 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10a      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x398>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2103      	movs	r1, #3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fa07 	bl	8001838 <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	f003 021f 	and.w	r2, r3, #31
 8002432:	e017      	b.n	8002464 <HAL_ADC_ConfigChannel+0x3c8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2103      	movs	r1, #3
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff f9fc 	bl	8001838 <LL_ADC_GetOffsetChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e003      	b.n	8002462 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800245a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_ADC_ConfigChannel+0x3e0>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	e011      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x404>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800248a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800248c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800248e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002494:	2320      	movs	r3, #32
 8002496:	e003      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2103      	movs	r1, #3
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f9d9 	bl	8001864 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff faf4 	bl	8001aa4 <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 8140 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	461a      	mov	r2, r3
 80024d2:	f7ff fa4d 	bl	8001970 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4a8f      	ldr	r2, [pc, #572]	; (8002718 <HAL_ADC_ConfigChannel+0x67c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	f040 8131 	bne.w	8002744 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10b      	bne.n	800250a <HAL_ADC_ConfigChannel+0x46e>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	3301      	adds	r3, #1
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2b09      	cmp	r3, #9
 8002500:	bf94      	ite	ls
 8002502:	2301      	movls	r3, #1
 8002504:	2300      	movhi	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	e019      	b.n	800253e <HAL_ADC_ConfigChannel+0x4a2>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800251c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002522:	2320      	movs	r3, #32
 8002524:	e003      	b.n	800252e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	2b09      	cmp	r3, #9
 8002536:	bf94      	ite	ls
 8002538:	2301      	movls	r3, #1
 800253a:	2300      	movhi	r3, #0
 800253c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253e:	2b00      	cmp	r3, #0
 8002540:	d079      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <HAL_ADC_ConfigChannel+0x4c2>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	3301      	adds	r3, #1
 8002556:	069b      	lsls	r3, r3, #26
 8002558:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255c:	e015      	b.n	800258a <HAL_ADC_ConfigChannel+0x4ee>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800256c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e003      	b.n	8002582 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800257a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3301      	adds	r3, #1
 8002584:	069b      	lsls	r3, r3, #26
 8002586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x50e>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0e9b      	lsrs	r3, r3, #26
 800259c:	3301      	adds	r3, #1
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	e017      	b.n	80025da <HAL_ADC_ConfigChannel+0x53e>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e003      	b.n	80025ce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80025c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	ea42 0103 	orr.w	r1, r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x564>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	3301      	adds	r3, #1
 80025f2:	f003 021f 	and.w	r2, r3, #31
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	051b      	lsls	r3, r3, #20
 80025fe:	e018      	b.n	8002632 <HAL_ADC_ConfigChannel+0x596>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002618:	2320      	movs	r3, #32
 800261a:	e003      	b.n	8002624 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f003 021f 	and.w	r2, r3, #31
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002632:	430b      	orrs	r3, r1
 8002634:	e081      	b.n	800273a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263e:	2b00      	cmp	r3, #0
 8002640:	d107      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x5b6>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	3301      	adds	r3, #1
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002650:	e015      	b.n	800267e <HAL_ADC_ConfigChannel+0x5e2>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	069b      	lsls	r3, r3, #26
 800267a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_ADC_ConfigChannel+0x602>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	3301      	adds	r3, #1
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2101      	movs	r1, #1
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	e017      	b.n	80026ce <HAL_ADC_ConfigChannel+0x632>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	61bb      	str	r3, [r7, #24]
  return result;
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80026b6:	2320      	movs	r3, #32
 80026b8:	e003      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	ea42 0103 	orr.w	r1, r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x65e>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0e9b      	lsrs	r3, r3, #26
 80026e4:	3301      	adds	r3, #1
 80026e6:	f003 021f 	and.w	r2, r3, #31
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	051b      	lsls	r3, r3, #20
 80026f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f8:	e01e      	b.n	8002738 <HAL_ADC_ConfigChannel+0x69c>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	60fb      	str	r3, [r7, #12]
  return result;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e006      	b.n	8002724 <HAL_ADC_ConfigChannel+0x688>
 8002716:	bf00      	nop
 8002718:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f003 021f 	and.w	r2, r3, #31
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	3b1e      	subs	r3, #30
 8002732:	051b      	lsls	r3, r3, #20
 8002734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002738:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800273e:	4619      	mov	r1, r3
 8002740:	f7ff f8ea 	bl	8001918 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_ADC_ConfigChannel+0x7a4>)
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d06c      	beq.n	800282a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002750:	483c      	ldr	r0, [pc, #240]	; (8002844 <HAL_ADC_ConfigChannel+0x7a8>)
 8002752:	f7ff f83f 	bl	80017d4 <LL_ADC_GetCommonPathInternalCh>
 8002756:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a3a      	ldr	r2, [pc, #232]	; (8002848 <HAL_ADC_ConfigChannel+0x7ac>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d127      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002764:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d121      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a35      	ldr	r2, [pc, #212]	; (800284c <HAL_ADC_ConfigChannel+0x7b0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d157      	bne.n	800282a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800277a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800277e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002782:	4619      	mov	r1, r3
 8002784:	482f      	ldr	r0, [pc, #188]	; (8002844 <HAL_ADC_ConfigChannel+0x7a8>)
 8002786:	f7ff f812 	bl	80017ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_ADC_ConfigChannel+0x7b4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	4a30      	ldr	r2, [pc, #192]	; (8002854 <HAL_ADC_ConfigChannel+0x7b8>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027a4:	e002      	b.n	80027ac <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f9      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b2:	e03a      	b.n	800282a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_ADC_ConfigChannel+0x7bc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d113      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_ADC_ConfigChannel+0x7b0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d12a      	bne.n	800282a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027dc:	4619      	mov	r1, r3
 80027de:	4819      	ldr	r0, [pc, #100]	; (8002844 <HAL_ADC_ConfigChannel+0x7a8>)
 80027e0:	f7fe ffe5 	bl	80017ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027e4:	e021      	b.n	800282a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_ADC_ConfigChannel+0x7c0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d11c      	bne.n	800282a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_ADC_ConfigChannel+0x7b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d111      	bne.n	800282a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800280a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800280e:	4619      	mov	r1, r3
 8002810:	480c      	ldr	r0, [pc, #48]	; (8002844 <HAL_ADC_ConfigChannel+0x7a8>)
 8002812:	f7fe ffcc 	bl	80017ae <LL_ADC_SetCommonPathInternalCh>
 8002816:	e008      	b.n	800282a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002832:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002836:	4618      	mov	r0, r3
 8002838:	37d8      	adds	r7, #216	; 0xd8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	80080000 	.word	0x80080000
 8002844:	50040300 	.word	0x50040300
 8002848:	c7520000 	.word	0xc7520000
 800284c:	50040000 	.word	0x50040000
 8002850:	20000010 	.word	0x20000010
 8002854:	053e2d63 	.word	0x053e2d63
 8002858:	cb840000 	.word	0xcb840000
 800285c:	80000001 	.word	0x80000001

08002860 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff f962 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 800287c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f983 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 8002888:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8098 	beq.w	80029c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d02a      	beq.n	80028fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7e5b      	ldrb	r3, [r3, #25]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d126      	bne.n	80028fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7e1b      	ldrb	r3, [r3, #24]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d122      	bne.n	80028fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028ba:	e014      	b.n	80028e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4a45      	ldr	r2, [pc, #276]	; (80029d4 <ADC_ConversionStop+0x174>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d90d      	bls.n	80028e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f043 0210 	orr.w	r2, r3, #16
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e074      	b.n	80029ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d1e3      	bne.n	80028bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d014      	beq.n	800292c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff f91a 	bl	8001b40 <LL_ADC_REG_IsConversionOngoing>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff f8d7 	bl	8001aca <LL_ADC_IsDisableOngoing>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff f8f6 	bl	8001b18 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d014      	beq.n	800295c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f929 	bl	8001b8e <LL_ADC_INJ_IsConversionOngoing>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00c      	beq.n	800295c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f8bf 	bl	8001aca <LL_ADC_IsDisableOngoing>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d104      	bne.n	800295c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f905 	bl	8001b66 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d005      	beq.n	800296e <ADC_ConversionStop+0x10e>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d105      	bne.n	8002974 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002968:	230c      	movs	r3, #12
 800296a:	617b      	str	r3, [r7, #20]
        break;
 800296c:	e005      	b.n	800297a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800296e:	2308      	movs	r3, #8
 8002970:	617b      	str	r3, [r7, #20]
        break;
 8002972:	e002      	b.n	800297a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002974:	2304      	movs	r3, #4
 8002976:	617b      	str	r3, [r7, #20]
        break;
 8002978:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800297a:	f7fe fed5 	bl	8001728 <HAL_GetTick>
 800297e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002980:	e01b      	b.n	80029ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002982:	f7fe fed1 	bl	8001728 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b05      	cmp	r3, #5
 800298e:	d914      	bls.n	80029ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f043 0210 	orr.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e007      	b.n	80029ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1dc      	bne.n	8002982 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	a33fffff 	.word	0xa33fffff

080029d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f85b 	bl	8001aa4 <LL_ADC_IsEnabled>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d169      	bne.n	8002ac8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <ADC_Enable+0xfc>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e055      	b.n	8002aca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f816 	bl	8001a54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a28:	482b      	ldr	r0, [pc, #172]	; (8002ad8 <ADC_Enable+0x100>)
 8002a2a:	f7fe fed3 	bl	80017d4 <LL_ADC_GetCommonPathInternalCh>
 8002a2e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a38:	4b28      	ldr	r3, [pc, #160]	; (8002adc <ADC_Enable+0x104>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <ADC_Enable+0x108>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a52:	e002      	b.n	8002a5a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fe62 	bl	8001728 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a66:	e028      	b.n	8002aba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f819 	bl	8001aa4 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d104      	bne.n	8002a82 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe ffe9 	bl	8001a54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a82:	f7fe fe51 	bl	8001728 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d914      	bls.n	8002aba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d00d      	beq.n	8002aba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e007      	b.n	8002aca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d1cf      	bne.n	8002a68 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	8000003f 	.word	0x8000003f
 8002ad8:	50040300 	.word	0x50040300
 8002adc:	20000010 	.word	0x20000010
 8002ae0:	053e2d63 	.word	0x053e2d63

08002ae4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe ffea 	bl	8001aca <LL_ADC_IsDisableOngoing>
 8002af6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe ffd1 	bl	8001aa4 <LL_ADC_IsEnabled>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d047      	beq.n	8002b98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d144      	bne.n	8002b98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030d 	and.w	r3, r3, #13
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10c      	bne.n	8002b36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ffab 	bl	8001a7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe fdfb 	bl	8001728 <HAL_GetTick>
 8002b32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b34:	e029      	b.n	8002b8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	f043 0210 	orr.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e023      	b.n	8002b9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b52:	f7fe fde9 	bl	8001728 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d914      	bls.n	8002b8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	f043 0210 	orr.w	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	f043 0201 	orr.w	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e007      	b.n	8002b9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1dc      	bne.n	8002b52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd6:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60d3      	str	r3, [r2, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 0307 	and.w	r3, r3, #7
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db0b      	blt.n	8002c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <__NVIC_EnableIRQ+0x38>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	db0a      	blt.n	8002c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	490c      	ldr	r1, [pc, #48]	; (8002c90 <__NVIC_SetPriority+0x4c>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	440b      	add	r3, r1
 8002c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c6c:	e00a      	b.n	8002c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4908      	ldr	r1, [pc, #32]	; (8002c94 <__NVIC_SetPriority+0x50>)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	440b      	add	r3, r1
 8002c82:	761a      	strb	r2, [r3, #24]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f1c3 0307 	rsb	r3, r3, #7
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	bf28      	it	cs
 8002cb6:	2304      	movcs	r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	d902      	bls.n	8002cc8 <NVIC_EncodePriority+0x30>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3b03      	subs	r3, #3
 8002cc6:	e000      	b.n	8002cca <NVIC_EncodePriority+0x32>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	401a      	ands	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	43d9      	mvns	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	4313      	orrs	r3, r2
         );
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d10:	d301      	bcc.n	8002d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00f      	b.n	8002d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <SysTick_Config+0x40>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d1e:	210f      	movs	r1, #15
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f7ff ff8e 	bl	8002c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <SysTick_Config+0x40>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <SysTick_Config+0x40>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	e000e010 	.word	0xe000e010

08002d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff29 	bl	8002ba4 <__NVIC_SetPriorityGrouping>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6c:	f7ff ff3e 	bl	8002bec <__NVIC_GetPriorityGrouping>
 8002d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	6978      	ldr	r0, [r7, #20]
 8002d78:	f7ff ff8e 	bl	8002c98 <NVIC_EncodePriority>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff5d 	bl	8002c44 <__NVIC_SetPriority>
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff31 	bl	8002c08 <__NVIC_EnableIRQ>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ffa2 	bl	8002d00 <SysTick_Config>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e014      	b.n	8002e02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	791b      	ldrb	r3, [r3, #4]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fe fb59 	bl	80014a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	795b      	ldrb	r3, [r3, #5]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_DAC_Start+0x16>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e03b      	b.n	8002e98 <HAL_DAC_Start+0x8e>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2201      	movs	r2, #1
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10f      	bne.n	8002e6a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d118      	bne.n	8002e8a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	e00f      	b.n	8002e8a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e78:	d107      	bne.n	8002e8a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0202 	orr.w	r2, r2, #2
 8002e88:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3308      	adds	r3, #8
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	e004      	b.n	8002ed8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b088      	sub	sp, #32
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	795b      	ldrb	r3, [r3, #5]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_DAC_ConfigChannel+0x1c>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e114      	b.n	8003134 <HAL_DAC_ConfigChannel+0x246>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2202      	movs	r2, #2
 8002f14:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	f040 8081 	bne.w	8003022 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fc02 	bl	8001728 <HAL_GetTick>
 8002f24:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d140      	bne.n	8002fae <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f2c:	e018      	b.n	8002f60 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f2e:	f7fe fbfb 	bl	8001728 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d911      	bls.n	8002f60 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f043 0208 	orr.w	r2, r3, #8
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0e9      	b.n	8003134 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1df      	bne.n	8002f2e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f7fe fbe6 	bl	8001740 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	6992      	ldr	r2, [r2, #24]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f7e:	e023      	b.n	8002fc8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f80:	f7fe fbd2 	bl	8001728 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d90f      	bls.n	8002fae <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da0a      	bge.n	8002fae <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f043 0208 	orr.w	r2, r3, #8
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0c2      	b.n	8003134 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	dbe3      	blt.n	8002f80 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f7fe fbc1 	bl	8001740 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	6992      	ldr	r2, [r2, #24]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	ea02 0103 	and.w	r1, r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	409a      	lsls	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	21ff      	movs	r1, #255	; 0xff
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	ea02 0103 	and.w	r1, r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d11d      	bne.n	8003066 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	221f      	movs	r2, #31
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2207      	movs	r2, #7
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	431a      	orrs	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	f640 72fc 	movw	r2, #4092	; 0xffc
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	22c0      	movs	r2, #192	; 0xc0
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43da      	mvns	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	400a      	ands	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	e148      	b.n	80033de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	4013      	ands	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 813a 	beq.w	80033d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d005      	beq.n	800317c <HAL_GPIO_Init+0x40>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d130      	bne.n	80031de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031b2:	2201      	movs	r2, #1
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	f003 0201 	and.w	r2, r3, #1
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d017      	beq.n	800321a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d123      	bne.n	800326e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3208      	adds	r2, #8
 800322e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	6939      	ldr	r1, [r7, #16]
 800326a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0203 	and.w	r2, r3, #3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8094 	beq.w	80033d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b0:	4b52      	ldr	r3, [pc, #328]	; (80033fc <HAL_GPIO_Init+0x2c0>)
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	4a51      	ldr	r2, [pc, #324]	; (80033fc <HAL_GPIO_Init+0x2c0>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6613      	str	r3, [r2, #96]	; 0x60
 80032bc:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <HAL_GPIO_Init+0x2c0>)
 80032be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032c8:	4a4d      	ldr	r2, [pc, #308]	; (8003400 <HAL_GPIO_Init+0x2c4>)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	220f      	movs	r2, #15
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032f2:	d00d      	beq.n	8003310 <HAL_GPIO_Init+0x1d4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a43      	ldr	r2, [pc, #268]	; (8003404 <HAL_GPIO_Init+0x2c8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <HAL_GPIO_Init+0x1d0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a42      	ldr	r2, [pc, #264]	; (8003408 <HAL_GPIO_Init+0x2cc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_GPIO_Init+0x1cc>
 8003304:	2302      	movs	r3, #2
 8003306:	e004      	b.n	8003312 <HAL_GPIO_Init+0x1d6>
 8003308:	2307      	movs	r3, #7
 800330a:	e002      	b.n	8003312 <HAL_GPIO_Init+0x1d6>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_GPIO_Init+0x1d6>
 8003310:	2300      	movs	r3, #0
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	f002 0203 	and.w	r2, r2, #3
 8003318:	0092      	lsls	r2, r2, #2
 800331a:	4093      	lsls	r3, r2
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003322:	4937      	ldr	r1, [pc, #220]	; (8003400 <HAL_GPIO_Init+0x2c4>)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003330:	4b36      	ldr	r3, [pc, #216]	; (800340c <HAL_GPIO_Init+0x2d0>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003354:	4a2d      	ldr	r2, [pc, #180]	; (800340c <HAL_GPIO_Init+0x2d0>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_GPIO_Init+0x2d0>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_GPIO_Init+0x2d0>)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <HAL_GPIO_Init+0x2d0>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033a8:	4a18      	ldr	r2, [pc, #96]	; (800340c <HAL_GPIO_Init+0x2d0>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_GPIO_Init+0x2d0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033d2:	4a0e      	ldr	r2, [pc, #56]	; (800340c <HAL_GPIO_Init+0x2d0>)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3301      	adds	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f47f aeaf 	bne.w	800314c <HAL_GPIO_Init+0x10>
  }
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40021000 	.word	0x40021000
 8003400:	40010000 	.word	0x40010000
 8003404:	48000400 	.word	0x48000400
 8003408:	48000800 	.word	0x48000800
 800340c:	40010400 	.word	0x40010400

08003410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	887b      	ldrh	r3, [r7, #2]
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
 800342c:	e001      	b.n	8003432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800345c:	e002      	b.n	8003464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fef6 	bl	8001280 <HAL_GPIO_EXTI_Callback>
  }
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40010400 	.word	0x40010400

080034a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40007000 	.word	0x40007000

080034bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ca:	d130      	bne.n	800352e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034cc:	4b23      	ldr	r3, [pc, #140]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d8:	d038      	beq.n	800354c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034e2:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2232      	movs	r2, #50	; 0x32
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0c9b      	lsrs	r3, r3, #18
 80034fc:	3301      	adds	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003500:	e002      	b.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3b01      	subs	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003514:	d102      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f2      	bne.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003528:	d110      	bne.n	800354c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00f      	b.n	800354e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d007      	beq.n	800354c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003544:	4a05      	ldr	r2, [pc, #20]	; (800355c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800354a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40007000 	.word	0x40007000
 8003560:	20000010 	.word	0x20000010
 8003564:	431bde83 	.word	0x431bde83

08003568 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f000 bc02 	b.w	8003d80 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357c:	4b96      	ldr	r3, [pc, #600]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003586:	4b94      	ldr	r3, [pc, #592]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80e4 	beq.w	8003766 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4c>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	f040 808b 	bne.w	80036c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 8087 	bne.w	80036c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035b4:	4b88      	ldr	r3, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_OscConfig+0x64>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e3d9      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1a      	ldr	r2, [r3, #32]
 80035d0:	4b81      	ldr	r3, [pc, #516]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <HAL_RCC_OscConfig+0x7e>
 80035dc:	4b7e      	ldr	r3, [pc, #504]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e4:	e005      	b.n	80035f2 <HAL_RCC_OscConfig+0x8a>
 80035e6:	4b7c      	ldr	r3, [pc, #496]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80035e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d223      	bcs.n	800363e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fd54 	bl	80040a8 <RCC_SetFlashLatencyFromMSIRange>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e3ba      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a72      	ldr	r2, [pc, #456]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	496d      	ldr	r1, [pc, #436]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003628:	4b6b      	ldr	r3, [pc, #428]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	4968      	ldr	r1, [pc, #416]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
 800363c:	e025      	b.n	800368a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363e:	4b66      	ldr	r3, [pc, #408]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a65      	ldr	r2, [pc, #404]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003644:	f043 0308 	orr.w	r3, r3, #8
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4960      	ldr	r1, [pc, #384]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800365c:	4b5e      	ldr	r3, [pc, #376]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	495b      	ldr	r1, [pc, #364]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fd14 	bl	80040a8 <RCC_SetFlashLatencyFromMSIRange>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e37a      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800368a:	f000 fc81 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 800368e:	4602      	mov	r2, r0
 8003690:	4b51      	ldr	r3, [pc, #324]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	4950      	ldr	r1, [pc, #320]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 800369c:	5ccb      	ldrb	r3, [r1, r3]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a4e      	ldr	r2, [pc, #312]	; (80037e0 <HAL_RCC_OscConfig+0x278>)
 80036a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036aa:	4b4e      	ldr	r3, [pc, #312]	; (80037e4 <HAL_RCC_OscConfig+0x27c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd ffea 	bl	8001688 <HAL_InitTick>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d052      	beq.n	8003764 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	e35e      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d032      	beq.n	8003730 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ca:	4b43      	ldr	r3, [pc, #268]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a42      	ldr	r2, [pc, #264]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036d6:	f7fe f827 	bl	8001728 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036de:	f7fe f823 	bl	8001728 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e347      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f0:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fc:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a35      	ldr	r2, [pc, #212]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003702:	f043 0308 	orr.w	r3, r3, #8
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4930      	ldr	r1, [pc, #192]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371a:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	021b      	lsls	r3, r3, #8
 8003728:	492b      	ldr	r1, [pc, #172]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
 800372e:	e01a      	b.n	8003766 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003730:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800373c:	f7fd fff4 	bl	8001728 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003744:	f7fd fff0 	bl	8001728 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e314      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1dc>
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d073      	beq.n	800385a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d005      	beq.n	8003784 <HAL_RCC_OscConfig+0x21c>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d10e      	bne.n	800379c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d10b      	bne.n	800379c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d063      	beq.n	8003858 <HAL_RCC_OscConfig+0x2f0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d15f      	bne.n	8003858 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e2f1      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x24c>
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e025      	b.n	8003800 <HAL_RCC_OscConfig+0x298>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037bc:	d114      	bne.n	80037e8 <HAL_RCC_OscConfig+0x280>
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a05      	ldr	r2, [pc, #20]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80037c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a02      	ldr	r2, [pc, #8]	; (80037d8 <HAL_RCC_OscConfig+0x270>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e013      	b.n	8003800 <HAL_RCC_OscConfig+0x298>
 80037d8:	40021000 	.word	0x40021000
 80037dc:	0800500c 	.word	0x0800500c
 80037e0:	20000010 	.word	0x20000010
 80037e4:	20000014 	.word	0x20000014
 80037e8:	4ba0      	ldr	r3, [pc, #640]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a9f      	ldr	r2, [pc, #636]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b9d      	ldr	r3, [pc, #628]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a9c      	ldr	r2, [pc, #624]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80037fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fd ff8e 	bl	8001728 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fd ff8a 	bl	8001728 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e2ae      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003822:	4b92      	ldr	r3, [pc, #584]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x2a8>
 800382e:	e014      	b.n	800385a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd ff7a 	bl	8001728 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7fd ff76 	bl	8001728 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e29a      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384a:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x2d0>
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d060      	beq.n	8003928 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d005      	beq.n	8003878 <HAL_RCC_OscConfig+0x310>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d119      	bne.n	80038a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d116      	bne.n	80038a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003878:	4b7c      	ldr	r3, [pc, #496]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_OscConfig+0x328>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e277      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003890:	4b76      	ldr	r3, [pc, #472]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	4973      	ldr	r1, [pc, #460]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a4:	e040      	b.n	8003928 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d023      	beq.n	80038f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ae:	4b6f      	ldr	r3, [pc, #444]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6e      	ldr	r2, [pc, #440]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fd ff35 	bl	8001728 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c2:	f7fd ff31 	bl	8001728 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e255      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d4:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e0:	4b62      	ldr	r3, [pc, #392]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	495f      	ldr	r1, [pc, #380]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
 80038f4:	e018      	b.n	8003928 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f6:	4b5d      	ldr	r3, [pc, #372]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5c      	ldr	r2, [pc, #368]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80038fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fd ff11 	bl	8001728 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390a:	f7fd ff0d 	bl	8001728 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e231      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800391c:	4b53      	ldr	r3, [pc, #332]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03c      	beq.n	80039ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01c      	beq.n	8003976 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393c:	4b4b      	ldr	r3, [pc, #300]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 800393e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003942:	4a4a      	ldr	r2, [pc, #296]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fd feec 	bl	8001728 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003954:	f7fd fee8 	bl	8001728 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e20c      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003966:	4b41      	ldr	r3, [pc, #260]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <HAL_RCC_OscConfig+0x3ec>
 8003974:	e01b      	b.n	80039ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003976:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397c:	4a3b      	ldr	r2, [pc, #236]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fd fecf 	bl	8001728 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398e:	f7fd fecb 	bl	8001728 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e1ef      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a0:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80039a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80a6 	beq.w	8003b08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039c0:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	4a26      	ldr	r2, [pc, #152]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d6:	6593      	str	r3, [r2, #88]	; 0x58
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 80039da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e8:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <HAL_RCC_OscConfig+0x508>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d118      	bne.n	8003a26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <HAL_RCC_OscConfig+0x508>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <HAL_RCC_OscConfig+0x508>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a00:	f7fd fe92 	bl	8001728 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fd fe8e 	bl	8001728 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1b2      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_RCC_OscConfig+0x508>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <HAL_RCC_OscConfig+0x4d8>
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a3e:	e029      	b.n	8003a94 <HAL_RCC_OscConfig+0x52c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b05      	cmp	r3, #5
 8003a46:	d115      	bne.n	8003a74 <HAL_RCC_OscConfig+0x50c>
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	4a03      	ldr	r2, [pc, #12]	; (8003a6c <HAL_RCC_OscConfig+0x504>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a68:	e014      	b.n	8003a94 <HAL_RCC_OscConfig+0x52c>
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40007000 	.word	0x40007000
 8003a74:	4b9a      	ldr	r3, [pc, #616]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	4a99      	ldr	r2, [pc, #612]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a84:	4b96      	ldr	r3, [pc, #600]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	4a95      	ldr	r2, [pc, #596]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d016      	beq.n	8003aca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fe44 	bl	8001728 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fe40 	bl	8001728 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e162      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aba:	4b89      	ldr	r3, [pc, #548]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ed      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x53c>
 8003ac8:	e015      	b.n	8003af6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fd fe2d 	bl	8001728 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd fe29 	bl	8001728 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e14b      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae8:	4b7d      	ldr	r3, [pc, #500]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ed      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af6:	7ffb      	ldrb	r3, [r7, #31]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afc:	4b78      	ldr	r3, [pc, #480]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	4a77      	ldr	r2, [pc, #476]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d03c      	beq.n	8003b8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01c      	beq.n	8003b56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b1c:	4b70      	ldr	r3, [pc, #448]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b22:	4a6f      	ldr	r2, [pc, #444]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd fdfc 	bl	8001728 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b34:	f7fd fdf8 	bl	8001728 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e11c      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b46:	4b66      	ldr	r3, [pc, #408]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ef      	beq.n	8003b34 <HAL_RCC_OscConfig+0x5cc>
 8003b54:	e01b      	b.n	8003b8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b56:	4b62      	ldr	r3, [pc, #392]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5c:	4a60      	ldr	r2, [pc, #384]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b66:	f7fd fddf 	bl	8001728 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6e:	f7fd fddb 	bl	8001728 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0ff      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b80:	4b57      	ldr	r3, [pc, #348]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ef      	bne.n	8003b6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80f3 	beq.w	8003d7e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	f040 80c9 	bne.w	8003d34 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ba2:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0203 	and.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d12c      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d123      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d11b      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d113      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d109      	bne.n	8003c10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d06b      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d062      	beq.n	8003cdc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c16:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0ac      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c26:	4b2e      	ldr	r3, [pc, #184]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c32:	f7fd fd79 	bl	8001728 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fd fd75 	bl	8001728 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e099      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <HAL_RCC_OscConfig+0x77c>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c68:	3a01      	subs	r2, #1
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	4311      	orrs	r1, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c72:	0212      	lsls	r2, r2, #8
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c7a:	0852      	lsrs	r2, r2, #1
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	0552      	lsls	r2, r2, #21
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c86:	0852      	lsrs	r2, r2, #1
 8003c88:	3a01      	subs	r2, #1
 8003c8a:	0652      	lsls	r2, r2, #25
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c92:	06d2      	lsls	r2, r2, #27
 8003c94:	430a      	orrs	r2, r1
 8003c96:	4912      	ldr	r1, [pc, #72]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0f      	ldr	r2, [pc, #60]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a0c      	ldr	r2, [pc, #48]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cb4:	f7fd fd38 	bl	8001728 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd fd34 	bl	8001728 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e058      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cce:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <HAL_RCC_OscConfig+0x778>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cda:	e050      	b.n	8003d7e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e04f      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d144      	bne.n	8003d7e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d00:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d0c:	f7fd fd0c 	bl	8001728 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd fd08 	bl	8001728 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e02c      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x7ac>
 8003d32:	e024      	b.n	8003d7e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d01f      	beq.n	8003d7a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd fcef 	bl	8001728 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4e:	f7fd fceb 	bl	8001728 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e00f      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	4905      	ldr	r1, [pc, #20]	; (8003d88 <HAL_RCC_OscConfig+0x820>)
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_OscConfig+0x824>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	60cb      	str	r3, [r1, #12]
 8003d78:	e001      	b.n	8003d7e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	feeefffc 	.word	0xfeeefffc

08003d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0e7      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da4:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <HAL_RCC_ClockConfig+0x1ec>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d910      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b72      	ldr	r3, [pc, #456]	; (8003f7c <HAL_RCC_ClockConfig+0x1ec>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 0207 	bic.w	r2, r3, #7
 8003dba:	4970      	ldr	r1, [pc, #448]	; (8003f7c <HAL_RCC_ClockConfig+0x1ec>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b6e      	ldr	r3, [pc, #440]	; (8003f7c <HAL_RCC_ClockConfig+0x1ec>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0cf      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d010      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d908      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df0:	4b63      	ldr	r3, [pc, #396]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4960      	ldr	r1, [pc, #384]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04c      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e16:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d121      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0a6      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d107      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e2e:	4b54      	ldr	r3, [pc, #336]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d115      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e09a      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e46:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e08e      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e56:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e086      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e66:	4b46      	ldr	r3, [pc, #280]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4943      	ldr	r1, [pc, #268]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e78:	f7fd fc56 	bl	8001728 <HAL_GetTick>
 8003e7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e80:	f7fd fc52 	bl	8001728 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e06e      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 020c 	and.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d1eb      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d208      	bcs.n	8003ed6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec4:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	492b      	ldr	r1, [pc, #172]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed6:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d210      	bcs.n	8003f06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 0207 	bic.w	r2, r3, #7
 8003eec:	4923      	ldr	r1, [pc, #140]	; (8003f7c <HAL_RCC_ClockConfig+0x1ec>)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e036      	b.n	8003f74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4918      	ldr	r1, [pc, #96]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4910      	ldr	r1, [pc, #64]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f44:	f000 f824 	bl	8003f90 <HAL_RCC_GetSysClockFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	490b      	ldr	r1, [pc, #44]	; (8003f84 <HAL_RCC_ClockConfig+0x1f4>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1f8>)
 8003f62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCC_ClockConfig+0x1fc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fd fb8d 	bl	8001688 <HAL_InitTick>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f72:	7afb      	ldrb	r3, [r7, #11]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40022000 	.word	0x40022000
 8003f80:	40021000 	.word	0x40021000
 8003f84:	0800500c 	.word	0x0800500c
 8003f88:	20000010 	.word	0x20000010
 8003f8c:	20000014 	.word	0x20000014

08003f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d121      	bne.n	8004002 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d11e      	bne.n	8004002 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fd0:	4b31      	ldr	r3, [pc, #196]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e005      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fe0:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fec:	4a2b      	ldr	r2, [pc, #172]	; (800409c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10d      	bne.n	8004018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d102      	bne.n	800400e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	e004      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d101      	bne.n	8004018 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004016:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d134      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d003      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0xa6>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d003      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0xac>
 8004034:	e005      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004036:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004038:	617b      	str	r3, [r7, #20]
      break;
 800403a:	e005      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800403c:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800403e:	617b      	str	r3, [r7, #20]
      break;
 8004040:	e002      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	617b      	str	r3, [r7, #20]
      break;
 8004046:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004048:	4b13      	ldr	r3, [pc, #76]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	3301      	adds	r3, #1
 8004054:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	fb03 f202 	mul.w	r2, r3, r2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_RCC_GetSysClockFreq+0x108>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	0e5b      	lsrs	r3, r3, #25
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	3301      	adds	r3, #1
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004088:	69bb      	ldr	r3, [r7, #24]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	0800501c 	.word	0x0800501c
 80040a0:	00f42400 	.word	0x00f42400
 80040a4:	007a1200 	.word	0x007a1200

080040a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040b4:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040c0:	f7ff f9ee 	bl	80034a0 <HAL_PWREx_GetVoltageRange>
 80040c4:	6178      	str	r0, [r7, #20]
 80040c6:	e014      	b.n	80040f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c8:	4b25      	ldr	r3, [pc, #148]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d2:	6593      	str	r3, [r2, #88]	; 0x58
 80040d4:	4b22      	ldr	r3, [pc, #136]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040e0:	f7ff f9de 	bl	80034a0 <HAL_PWREx_GetVoltageRange>
 80040e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d10b      	bne.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d919      	bls.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2ba0      	cmp	r3, #160	; 0xa0
 8004104:	d902      	bls.n	800410c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004106:	2302      	movs	r3, #2
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e013      	b.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800410c:	2301      	movs	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e010      	b.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d902      	bls.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004118:	2303      	movs	r3, #3
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e00a      	b.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d102      	bne.n	800412a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004124:	2302      	movs	r3, #2
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	e004      	b.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b70      	cmp	r3, #112	; 0x70
 800412e:	d101      	bne.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004130:	2301      	movs	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f023 0207 	bic.w	r2, r3, #7
 800413c:	4909      	ldr	r1, [pc, #36]	; (8004164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	d001      	beq.n	8004156 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	40022000 	.word	0x40022000

08004168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004170:	2300      	movs	r3, #0
 8004172:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004174:	2300      	movs	r3, #0
 8004176:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004180:	2b00      	cmp	r3, #0
 8004182:	d031      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800418c:	d01a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800418e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004192:	d814      	bhi.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004198:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800419c:	d10f      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800419e:	4b5d      	ldr	r3, [pc, #372]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	4a5c      	ldr	r2, [pc, #368]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041aa:	e00c      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f9ce 	bl	8004554 <RCCEx_PLLSAI1_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	74fb      	strb	r3, [r7, #19]
      break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c6:	7cfb      	ldrb	r3, [r7, #19]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041cc:	4b51      	ldr	r3, [pc, #324]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	494e      	ldr	r1, [pc, #312]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041e2:	e001      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 809e 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041fa:	4b46      	ldr	r3, [pc, #280]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800420a:	2300      	movs	r3, #0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004210:	4b40      	ldr	r3, [pc, #256]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	4a3f      	ldr	r2, [pc, #252]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800421a:	6593      	str	r3, [r2, #88]	; 0x58
 800421c:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004228:	2301      	movs	r3, #1
 800422a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800422c:	4b3a      	ldr	r3, [pc, #232]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a39      	ldr	r2, [pc, #228]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004238:	f7fd fa76 	bl	8001728 <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800423e:	e009      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004240:	f7fd fa72 	bl	8001728 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d902      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	74fb      	strb	r3, [r7, #19]
        break;
 8004252:	e005      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004254:	4b30      	ldr	r3, [pc, #192]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0ef      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d15a      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004266:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01e      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	429a      	cmp	r2, r3
 8004280:	d019      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800428e:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042ae:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d016      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fa32 	bl	8001728 <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c6:	e00b      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fd fa2e 	bl	8001728 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d902      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	74fb      	strb	r3, [r7, #19]
            break;
 80042de:	e006      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ec      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80042ee:	7cfb      	ldrb	r3, [r7, #19]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004302:	4904      	ldr	r1, [pc, #16]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800430a:	e009      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	74bb      	strb	r3, [r7, #18]
 8004310:	e006      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004320:	7c7b      	ldrb	r3, [r7, #17]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b8a      	ldr	r3, [pc, #552]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	4a89      	ldr	r2, [pc, #548]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004330:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800433e:	4b84      	ldr	r3, [pc, #528]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f023 0203 	bic.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4980      	ldr	r1, [pc, #512]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004360:	4b7b      	ldr	r3, [pc, #492]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 020c 	bic.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	4978      	ldr	r1, [pc, #480]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004382:	4b73      	ldr	r3, [pc, #460]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	496f      	ldr	r1, [pc, #444]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043a4:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	4967      	ldr	r1, [pc, #412]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043c6:	4b62      	ldr	r3, [pc, #392]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	495e      	ldr	r1, [pc, #376]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043e8:	4b59      	ldr	r3, [pc, #356]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4956      	ldr	r1, [pc, #344]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800440a:	4b51      	ldr	r3, [pc, #324]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	494d      	ldr	r1, [pc, #308]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d028      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800442c:	4b48      	ldr	r3, [pc, #288]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	4945      	ldr	r1, [pc, #276]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800444a:	d106      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444c:	4b40      	ldr	r3, [pc, #256]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a3f      	ldr	r2, [pc, #252]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004456:	60d3      	str	r3, [r2, #12]
 8004458:	e011      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004462:	d10c      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f872 	bl	8004554 <RCCEx_PLLSAI1_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d028      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	492d      	ldr	r1, [pc, #180]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044aa:	4b29      	ldr	r3, [pc, #164]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4a28      	ldr	r2, [pc, #160]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b4:	60d3      	str	r3, [r2, #12]
 80044b6:	e011      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c0:	d10c      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f843 	bl	8004554 <RCCEx_PLLSAI1_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d2:	7cfb      	ldrb	r3, [r7, #19]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01c      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	4916      	ldr	r1, [pc, #88]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004506:	d10c      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	2102      	movs	r1, #2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f820 	bl	8004554 <RCCEx_PLLSAI1_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800451e:	7cfb      	ldrb	r3, [r7, #19]
 8004520:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453c:	4904      	ldr	r1, [pc, #16]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004544:	7cbb      	ldrb	r3, [r7, #18]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000

08004554 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004562:	4b74      	ldr	r3, [pc, #464]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d018      	beq.n	80045a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800456e:	4b71      	ldr	r3, [pc, #452]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0203 	and.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d10d      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
       ||
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004586:	4b6b      	ldr	r3, [pc, #428]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
       ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d047      	beq.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e044      	b.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d018      	beq.n	80045da <RCCEx_PLLSAI1_Config+0x86>
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d825      	bhi.n	80045f8 <RCCEx_PLLSAI1_Config+0xa4>
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d002      	beq.n	80045b6 <RCCEx_PLLSAI1_Config+0x62>
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d009      	beq.n	80045c8 <RCCEx_PLLSAI1_Config+0x74>
 80045b4:	e020      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11d      	bne.n	80045fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c6:	e01a      	b.n	80045fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c8:	4b5a      	ldr	r3, [pc, #360]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e013      	b.n	8004602 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045da:	4b56      	ldr	r3, [pc, #344]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045e6:	4b53      	ldr	r3, [pc, #332]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045f6:	e006      	b.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e004      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004606:	bf00      	nop
    }

    if(status == HAL_OK)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	430b      	orrs	r3, r1
 8004624:	4943      	ldr	r1, [pc, #268]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d17c      	bne.n	800472a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004630:	4b40      	ldr	r3, [pc, #256]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a3f      	ldr	r2, [pc, #252]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800463a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463c:	f7fd f874 	bl	8001728 <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004642:	e009      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004644:	f7fd f870 	bl	8001728 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	73fb      	strb	r3, [r7, #15]
        break;
 8004656:	e005      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004658:	4b36      	ldr	r3, [pc, #216]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ef      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d15f      	bne.n	800472a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d110      	bne.n	8004692 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004670:	4b30      	ldr	r3, [pc, #192]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004678:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	0211      	lsls	r1, r2, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68d2      	ldr	r2, [r2, #12]
 8004686:	06d2      	lsls	r2, r2, #27
 8004688:	430a      	orrs	r2, r1
 800468a:	492a      	ldr	r1, [pc, #168]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	610b      	str	r3, [r1, #16]
 8004690:	e027      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d112      	bne.n	80046be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004698:	4b26      	ldr	r3, [pc, #152]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6892      	ldr	r2, [r2, #8]
 80046a8:	0211      	lsls	r1, r2, #8
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6912      	ldr	r2, [r2, #16]
 80046ae:	0852      	lsrs	r2, r2, #1
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0552      	lsls	r2, r2, #21
 80046b4:	430a      	orrs	r2, r1
 80046b6:	491f      	ldr	r1, [pc, #124]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	610b      	str	r3, [r1, #16]
 80046bc:	e011      	b.n	80046e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6892      	ldr	r2, [r2, #8]
 80046ce:	0211      	lsls	r1, r2, #8
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6952      	ldr	r2, [r2, #20]
 80046d4:	0852      	lsrs	r2, r2, #1
 80046d6:	3a01      	subs	r2, #1
 80046d8:	0652      	lsls	r2, r2, #25
 80046da:	430a      	orrs	r2, r1
 80046dc:	4915      	ldr	r1, [pc, #84]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046e2:	4b14      	ldr	r3, [pc, #80]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a13      	ldr	r2, [pc, #76]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fd f81b 	bl	8001728 <HAL_GetTick>
 80046f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046f4:	e009      	b.n	800470a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f6:	f7fd f817 	bl	8001728 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d902      	bls.n	800470a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	73fb      	strb	r3, [r7, #15]
          break;
 8004708:	e005      	b.n	8004716 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ef      	beq.n	80046f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	4903      	ldr	r1, [pc, #12]	; (8004734 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800472a:	7bfb      	ldrb	r3, [r7, #15]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40021000 	.word	0x40021000

08004738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e049      	b.n	80047de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fc fedc 	bl	800151c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f000 fa82 	bl	8004c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d001      	beq.n	8004800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e03b      	b.n	8004878 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <HAL_TIM_Base_Start_IT+0x9c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_TIM_Base_Start_IT+0x4e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482a:	d004      	beq.n	8004836 <HAL_TIM_Base_Start_IT+0x4e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a15      	ldr	r2, [pc, #84]	; (8004888 <HAL_TIM_Base_Start_IT+0xa0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d115      	bne.n	8004862 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	4b13      	ldr	r3, [pc, #76]	; (800488c <HAL_TIM_Base_Start_IT+0xa4>)
 800483e:	4013      	ands	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b06      	cmp	r3, #6
 8004846:	d015      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x8c>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d011      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	e008      	b.n	8004874 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e000      	b.n	8004876 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004874:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40014000 	.word	0x40014000
 800488c:	00010007 	.word	0x00010007

08004890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d020      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01b      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0202 	mvn.w	r2, #2
 80048c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9b2 	bl	8004c44 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9a4 	bl	8004c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f9b5 	bl	8004c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d020      	beq.n	8004940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0204 	mvn.w	r2, #4
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f98c 	bl	8004c44 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f97e 	bl	8004c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f98f 	bl	8004c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d020      	beq.n	800498c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0208 	mvn.w	r2, #8
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f966 	bl	8004c44 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f958 	bl	8004c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f969 	bl	8004c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f940 	bl	8004c44 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f932 	bl	8004c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f943 	bl	8004c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0201 	mvn.w	r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc fc96 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00c      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 faa5 	bl	8004f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00c      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fa9d 	bl	8004f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00c      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f8fd 	bl	8004c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00c      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f06f 0220 	mvn.w	r2, #32
 8004a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fa65 	bl	8004f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_ConfigClockSource+0x1c>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0b6      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x18a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004adc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af6:	d03e      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xd8>
 8004af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afc:	f200 8087 	bhi.w	8004c0e <HAL_TIM_ConfigClockSource+0x170>
 8004b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b04:	f000 8086 	beq.w	8004c14 <HAL_TIM_ConfigClockSource+0x176>
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d87f      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x170>
 8004b0e:	2b70      	cmp	r3, #112	; 0x70
 8004b10:	d01a      	beq.n	8004b48 <HAL_TIM_ConfigClockSource+0xaa>
 8004b12:	2b70      	cmp	r3, #112	; 0x70
 8004b14:	d87b      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x170>
 8004b16:	2b60      	cmp	r3, #96	; 0x60
 8004b18:	d050      	beq.n	8004bbc <HAL_TIM_ConfigClockSource+0x11e>
 8004b1a:	2b60      	cmp	r3, #96	; 0x60
 8004b1c:	d877      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x170>
 8004b1e:	2b50      	cmp	r3, #80	; 0x50
 8004b20:	d03c      	beq.n	8004b9c <HAL_TIM_ConfigClockSource+0xfe>
 8004b22:	2b50      	cmp	r3, #80	; 0x50
 8004b24:	d873      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x170>
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d058      	beq.n	8004bdc <HAL_TIM_ConfigClockSource+0x13e>
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d86f      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x170>
 8004b2e:	2b30      	cmp	r3, #48	; 0x30
 8004b30:	d064      	beq.n	8004bfc <HAL_TIM_ConfigClockSource+0x15e>
 8004b32:	2b30      	cmp	r3, #48	; 0x30
 8004b34:	d86b      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x170>
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d060      	beq.n	8004bfc <HAL_TIM_ConfigClockSource+0x15e>
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d867      	bhi.n	8004c0e <HAL_TIM_ConfigClockSource+0x170>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d05c      	beq.n	8004bfc <HAL_TIM_ConfigClockSource+0x15e>
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d05a      	beq.n	8004bfc <HAL_TIM_ConfigClockSource+0x15e>
 8004b46:	e062      	b.n	8004c0e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b58:	f000 f97c 	bl	8004e54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
      break;
 8004b74:	e04f      	b.n	8004c16 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b86:	f000 f965 	bl	8004e54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b98:	609a      	str	r2, [r3, #8]
      break;
 8004b9a:	e03c      	b.n	8004c16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f000 f8d9 	bl	8004d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2150      	movs	r1, #80	; 0x50
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 f932 	bl	8004e1e <TIM_ITRx_SetConfig>
      break;
 8004bba:	e02c      	b.n	8004c16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f000 f8f8 	bl	8004dbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2160      	movs	r1, #96	; 0x60
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 f922 	bl	8004e1e <TIM_ITRx_SetConfig>
      break;
 8004bda:	e01c      	b.n	8004c16 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be8:	461a      	mov	r2, r3
 8004bea:	f000 f8b9 	bl	8004d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2140      	movs	r1, #64	; 0x40
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f912 	bl	8004e1e <TIM_ITRx_SetConfig>
      break;
 8004bfa:	e00c      	b.n	8004c16 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 f909 	bl	8004e1e <TIM_ITRx_SetConfig>
      break;
 8004c0c:	e003      	b.n	8004c16 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
      break;
 8004c12:	e000      	b.n	8004c16 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <TIM_Base_SetConfig+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x20>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <TIM_Base_SetConfig+0xd4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_Base_SetConfig+0x52>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d007      	beq.n	8004cd2 <TIM_Base_SetConfig+0x52>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <TIM_Base_SetConfig+0xd8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_Base_SetConfig+0x52>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a23      	ldr	r2, [pc, #140]	; (8004d5c <TIM_Base_SetConfig+0xdc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a12      	ldr	r2, [pc, #72]	; (8004d54 <TIM_Base_SetConfig+0xd4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_Base_SetConfig+0xa0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a11      	ldr	r2, [pc, #68]	; (8004d58 <TIM_Base_SetConfig+0xd8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_Base_SetConfig+0xa0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a10      	ldr	r2, [pc, #64]	; (8004d5c <TIM_Base_SetConfig+0xdc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f023 0201 	bic.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	611a      	str	r2, [r3, #16]
  }
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400

08004d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f023 0201 	bic.w	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f023 030a 	bic.w	r3, r3, #10
 8004d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	621a      	str	r2, [r3, #32]
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b087      	sub	sp, #28
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f023 0210 	bic.w	r2, r3, #16
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	031b      	lsls	r3, r3, #12
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f043 0307 	orr.w	r3, r3, #7
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	021a      	lsls	r2, r3, #8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	609a      	str	r2, [r3, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e04f      	b.n	8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a21      	ldr	r2, [pc, #132]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d108      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004edc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d004      	beq.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a10      	ldr	r2, [pc, #64]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10c      	bne.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40014000 	.word	0x40014000

08004f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <memset>:
 8004f9c:	4402      	add	r2, r0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d100      	bne.n	8004fa6 <memset+0xa>
 8004fa4:	4770      	bx	lr
 8004fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004faa:	e7f9      	b.n	8004fa0 <memset+0x4>

08004fac <__libc_init_array>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4d0d      	ldr	r5, [pc, #52]	; (8004fe4 <__libc_init_array+0x38>)
 8004fb0:	4c0d      	ldr	r4, [pc, #52]	; (8004fe8 <__libc_init_array+0x3c>)
 8004fb2:	1b64      	subs	r4, r4, r5
 8004fb4:	10a4      	asrs	r4, r4, #2
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	42a6      	cmp	r6, r4
 8004fba:	d109      	bne.n	8004fd0 <__libc_init_array+0x24>
 8004fbc:	4d0b      	ldr	r5, [pc, #44]	; (8004fec <__libc_init_array+0x40>)
 8004fbe:	4c0c      	ldr	r4, [pc, #48]	; (8004ff0 <__libc_init_array+0x44>)
 8004fc0:	f000 f818 	bl	8004ff4 <_init>
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	2600      	movs	r6, #0
 8004fca:	42a6      	cmp	r6, r4
 8004fcc:	d105      	bne.n	8004fda <__libc_init_array+0x2e>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd4:	4798      	blx	r3
 8004fd6:	3601      	adds	r6, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__libc_init_array+0xc>
 8004fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fde:	4798      	blx	r3
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7f2      	b.n	8004fca <__libc_init_array+0x1e>
 8004fe4:	0800504c 	.word	0x0800504c
 8004fe8:	0800504c 	.word	0x0800504c
 8004fec:	0800504c 	.word	0x0800504c
 8004ff0:	08005050 	.word	0x08005050

08004ff4 <_init>:
 8004ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff6:	bf00      	nop
 8004ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffa:	bc08      	pop	{r3}
 8004ffc:	469e      	mov	lr, r3
 8004ffe:	4770      	bx	lr

08005000 <_fini>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr

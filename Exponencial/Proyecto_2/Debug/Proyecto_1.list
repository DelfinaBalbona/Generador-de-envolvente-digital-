
Proyecto_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d0c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003edc  08003edc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003edc  08003edc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003edc  08003edc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000020  08003f04  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003f04  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009433  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ae  00000000  00000000  000294c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ef  00000000  00000000  0002b7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d08  00000000  00000000  0002beb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a00e  00000000  00000000  0004cbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc507  00000000  00000000  00056bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002744  00000000  00000000  001230d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00125818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e84 	.word	0x08003e84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08003e84 	.word	0x08003e84

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	0000      	movs	r0, r0
	...

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fc66 	bl	8001436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f99d 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 fa83 	bl	8001078 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b72:	f000 f9eb 	bl	8000f4c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b76:	f000 fa4d 	bl	8001014 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_EXTI_Callback(GPIO_PIN_4);

  	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	48bc      	ldr	r0, [pc, #752]	; (8000e70 <main+0x310>)
 8000b7e:	f001 fcd6 	bl	800252e <HAL_DAC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Espera la conversión
	  var = HAL_ADC_GetValue(&hadc1); // Lee el valor convertido
	  HAL_ADC_Stop(&hadc1); // Detiene la conversión*/


	  switch(etapas)
 8000b82:	4bbc      	ldr	r3, [pc, #752]	; (8000e74 <main+0x314>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d8fb      	bhi.n	8000b82 <main+0x22>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <main+0x30>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000ba5 	.word	0x08000ba5
 8000b94:	08000c5b 	.word	0x08000c5b
 8000b98:	08000d3d 	.word	0x08000d3d
 8000b9c:	08000d95 	.word	0x08000d95
 8000ba0:	08000e45 	.word	0x08000e45
	  {
	  	  case attack:

	  		  float pendiente_a = 3.3/t_a;
 8000ba4:	4bb4      	ldr	r3, [pc, #720]	; (8000e78 <main+0x318>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc75 	bl	8000498 <__aeabi_f2d>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	a1ad      	add	r1, pc, #692	; (adr r1, 8000e68 <main+0x308>)
 8000bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bb8:	f7ff fdf0 	bl	800079c <__aeabi_ddiv>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f7ff ff7a 	bl	8000abc <__aeabi_d2f>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	607b      	str	r3, [r7, #4]
	  		  b_a = 0;
 8000bcc:	4bab      	ldr	r3, [pc, #684]	; (8000e7c <main+0x31c>)
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]

	  		  env = generador_rectas(pendiente_a, b_a);
 8000bd4:	4ba9      	ldr	r3, [pc, #676]	; (8000e7c <main+0x31c>)
 8000bd6:	edd3 7a00 	vldr	s15, [r3]
 8000bda:	eef0 0a67 	vmov.f32	s1, s15
 8000bde:	ed97 0a01 	vldr	s0, [r7, #4]
 8000be2:	f000 fa91 	bl	8001108 <generador_rectas>
 8000be6:	eef0 7a40 	vmov.f32	s15, s0
 8000bea:	4ba5      	ldr	r3, [pc, #660]	; (8000e80 <main+0x320>)
 8000bec:	edc3 7a00 	vstr	s15, [r3]

	  		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000bf0:	4ba3      	ldr	r3, [pc, #652]	; (8000e80 <main+0x320>)
 8000bf2:	edd3 7a00 	vldr	s15, [r3]
 8000bf6:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8000e84 <main+0x324>
 8000bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bfe:	ee17 0a90 	vmov	r0, s15
 8000c02:	f7ff fc49 	bl	8000498 <__aeabi_f2d>
 8000c06:	a398      	add	r3, pc, #608	; (adr r3, 8000e68 <main+0x308>)
 8000c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0c:	f7ff fdc6 	bl	800079c <__aeabi_ddiv>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4610      	mov	r0, r2
 8000c16:	4619      	mov	r1, r3
 8000c18:	f7ff ff30 	bl	8000a7c <__aeabi_d2uiz>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2110      	movs	r1, #16
 8000c22:	4893      	ldr	r0, [pc, #588]	; (8000e70 <main+0x310>)
 8000c24:	f001 fcd0 	bl	80025c8 <HAL_DAC_SetValue>

	  		  if(env >= 3.3)
 8000c28:	4b95      	ldr	r3, [pc, #596]	; (8000e80 <main+0x320>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fc33 	bl	8000498 <__aeabi_f2d>
 8000c32:	a38d      	add	r3, pc, #564	; (adr r3, 8000e68 <main+0x308>)
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	f7ff ff0c 	bl	8000a54 <__aeabi_dcmpge>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <main+0xf2>
	  		  {
	  			  etapas = decay;
 8000c42:	4b8c      	ldr	r3, [pc, #560]	; (8000e74 <main+0x314>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000c48:	4b8f      	ldr	r3, [pc, #572]	; (8000e88 <main+0x328>)
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			  etapas = attack;
	  		  }

	  		  break;
 8000c50:	e109      	b.n	8000e66 <main+0x306>
	  			  etapas = attack;
 8000c52:	4b88      	ldr	r3, [pc, #544]	; (8000e74 <main+0x314>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000c58:	e105      	b.n	8000e66 <main+0x306>
	  	  case decay:

	  		  float pendiente_d = (v_s - 3.3)/t_d;
 8000c5a:	4b8c      	ldr	r3, [pc, #560]	; (8000e8c <main+0x32c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc1a 	bl	8000498 <__aeabi_f2d>
 8000c64:	a380      	add	r3, pc, #512	; (adr r3, 8000e68 <main+0x308>)
 8000c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6a:	f7ff fab5 	bl	80001d8 <__aeabi_dsub>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	4614      	mov	r4, r2
 8000c74:	461d      	mov	r5, r3
 8000c76:	4b86      	ldr	r3, [pc, #536]	; (8000e90 <main+0x330>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fc0c 	bl	8000498 <__aeabi_f2d>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4620      	mov	r0, r4
 8000c86:	4629      	mov	r1, r5
 8000c88:	f7ff fd88 	bl	800079c <__aeabi_ddiv>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff ff12 	bl	8000abc <__aeabi_d2f>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60bb      	str	r3, [r7, #8]
	  		  b_d = v_s - pendiente_d * t_d;
 8000c9c:	4b7b      	ldr	r3, [pc, #492]	; (8000e8c <main+0x32c>)
 8000c9e:	ed93 7a00 	vldr	s14, [r3]
 8000ca2:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <main+0x330>)
 8000ca4:	edd3 6a00 	vldr	s13, [r3]
 8000ca8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cb4:	4b77      	ldr	r3, [pc, #476]	; (8000e94 <main+0x334>)
 8000cb6:	edc3 7a00 	vstr	s15, [r3]

	  		  env = generador_rectas(pendiente_d, b_d);
 8000cba:	4b76      	ldr	r3, [pc, #472]	; (8000e94 <main+0x334>)
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	eef0 0a67 	vmov.f32	s1, s15
 8000cc4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000cc8:	f000 fa1e 	bl	8001108 <generador_rectas>
 8000ccc:	eef0 7a40 	vmov.f32	s15, s0
 8000cd0:	4b6b      	ldr	r3, [pc, #428]	; (8000e80 <main+0x320>)
 8000cd2:	edc3 7a00 	vstr	s15, [r3]

	  		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000cd6:	4b6a      	ldr	r3, [pc, #424]	; (8000e80 <main+0x320>)
 8000cd8:	edd3 7a00 	vldr	s15, [r3]
 8000cdc:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000e84 <main+0x324>
 8000ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ce4:	ee17 0a90 	vmov	r0, s15
 8000ce8:	f7ff fbd6 	bl	8000498 <__aeabi_f2d>
 8000cec:	a35e      	add	r3, pc, #376	; (adr r3, 8000e68 <main+0x308>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	f7ff fd53 	bl	800079c <__aeabi_ddiv>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f7ff febd 	bl	8000a7c <__aeabi_d2uiz>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2200      	movs	r2, #0
 8000d06:	2110      	movs	r1, #16
 8000d08:	4859      	ldr	r0, [pc, #356]	; (8000e70 <main+0x310>)
 8000d0a:	f001 fc5d 	bl	80025c8 <HAL_DAC_SetValue>

	  		  if(env <= v_s)
 8000d0e:	4b5c      	ldr	r3, [pc, #368]	; (8000e80 <main+0x320>)
 8000d10:	ed93 7a00 	vldr	s14, [r3]
 8000d14:	4b5d      	ldr	r3, [pc, #372]	; (8000e8c <main+0x32c>)
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d22:	d807      	bhi.n	8000d34 <main+0x1d4>
	  		  {
	  			  etapas = sustain;
 8000d24:	4b53      	ldr	r3, [pc, #332]	; (8000e74 <main+0x314>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000d2a:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <main+0x328>)
 8000d2c:	f04f 0200 	mov.w	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			  etapas = decay;
	  		  }

	  		  break;
 8000d32:	e098      	b.n	8000e66 <main+0x306>
	  			  etapas = decay;
 8000d34:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <main+0x314>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000d3a:	e094      	b.n	8000e66 <main+0x306>
	  	  case sustain:

	  		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000d3c:	4b50      	ldr	r3, [pc, #320]	; (8000e80 <main+0x320>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000e84 <main+0x324>
 8000d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4a:	ee17 0a90 	vmov	r0, s15
 8000d4e:	f7ff fba3 	bl	8000498 <__aeabi_f2d>
 8000d52:	a345      	add	r3, pc, #276	; (adr r3, 8000e68 <main+0x308>)
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f7ff fd20 	bl	800079c <__aeabi_ddiv>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff fe8a 	bl	8000a7c <__aeabi_d2uiz>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	4840      	ldr	r0, [pc, #256]	; (8000e70 <main+0x310>)
 8000d70:	f001 fc2a 	bl	80025c8 <HAL_DAC_SetValue>

	  		  if(Gate == 0)
 8000d74:	4b48      	ldr	r3, [pc, #288]	; (8000e98 <main+0x338>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d107      	bne.n	8000d8c <main+0x22c>
	  		  {
	  			  etapas = release;
 8000d7c:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <main+0x314>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <main+0x328>)
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			etapas = sustain;
	  		  }

	  		  break;
 8000d8a:	e06c      	b.n	8000e66 <main+0x306>
	  			etapas = sustain;
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <main+0x314>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000d92:	e068      	b.n	8000e66 <main+0x306>
	  	  case release:

	  		  float pendiente_r = (0 - v_s)/t_r;
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <main+0x32c>)
 8000d96:	edd3 7a00 	vldr	s15, [r3]
 8000d9a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000e9c <main+0x33c>
 8000d9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000da2:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <main+0x340>)
 8000da4:	ed93 7a00 	vldr	s14, [r3]
 8000da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dac:	edc7 7a03 	vstr	s15, [r7, #12]
	  		  b_r = - pendiente_r * t_r;
 8000db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db4:	eeb1 7a67 	vneg.f32	s14, s15
 8000db8:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <main+0x340>)
 8000dba:	edd3 7a00 	vldr	s15, [r3]
 8000dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <main+0x344>)
 8000dc4:	edc3 7a00 	vstr	s15, [r3]

	  		  env = generador_rectas(pendiente_r, b_r);
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <main+0x344>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	eef0 0a67 	vmov.f32	s1, s15
 8000dd2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000dd6:	f000 f997 	bl	8001108 <generador_rectas>
 8000dda:	eef0 7a40 	vmov.f32	s15, s0
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <main+0x320>)
 8000de0:	edc3 7a00 	vstr	s15, [r3]

	  		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <main+0x320>)
 8000de6:	edd3 7a00 	vldr	s15, [r3]
 8000dea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000e84 <main+0x324>
 8000dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df2:	ee17 0a90 	vmov	r0, s15
 8000df6:	f7ff fb4f 	bl	8000498 <__aeabi_f2d>
 8000dfa:	a31b      	add	r3, pc, #108	; (adr r3, 8000e68 <main+0x308>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	f7ff fccc 	bl	800079c <__aeabi_ddiv>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f7ff fe36 	bl	8000a7c <__aeabi_d2uiz>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2200      	movs	r2, #0
 8000e14:	2110      	movs	r1, #16
 8000e16:	4816      	ldr	r0, [pc, #88]	; (8000e70 <main+0x310>)
 8000e18:	f001 fbd6 	bl	80025c8 <HAL_DAC_SetValue>

	  		  if(env <=0)
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <main+0x320>)
 8000e1e:	edd3 7a00 	vldr	s15, [r3]
 8000e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2a:	d807      	bhi.n	8000e3c <main+0x2dc>
	  		  {
	  			  etapas = off;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <main+0x314>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <main+0x328>)
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			  etapas = release;
	  		  }

	  		  break;
 8000e3a:	e014      	b.n	8000e66 <main+0x306>
	  			  etapas = release;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <main+0x314>)
 8000e3e:	2203      	movs	r2, #3
 8000e40:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000e42:	e010      	b.n	8000e66 <main+0x306>
	  	  case off:

	  		  if(Gate == 1)
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <main+0x338>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d107      	bne.n	8000e5c <main+0x2fc>
	  		  {
	  			  etapas = attack;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <main+0x314>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
	  			  x = 0;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <main+0x328>)
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
	  		  else
	  		  {
	  			  etapas = off;
	  		  }

	  		  break;
 8000e5a:	e002      	b.n	8000e62 <main+0x302>
	  			  etapas = off;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <main+0x314>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000e62:	bf00      	nop
 8000e64:	e68d      	b.n	8000b82 <main+0x22>
	  switch(etapas)
 8000e66:	e68c      	b.n	8000b82 <main+0x22>
 8000e68:	66666666 	.word	0x66666666
 8000e6c:	400a6666 	.word	0x400a6666
 8000e70:	200000a0 	.word	0x200000a0
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	200000b4 	.word	0x200000b4
 8000e80:	200000cc 	.word	0x200000cc
 8000e84:	457ff000 	.word	0x457ff000
 8000e88:	200000c4 	.word	0x200000c4
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000008 	.word	0x20000008
 8000e94:	200000b8 	.word	0x200000b8
 8000e98:	200000c0 	.word	0x200000c0
 8000e9c:	00000000 	.word	0x00000000
 8000ea0:	20000010 	.word	0x20000010
 8000ea4:	200000bc 	.word	0x200000bc

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b096      	sub	sp, #88	; 0x58
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2244      	movs	r2, #68	; 0x44
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 ffb8 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ece:	f001 fe6f 	bl	8002bb0 <HAL_PWREx_ControlVoltageScaling>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ed8:	f000 f974 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000edc:	2310      	movs	r3, #16
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ee8:	2360      	movs	r3, #96	; 0x60
 8000eea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eec:	2302      	movs	r3, #2
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ef8:	2328      	movs	r3, #40	; 0x28
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000efc:	2307      	movs	r3, #7
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f00:	2302      	movs	r3, #2
 8000f02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fea5 	bl	8002c5c <HAL_RCC_OscConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f18:	f000 f954 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f20:	2303      	movs	r3, #3
 8000f22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	2104      	movs	r1, #4
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 faa5 	bl	8003484 <HAL_RCC_ClockConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f40:	f000 f940 	bl	80011c4 <Error_Handler>
  }
}
 8000f44:	bf00      	nop
 8000f46:	3758      	adds	r7, #88	; 0x58
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f64:	4a29      	ldr	r2, [pc, #164]	; (800100c <MX_ADC1_Init+0xc0>)
 8000f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000fc4:	f000 fc5c 	bl	8001880 <HAL_ADC_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000fce:	f000 f8f9 	bl	80011c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_ADC1_Init+0xc4>)
 8000fd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fde:	237f      	movs	r3, #127	; 0x7f
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_ADC1_Init+0xbc>)
 8000ff0:	f000 fd88 	bl	8001b04 <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ffa:	f000 f8e3 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000003c 	.word	0x2000003c
 800100c:	50040000 	.word	0x50040000
 8001010:	14f00020 	.word	0x14f00020

08001014 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2224      	movs	r2, #36	; 0x24
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f002 ff03 	bl	8003e2c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_DAC1_Init+0x5c>)
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_DAC1_Init+0x60>)
 800102a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800102c:	4810      	ldr	r0, [pc, #64]	; (8001070 <MX_DAC1_Init+0x5c>)
 800102e:	f001 fa5c 	bl	80024ea <HAL_DAC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001038:	f000 f8c4 	bl	80011c4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2210      	movs	r2, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_DAC1_Init+0x5c>)
 8001058:	f001 fadb 	bl	8002612 <HAL_DAC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001062:	f000 f8af 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000a0 	.word	0x200000a0
 8001074:	40007400 	.word	0x40007400

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_GPIO_Init+0x88>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <MX_GPIO_Init+0x88>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_GPIO_Init+0x88>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f001 fd42 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010b0:	2310      	movs	r3, #16
 80010b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010b4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f001 fbcb 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ca:	2340      	movs	r3, #64	; 0x40
 80010cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f001 fbbd 	bl	8002860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	200a      	movs	r0, #10
 80010ec:	f001 f9c7 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f001 f9e0 	bl	80024b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	00000000 	.word	0x00000000

08001108 <generador_rectas>:

/* USER CODE BEGIN 4 */

float generador_rectas(float m, float b)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001112:	edc7 0a00 	vstr	s1, [r7]

	y = m*x+b;
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <generador_rectas+0x70>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	edd7 7a00 	vldr	s15, [r7]
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <generador_rectas+0x74>)
 800112e:	edc3 7a00 	vstr	s15, [r3]

	x += 20e-6;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <generador_rectas+0x70>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9ae 	bl	8000498 <__aeabi_f2d>
 800113c:	a30c      	add	r3, pc, #48	; (adr r3, 8001170 <generador_rectas+0x68>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff f84b 	bl	80001dc <__adddf3>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fcb5 	bl	8000abc <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	4a08      	ldr	r2, [pc, #32]	; (8001178 <generador_rectas+0x70>)
 8001156:	6013      	str	r3, [r2, #0]

	return y;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <generador_rectas+0x74>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	ee07 3a90 	vmov	s15, r3
}
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	f3af 8000 	nop.w
 8001170:	88e368f1 	.word	0x88e368f1
 8001174:	3ef4f8b5 	.word	0x3ef4f8b5
 8001178:	200000c4 	.word	0x200000c4
 800117c:	200000c8 	.word	0x200000c8

08001180 <HAL_GPIO_EXTI_Callback>:

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]

	//HAL_Delay(200);

	if(Gate == 0)
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x40>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <HAL_GPIO_EXTI_Callback+0x26>
	{
		Gate = 1;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x40>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f001 fcc8 	bl	8002b34 <HAL_GPIO_WritePin>
	{
		Gate = 0;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
	}

}
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_EXTI_Callback+0x38>
		Gate = 0;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x40>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f001 fcbe 	bl	8002b34 <HAL_GPIO_WritePin>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000c0 	.word	0x200000c0

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x44>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6613      	str	r3, [r2, #96]	; 0x60
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x44>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x44>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x44>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x44>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b09e      	sub	sp, #120	; 0x78
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2254      	movs	r2, #84	; 0x54
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f002 fdf7 	bl	8003e2c <memset>
  if(hadc->Instance==ADC1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_ADC_MspInit+0xc0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d143      	bne.n	80012d0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001248:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800124c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800124e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001252:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001254:	2301      	movs	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800125c:	2310      	movs	r3, #16
 800125e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001260:	2307      	movs	r3, #7
 8001262:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001264:	2302      	movs	r3, #2
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800126c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4618      	mov	r0, r3
 8001278:	f002 faf0 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001282:	f7ff ff9f 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_ADC_MspInit+0xc4>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_ADC_MspInit+0xc4>)
 800128c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_ADC_MspInit+0xc4>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_ADC_MspInit+0xc4>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_ADC_MspInit+0xc4>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_ADC_MspInit+0xc4>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b6:	2301      	movs	r3, #1
 80012b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012ba:	230b      	movs	r3, #11
 80012bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f001 fac8 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3778      	adds	r7, #120	; 0x78
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	50040000 	.word	0x50040000
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <HAL_DAC_MspInit+0x74>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d124      	bne.n	800134c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800130c:	6593      	str	r3, [r2, #88]	; 0x58
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_DAC_MspInit+0x78>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_DAC_MspInit+0x78>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001332:	2320      	movs	r3, #32
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f001 fa8a 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40007400 	.word	0x40007400
 8001358:	40021000 	.word	0x40021000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f89a 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80013b4:	2010      	movs	r0, #16
 80013b6:	f001 fbd5 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <SystemInit+0x20>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <SystemInit+0x20>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e8:	f7ff ffea 	bl	80013c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ee:	490d      	ldr	r1, [pc, #52]	; (8001424 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <LoopForever+0xe>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001404:	4c0a      	ldr	r4, [pc, #40]	; (8001430 <LoopForever+0x16>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001412:	f002 fd13 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001416:	f7ff fba3 	bl	8000b60 <main>

0800141a <LoopForever>:

LoopForever:
    b LoopForever
 800141a:	e7fe      	b.n	800141a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800141c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001424:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001428:	08003ee4 	.word	0x08003ee4
  ldr r2, =_sbss
 800142c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001430:	200000d4 	.word	0x200000d4

08001434 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_IRQHandler>

08001436 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f001 f811 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f80e 	bl	8001468 <HAL_InitTick>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	e001      	b.n	800145c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001458:	f7ff feba 	bl	80011d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800145c:	79fb      	ldrb	r3, [r7, #7]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_InitTick+0x6c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d023      	beq.n	80014c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_InitTick+0x70>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_InitTick+0x6c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f001 f81d 	bl	80024d2 <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d809      	bhi.n	80014b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 ffe7 	bl	800247e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b0:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_InitTick+0x74>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e007      	b.n	80014c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e004      	b.n	80014c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e001      	b.n	80014c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000001c 	.word	0x2000001c
 80014d8:	20000014 	.word	0x20000014
 80014dc:	20000018 	.word	0x20000018

080014e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000001c 	.word	0x2000001c
 8001504:	200000d0 	.word	0x200000d0

08001508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200000d0 	.word	0x200000d0

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff ffee 	bl	8001508 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffde 	bl	8001508 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000001c 	.word	0x2000001c

08001568 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	609a      	str	r2, [r3, #8]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	609a      	str	r2, [r3, #8]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3360      	adds	r3, #96	; 0x60
 80015e2:	461a      	mov	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <LL_ADC_SetOffset+0x44>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	4313      	orrs	r3, r2
 8001600:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001608:	bf00      	nop
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	03fff000 	.word	0x03fff000

08001618 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3360      	adds	r3, #96	; 0x60
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3360      	adds	r3, #96	; 0x60
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800167a:	b480      	push	{r7}
 800167c:	b087      	sub	sp, #28
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3330      	adds	r3, #48	; 0x30
 800168a:	461a      	mov	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	4413      	add	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	211f      	movs	r1, #31
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	401a      	ands	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	0e9b      	lsrs	r3, r3, #26
 80016b2:	f003 011f 	and.w	r1, r3, #31
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b087      	sub	sp, #28
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3314      	adds	r3, #20
 80016e2:	461a      	mov	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	0e5b      	lsrs	r3, r3, #25
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	4413      	add	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	0d1b      	lsrs	r3, r3, #20
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	2107      	movs	r1, #7
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	0d1b      	lsrs	r3, r3, #20
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	431a      	orrs	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001740:	43db      	mvns	r3, r3
 8001742:	401a      	ands	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0318 	and.w	r3, r3, #24
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <LL_ADC_SetChannelSingleDiff+0x44>)
 800174c:	40d9      	lsrs	r1, r3
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	400b      	ands	r3, r1
 8001752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001756:	431a      	orrs	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	0007ffff 	.word	0x0007ffff

08001770 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001780:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6093      	str	r3, [r2, #8]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017a8:	d101      	bne.n	80017ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017f8:	d101      	bne.n	80017fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <LL_ADC_IsEnabled+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_ADC_IsEnabled+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b04      	cmp	r3, #4
 8001844:	d101      	bne.n	800184a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b08      	cmp	r3, #8
 800186a:	d101      	bne.n	8001870 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e126      	b.n	8001ae8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fcb5 	bl	8001218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff67 	bl	8001794 <LL_ADC_IsDeepPowerDownEnabled>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff4d 	bl	8001770 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff82 	bl	80017e4 <LL_ADC_IsInternalRegulatorEnabled>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d115      	bne.n	8001912 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff66 	bl	80017bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018f0:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_ADC_Init+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	4a7f      	ldr	r2, [pc, #508]	; (8001af4 <HAL_ADC_Init+0x274>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001904:	e002      	b.n	800190c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3b01      	subs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f9      	bne.n	8001906 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff64 	bl	80017e4 <LL_ADC_IsInternalRegulatorEnabled>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10d      	bne.n	800193e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f043 0210 	orr.w	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff75 	bl	8001832 <LL_ADC_REG_IsConversionOngoing>
 8001948:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 80bf 	bne.w	8001ad6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 80bb 	bne.w	8001ad6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001968:	f043 0202 	orr.w	r2, r3, #2
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff49 	bl	800180c <LL_ADC_IsEnabled>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10b      	bne.n	8001998 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001980:	485d      	ldr	r0, [pc, #372]	; (8001af8 <HAL_ADC_Init+0x278>)
 8001982:	f7ff ff43 	bl	800180c <LL_ADC_IsEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4619      	mov	r1, r3
 8001992:	485a      	ldr	r0, [pc, #360]	; (8001afc <HAL_ADC_Init+0x27c>)
 8001994:	f7ff fde8 	bl	8001568 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7e5b      	ldrb	r3, [r3, #25]
 800199c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d106      	bne.n	80019d4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	3b01      	subs	r3, #1
 80019cc:	045b      	lsls	r3, r3, #17
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d009      	beq.n	80019f0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <HAL_ADC_Init+0x280>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	69b9      	ldr	r1, [r7, #24]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff25 	bl	8001858 <LL_ADC_INJ_IsConversionOngoing>
 8001a0e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d13d      	bne.n	8001a92 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d13a      	bne.n	8001a92 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a20:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a28:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a38:	f023 0302 	bic.w	r3, r3, #2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	69b9      	ldr	r1, [r7, #24]
 8001a42:	430b      	orrs	r3, r1
 8001a44:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d118      	bne.n	8001a82 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a5a:	f023 0304 	bic.w	r3, r3, #4
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a66:	4311      	orrs	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a72:	430a      	orrs	r2, r1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	e007      	b.n	8001a92 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10c      	bne.n	8001ab4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f023 010f 	bic.w	r1, r3, #15
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	1e5a      	subs	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab2:	e007      	b.n	8001ac4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 020f 	bic.w	r2, r2, #15
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	f023 0303 	bic.w	r3, r3, #3
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ad4:	e007      	b.n	8001ae6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	f043 0210 	orr.w	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000014 	.word	0x20000014
 8001af4:	053e2d63 	.word	0x053e2d63
 8001af8:	50040000 	.word	0x50040000
 8001afc:	50040300 	.word	0x50040300
 8001b00:	fff0c007 	.word	0xfff0c007

08001b04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0b6      	sub	sp, #216	; 0xd8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x22>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e3bb      	b.n	800229e <HAL_ADC_ConfigChannel+0x79a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe7d 	bl	8001832 <LL_ADC_REG_IsConversionOngoing>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 83a0 	bne.w	8002280 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d824      	bhi.n	8001b9a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	3b02      	subs	r3, #2
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d81b      	bhi.n	8001b92 <HAL_ADC_ConfigChannel+0x8e>
 8001b5a:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <HAL_ADC_ConfigChannel+0x5c>)
 8001b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001b79 	.word	0x08001b79
 8001b68:	08001b81 	.word	0x08001b81
 8001b6c:	08001b89 	.word	0x08001b89
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b70:	230c      	movs	r3, #12
 8001b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b76:	e010      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b7e:	e00c      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001b80:	2318      	movs	r3, #24
 8001b82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b86:	e008      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b90:	e003      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001b92:	2306      	movs	r3, #6
 8001b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b98:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001ba8:	f7ff fd67 	bl	800167a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fe3e 	bl	8001832 <LL_ADC_REG_IsConversionOngoing>
 8001bb6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fe4a 	bl	8001858 <LL_ADC_INJ_IsConversionOngoing>
 8001bc4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f040 81a4 	bne.w	8001f1a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 819f 	bne.w	8001f1a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	461a      	mov	r2, r3
 8001bea:	f7ff fd72 	bl	80016d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00a      	beq.n	8001c26 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6919      	ldr	r1, [r3, #16]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c20:	f7ff fcd6 	bl	80015d0 <LL_ADC_SetOffset>
 8001c24:	e179      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fcf3 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x14e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fce8 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	e01e      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x18c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fcdd 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001c80:	2320      	movs	r3, #32
 8001c82:	e004      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001c84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x1a4>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	e018      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1d6>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ccc:	2320      	movs	r3, #32
 8001cce:	e004      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d106      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fcac 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fc90 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x214>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fc85 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	0e9b      	lsrs	r3, r3, #26
 8001d12:	f003 021f 	and.w	r2, r3, #31
 8001d16:	e01e      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x252>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fc7a 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001d46:	2320      	movs	r3, #32
 8001d48:	e004      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001d4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x26a>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	e018      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x29c>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001d92:	2320      	movs	r3, #32
 8001d94:	e004      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2101      	movs	r1, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fc49 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2102      	movs	r1, #2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fc2d 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x2da>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fc22 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	0e9b      	lsrs	r3, r3, #26
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	e01e      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x318>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2102      	movs	r1, #2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fc17 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	e004      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x330>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	e014      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x35a>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001e50:	2320      	movs	r3, #32
 8001e52:	e004      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d106      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fbea 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2103      	movs	r1, #3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fbce 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10a      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x398>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fbc3 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	f003 021f 	and.w	r2, r3, #31
 8001e9a:	e017      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x3c8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fbb8 	bl	8001618 <LL_ADC_GetOffsetChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e003      	b.n	8001eca <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x3e0>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	e011      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x404>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ef4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2103      	movs	r1, #3
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fb95 	bl	8001644 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fc74 	bl	800180c <LL_ADC_IsEnabled>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 8140 	bne.w	80021ac <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f7ff fbf5 	bl	8001728 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4a8f      	ldr	r2, [pc, #572]	; (8002180 <HAL_ADC_ConfigChannel+0x67c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	f040 8131 	bne.w	80021ac <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10b      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x46e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	3301      	adds	r3, #1
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	bf94      	ite	ls
 8001f6a:	2301      	movls	r3, #1
 8001f6c:	2300      	movhi	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	e019      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x4a2>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f82:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e003      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2b09      	cmp	r3, #9
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d079      	beq.n	800209e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d107      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x4c2>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0e9b      	lsrs	r3, r3, #26
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	069b      	lsls	r3, r3, #26
 8001fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc4:	e015      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x4ee>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	e003      	b.n	8001fea <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	069b      	lsls	r3, r3, #26
 8001fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x50e>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0e9b      	lsrs	r3, r3, #26
 8002004:	3301      	adds	r3, #1
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	e017      	b.n	8002042 <HAL_ADC_ConfigChannel+0x53e>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002022:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e003      	b.n	8002036 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800202e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	2101      	movs	r1, #1
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	ea42 0103 	orr.w	r1, r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x564>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0e9b      	lsrs	r3, r3, #26
 8002058:	3301      	adds	r3, #1
 800205a:	f003 021f 	and.w	r2, r3, #31
 800205e:	4613      	mov	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4413      	add	r3, r2
 8002064:	051b      	lsls	r3, r3, #20
 8002066:	e018      	b.n	800209a <HAL_ADC_ConfigChannel+0x596>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e003      	b.n	800208c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f003 021f 	and.w	r2, r3, #31
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800209a:	430b      	orrs	r3, r1
 800209c:	e081      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d107      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x5b6>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	3301      	adds	r3, #1
 80020b2:	069b      	lsls	r3, r3, #26
 80020b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020b8:	e015      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x5e2>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80020d2:	2320      	movs	r3, #32
 80020d4:	e003      	b.n	80020de <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	069b      	lsls	r3, r3, #26
 80020e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x602>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0e9b      	lsrs	r3, r3, #26
 80020f8:	3301      	adds	r3, #1
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2101      	movs	r1, #1
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	e017      	b.n	8002136 <HAL_ADC_ConfigChannel+0x632>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	61bb      	str	r3, [r7, #24]
  return result;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800211e:	2320      	movs	r3, #32
 8002120:	e003      	b.n	800212a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	ea42 0103 	orr.w	r1, r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x65e>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0e9b      	lsrs	r3, r3, #26
 800214c:	3301      	adds	r3, #1
 800214e:	f003 021f 	and.w	r2, r3, #31
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	3b1e      	subs	r3, #30
 800215a:	051b      	lsls	r3, r3, #20
 800215c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002160:	e01e      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x69c>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	60fb      	str	r3, [r7, #12]
  return result;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d104      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e006      	b.n	800218c <HAL_ADC_ConfigChannel+0x688>
 800217e:	bf00      	nop
 8002180:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f003 021f 	and.w	r2, r3, #31
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	3b1e      	subs	r3, #30
 800219a:	051b      	lsls	r3, r3, #20
 800219c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7ff fa93 	bl	80016d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_ADC_ConfigChannel+0x7a4>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d06c      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021b8:	483c      	ldr	r0, [pc, #240]	; (80022ac <HAL_ADC_ConfigChannel+0x7a8>)
 80021ba:	f7ff f9fb 	bl	80015b4 <LL_ADC_GetCommonPathInternalCh>
 80021be:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_ADC_ConfigChannel+0x7ac>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d127      	bne.n	800221c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d121      	bne.n	800221c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a35      	ldr	r2, [pc, #212]	; (80022b4 <HAL_ADC_ConfigChannel+0x7b0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d157      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021ea:	4619      	mov	r1, r3
 80021ec:	482f      	ldr	r0, [pc, #188]	; (80022ac <HAL_ADC_ConfigChannel+0x7a8>)
 80021ee:	f7ff f9ce 	bl	800158e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_ADC_ConfigChannel+0x7b4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	099b      	lsrs	r3, r3, #6
 80021f8:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_ADC_ConfigChannel+0x7b8>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800220c:	e002      	b.n	8002214 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3b01      	subs	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f9      	bne.n	800220e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800221a:	e03a      	b.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d113      	bne.n	800224e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002226:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800222a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d12a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800223c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002244:	4619      	mov	r1, r3
 8002246:	4819      	ldr	r0, [pc, #100]	; (80022ac <HAL_ADC_ConfigChannel+0x7a8>)
 8002248:	f7ff f9a1 	bl	800158e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224c:	e021      	b.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d11c      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002258:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800225c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d116      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <HAL_ADC_ConfigChannel+0x7b0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d111      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800226e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002272:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002276:	4619      	mov	r1, r3
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <HAL_ADC_ConfigChannel+0x7a8>)
 800227a:	f7ff f988 	bl	800158e <LL_ADC_SetCommonPathInternalCh>
 800227e:	e008      	b.n	8002292 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	f043 0220 	orr.w	r2, r3, #32
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800229a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	37d8      	adds	r7, #216	; 0xd8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	80080000 	.word	0x80080000
 80022ac:	50040300 	.word	0x50040300
 80022b0:	c7520000 	.word	0xc7520000
 80022b4:	50040000 	.word	0x50040000
 80022b8:	20000014 	.word	0x20000014
 80022bc:	053e2d63 	.word	0x053e2d63
 80022c0:	cb840000 	.word	0xcb840000
 80022c4:	80000001 	.word	0x80000001

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff8e 	bl	8002368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff29 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff3e 	bl	8002310 <__NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff8e 	bl	80023bc <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5d 	bl	8002368 <__NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff31 	bl	800232c <__NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e014      	b.n	8002526 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	791b      	ldrb	r3, [r3, #4]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7fe fee7 	bl	80012e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	795b      	ldrb	r3, [r3, #5]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_DAC_Start+0x16>
 8002540:	2302      	movs	r3, #2
 8002542:	e03b      	b.n	80025bc <HAL_DAC_Start+0x8e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2201      	movs	r2, #1
 800255e:	409a      	lsls	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10f      	bne.n	800258e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002578:	2b04      	cmp	r3, #4
 800257a:	d118      	bne.n	80025ae <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	e00f      	b.n	80025ae <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800259c:	d107      	bne.n	80025ae <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0202 	orr.w	r2, r2, #2
 80025ac:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4413      	add	r3, r2
 80025ec:	3308      	adds	r3, #8
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e004      	b.n	80025fc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	3314      	adds	r3, #20
 80025fa:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	461a      	mov	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b088      	sub	sp, #32
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	795b      	ldrb	r3, [r3, #5]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_DAC_ConfigChannel+0x1c>
 800262a:	2302      	movs	r3, #2
 800262c:	e114      	b.n	8002858 <HAL_DAC_ConfigChannel+0x246>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2201      	movs	r2, #1
 8002632:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2202      	movs	r2, #2
 8002638:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b04      	cmp	r3, #4
 8002640:	f040 8081 	bne.w	8002746 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002644:	f7fe ff60 	bl	8001508 <HAL_GetTick>
 8002648:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d140      	bne.n	80026d2 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002650:	e018      	b.n	8002684 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002652:	f7fe ff59 	bl	8001508 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d911      	bls.n	8002684 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f043 0208 	orr.w	r2, r3, #8
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2203      	movs	r2, #3
 800267e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0e9      	b.n	8002858 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1df      	bne.n	8002652 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f7fe ff44 	bl	8001520 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	6992      	ldr	r2, [r2, #24]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
 80026a2:	e023      	b.n	80026ec <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026a4:	f7fe ff30 	bl	8001508 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d90f      	bls.n	80026d2 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da0a      	bge.n	80026d2 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f043 0208 	orr.w	r2, r3, #8
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2203      	movs	r2, #3
 80026cc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0c2      	b.n	8002858 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	2b00      	cmp	r3, #0
 80026da:	dbe3      	blt.n	80026a4 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80026dc:	2001      	movs	r0, #1
 80026de:	f7fe ff1f 	bl	8001520 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	6992      	ldr	r2, [r2, #24]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	ea02 0103 	and.w	r1, r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	409a      	lsls	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	21ff      	movs	r1, #255	; 0xff
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	ea02 0103 	and.w	r1, r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d11d      	bne.n	800278a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	221f      	movs	r2, #31
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2207      	movs	r2, #7
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43da      	mvns	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	400a      	ands	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	22c0      	movs	r2, #192	; 0xc0
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43da      	mvns	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	400a      	ands	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286e:	e148      	b.n	8002b02 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2101      	movs	r1, #1
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 813a 	beq.w	8002afc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d005      	beq.n	80028a0 <HAL_GPIO_Init+0x40>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d130      	bne.n	8002902 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028d6:	2201      	movs	r2, #1
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0201 	and.w	r2, r3, #1
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b03      	cmp	r3, #3
 800290c:	d017      	beq.n	800293e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d123      	bne.n	8002992 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0203 	and.w	r2, r3, #3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8094 	beq.w	8002afc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d4:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <HAL_GPIO_Init+0x2c0>)
 80029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d8:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x2c0>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6613      	str	r3, [r2, #96]	; 0x60
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_GPIO_Init+0x2c0>)
 80029e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ec:	4a4d      	ldr	r2, [pc, #308]	; (8002b24 <HAL_GPIO_Init+0x2c4>)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	220f      	movs	r2, #15
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a16:	d00d      	beq.n	8002a34 <HAL_GPIO_Init+0x1d4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a43      	ldr	r2, [pc, #268]	; (8002b28 <HAL_GPIO_Init+0x2c8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <HAL_GPIO_Init+0x1d0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a42      	ldr	r2, [pc, #264]	; (8002b2c <HAL_GPIO_Init+0x2cc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_GPIO_Init+0x1cc>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e004      	b.n	8002a36 <HAL_GPIO_Init+0x1d6>
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	e002      	b.n	8002a36 <HAL_GPIO_Init+0x1d6>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_GPIO_Init+0x1d6>
 8002a34:	2300      	movs	r3, #0
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	f002 0203 	and.w	r2, r2, #3
 8002a3c:	0092      	lsls	r2, r2, #2
 8002a3e:	4093      	lsls	r3, r2
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a46:	4937      	ldr	r1, [pc, #220]	; (8002b24 <HAL_GPIO_Init+0x2c4>)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a54:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a78:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aa2:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f aeaf 	bne.w	8002870 <HAL_GPIO_Init+0x10>
  }
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	48000400 	.word	0x48000400
 8002b2c:	48000800 	.word	0x48000800
 8002b30:	40010400 	.word	0x40010400

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b7a:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fafc 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40010400 	.word	0x40010400

08002b94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <HAL_PWREx_GetVoltageRange+0x18>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40007000 	.word	0x40007000

08002bb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bbe:	d130      	bne.n	8002c22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc0:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bcc:	d038      	beq.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2232      	movs	r2, #50	; 0x32
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	0c9b      	lsrs	r3, r3, #18
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bf4:	e002      	b.n	8002bfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c08:	d102      	bne.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f2      	bne.n	8002bf6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1c:	d110      	bne.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e00f      	b.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2e:	d007      	beq.n	8002c40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c38:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40007000 	.word	0x40007000
 8002c54:	20000014 	.word	0x20000014
 8002c58:	431bde83 	.word	0x431bde83

08002c5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f000 bc02 	b.w	8003474 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c70:	4b96      	ldr	r3, [pc, #600]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7a:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80e4 	beq.w	8002e5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x4c>
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	f040 808b 	bne.w	8002db6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	f040 8087 	bne.w	8002db6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ca8:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x64>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e3d9      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1a      	ldr	r2, [r3, #32]
 8002cc4:	4b81      	ldr	r3, [pc, #516]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <HAL_RCC_OscConfig+0x7e>
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCC_OscConfig+0x8a>
 8002cda:	4b7c      	ldr	r3, [pc, #496]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d223      	bcs.n	8002d32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 fd54 	bl	800379c <RCC_SetFlashLatencyFromMSIRange>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e3ba      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a72      	ldr	r2, [pc, #456]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d04:	f043 0308 	orr.w	r3, r3, #8
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	496d      	ldr	r1, [pc, #436]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d1c:	4b6b      	ldr	r3, [pc, #428]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	4968      	ldr	r1, [pc, #416]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
 8002d30:	e025      	b.n	8002d7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d32:	4b66      	ldr	r3, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4960      	ldr	r1, [pc, #384]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d50:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	495b      	ldr	r1, [pc, #364]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fd14 	bl	800379c <RCC_SetFlashLatencyFromMSIRange>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e37a      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d7e:	f000 fc81 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8002d82:	4602      	mov	r2, r0
 8002d84:	4b51      	ldr	r3, [pc, #324]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	4950      	ldr	r1, [pc, #320]	; (8002ed0 <HAL_RCC_OscConfig+0x274>)
 8002d90:	5ccb      	ldrb	r3, [r1, r3]
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9a:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <HAL_RCC_OscConfig+0x278>)
 8002d9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <HAL_RCC_OscConfig+0x27c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe fb60 	bl	8001468 <HAL_InitTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d052      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	e35e      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d032      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dbe:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a42      	ldr	r2, [pc, #264]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dca:	f7fe fb9d 	bl	8001508 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fb99 	bl	8001508 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e347      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a35      	ldr	r2, [pc, #212]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	4930      	ldr	r1, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	492b      	ldr	r1, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
 8002e22:	e01a      	b.n	8002e5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e24:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a28      	ldr	r2, [pc, #160]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e30:	f7fe fb6a 	bl	8001508 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e38:	f7fe fb66 	bl	8001508 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e314      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1dc>
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d073      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_OscConfig+0x21c>
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d10e      	bne.n	8002e90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d063      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2f0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d15f      	bne.n	8002f4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e2f1      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e025      	b.n	8002ef4 <HAL_RCC_OscConfig+0x298>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d114      	bne.n	8002edc <HAL_RCC_OscConfig+0x280>
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a02      	ldr	r2, [pc, #8]	; (8002ecc <HAL_RCC_OscConfig+0x270>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e013      	b.n	8002ef4 <HAL_RCC_OscConfig+0x298>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08003e9c 	.word	0x08003e9c
 8002ed4:	20000014 	.word	0x20000014
 8002ed8:	20000018 	.word	0x20000018
 8002edc:	4ba0      	ldr	r3, [pc, #640]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a9f      	ldr	r2, [pc, #636]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b9d      	ldr	r3, [pc, #628]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a9c      	ldr	r2, [pc, #624]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fb04 	bl	8001508 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe fb00 	bl	8001508 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e2ae      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f16:	4b92      	ldr	r3, [pc, #584]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x2a8>
 8002f22:	e014      	b.n	8002f4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe faf0 	bl	8001508 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe faec 	bl	8001508 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e29a      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f3e:	4b88      	ldr	r3, [pc, #544]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x2d0>
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d060      	beq.n	800301c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_OscConfig+0x310>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d119      	bne.n	8002f9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d116      	bne.n	8002f9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f6c:	4b7c      	ldr	r3, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_OscConfig+0x328>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e277      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b76      	ldr	r3, [pc, #472]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	061b      	lsls	r3, r3, #24
 8002f92:	4973      	ldr	r1, [pc, #460]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f98:	e040      	b.n	800301c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d023      	beq.n	8002fea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa2:	4b6f      	ldr	r3, [pc, #444]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6e      	ldr	r2, [pc, #440]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe faab 	bl	8001508 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb6:	f7fe faa7 	bl	8001508 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e255      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc8:	4b65      	ldr	r3, [pc, #404]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f0      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b62      	ldr	r3, [pc, #392]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	495f      	ldr	r1, [pc, #380]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
 8002fe8:	e018      	b.n	800301c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fea:	4b5d      	ldr	r3, [pc, #372]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5c      	ldr	r2, [pc, #368]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fa87 	bl	8001508 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fa83 	bl	8001508 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e231      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003010:	4b53      	ldr	r3, [pc, #332]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d03c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01c      	beq.n	800306a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003030:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8003032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003036:	4a4a      	ldr	r2, [pc, #296]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe fa62 	bl	8001508 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7fe fa5e 	bl	8001508 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e20c      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800305a:	4b41      	ldr	r3, [pc, #260]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 800305c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ef      	beq.n	8003048 <HAL_RCC_OscConfig+0x3ec>
 8003068:	e01b      	b.n	80030a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 800306c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003070:	4a3b      	ldr	r2, [pc, #236]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fe fa45 	bl	8001508 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003082:	f7fe fa41 	bl	8001508 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1ef      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8003096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ef      	bne.n	8003082 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80a6 	beq.w	80031fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b0:	2300      	movs	r3, #0
 80030b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030b4:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10d      	bne.n	80030dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	4a26      	ldr	r2, [pc, #152]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 80030c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6593      	str	r3, [r2, #88]	; 0x58
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030dc:	4b21      	ldr	r3, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x508>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d118      	bne.n	800311a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e8:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <HAL_RCC_OscConfig+0x508>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <HAL_RCC_OscConfig+0x508>)
 80030ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f4:	f7fe fa08 	bl	8001508 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fc:	f7fe fa04 	bl	8001508 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1b2      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <HAL_RCC_OscConfig+0x508>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d108      	bne.n	8003134 <HAL_RCC_OscConfig+0x4d8>
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003132:	e029      	b.n	8003188 <HAL_RCC_OscConfig+0x52c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d115      	bne.n	8003168 <HAL_RCC_OscConfig+0x50c>
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	4a03      	ldr	r2, [pc, #12]	; (8003160 <HAL_RCC_OscConfig+0x504>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800315c:	e014      	b.n	8003188 <HAL_RCC_OscConfig+0x52c>
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000
 8003164:	40007000 	.word	0x40007000
 8003168:	4b9a      	ldr	r3, [pc, #616]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	4a99      	ldr	r2, [pc, #612]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003178:	4b96      	ldr	r3, [pc, #600]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	4a95      	ldr	r2, [pc, #596]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d016      	beq.n	80031be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fe f9ba 	bl	8001508 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003196:	e00a      	b.n	80031ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003198:	f7fe f9b6 	bl	8001508 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e162      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ae:	4b89      	ldr	r3, [pc, #548]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ed      	beq.n	8003198 <HAL_RCC_OscConfig+0x53c>
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fe f9a3 	bl	8001508 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fe f99f 	bl	8001508 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e14b      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031dc:	4b7d      	ldr	r3, [pc, #500]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ed      	bne.n	80031c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f0:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	4a77      	ldr	r2, [pc, #476]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d03c      	beq.n	8003282 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01c      	beq.n	800324a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003210:	4b70      	ldr	r3, [pc, #448]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003216:	4a6f      	ldr	r2, [pc, #444]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fe f972 	bl	8001508 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003228:	f7fe f96e 	bl	8001508 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e11c      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800323a:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800323c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ef      	beq.n	8003228 <HAL_RCC_OscConfig+0x5cc>
 8003248:	e01b      	b.n	8003282 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800324c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003250:	4a60      	ldr	r2, [pc, #384]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325a:	f7fe f955 	bl	8001508 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003262:	f7fe f951 	bl	8001508 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0ff      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003274:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ef      	bne.n	8003262 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 80f3 	beq.w	8003472 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	2b02      	cmp	r3, #2
 8003292:	f040 80c9 	bne.w	8003428 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003296:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 0203 	and.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d12c      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	3b01      	subs	r3, #1
 80032b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d123      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d11b      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d113      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d109      	bne.n	8003304 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	3b01      	subs	r3, #1
 80032fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d06b      	beq.n	80033dc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d062      	beq.n	80033d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800330a:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0ac      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800331a:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003324:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003326:	f7fe f8ef 	bl	8001508 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe f8eb 	bl	8001508 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e099      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <HAL_RCC_OscConfig+0x77c>)
 8003352:	4013      	ands	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800335c:	3a01      	subs	r2, #1
 800335e:	0112      	lsls	r2, r2, #4
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003366:	0212      	lsls	r2, r2, #8
 8003368:	4311      	orrs	r1, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800336e:	0852      	lsrs	r2, r2, #1
 8003370:	3a01      	subs	r2, #1
 8003372:	0552      	lsls	r2, r2, #21
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800337a:	0852      	lsrs	r2, r2, #1
 800337c:	3a01      	subs	r2, #1
 800337e:	0652      	lsls	r2, r2, #25
 8003380:	4311      	orrs	r1, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003386:	06d2      	lsls	r2, r2, #27
 8003388:	430a      	orrs	r2, r1
 800338a:	4912      	ldr	r1, [pc, #72]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800338c:	4313      	orrs	r3, r2
 800338e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003390:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033a8:	f7fe f8ae 	bl	8001508 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fe f8aa 	bl	8001508 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e058      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <HAL_RCC_OscConfig+0x778>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ce:	e050      	b.n	8003472 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e04f      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
 80033d4:	40021000 	.word	0x40021000
 80033d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x820>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d144      	bne.n	8003472 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_RCC_OscConfig+0x820>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a23      	ldr	r2, [pc, #140]	; (800347c <HAL_RCC_OscConfig+0x820>)
 80033ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f4:	4b21      	ldr	r3, [pc, #132]	; (800347c <HAL_RCC_OscConfig+0x820>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a20      	ldr	r2, [pc, #128]	; (800347c <HAL_RCC_OscConfig+0x820>)
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003400:	f7fe f882 	bl	8001508 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fe f87e 	bl	8001508 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e02c      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_RCC_OscConfig+0x820>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x7ac>
 8003426:	e024      	b.n	8003472 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d01f      	beq.n	800346e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <HAL_RCC_OscConfig+0x820>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <HAL_RCC_OscConfig+0x820>)
 8003434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe f865 	bl	8001508 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7fe f861 	bl	8001508 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e00f      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_OscConfig+0x820>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_OscConfig+0x820>)
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4905      	ldr	r1, [pc, #20]	; (800347c <HAL_RCC_OscConfig+0x820>)
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_OscConfig+0x824>)
 8003468:	4013      	ands	r3, r2
 800346a:	60cb      	str	r3, [r1, #12]
 800346c:	e001      	b.n	8003472 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	feeefffc 	.word	0xfeeefffc

08003484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0e7      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b75      	ldr	r3, [pc, #468]	; (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d910      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b72      	ldr	r3, [pc, #456]	; (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0207 	bic.w	r2, r3, #7
 80034ae:	4970      	ldr	r1, [pc, #448]	; (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b6e      	ldr	r3, [pc, #440]	; (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0cf      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d010      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d908      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e4:	4b63      	ldr	r3, [pc, #396]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4960      	ldr	r1, [pc, #384]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04c      	beq.n	800359c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	4b5a      	ldr	r3, [pc, #360]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d121      	bne.n	800355a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0a6      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003522:	4b54      	ldr	r3, [pc, #336]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d115      	bne.n	800355a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e09a      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353a:	4b4e      	ldr	r3, [pc, #312]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e08e      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800354a:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e086      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b46      	ldr	r3, [pc, #280]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4943      	ldr	r1, [pc, #268]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356c:	f7fd ffcc 	bl	8001508 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fd ffc8 	bl	8001508 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e06e      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d208      	bcs.n	80035ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	492b      	ldr	r1, [pc, #172]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ca:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d210      	bcs.n	80035fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f023 0207 	bic.w	r2, r3, #7
 80035e0:	4923      	ldr	r1, [pc, #140]	; (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCC_ClockConfig+0x1ec>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e036      	b.n	8003668 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4918      	ldr	r1, [pc, #96]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4910      	ldr	r1, [pc, #64]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003638:	f000 f824 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	490b      	ldr	r1, [pc, #44]	; (8003678 <HAL_RCC_ClockConfig+0x1f4>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
 8003654:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1f8>)
 8003656:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1fc>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd ff03 	bl	8001468 <HAL_InitTick>
 8003662:	4603      	mov	r3, r0
 8003664:	72fb      	strb	r3, [r7, #11]

  return status;
 8003666:	7afb      	ldrb	r3, [r7, #11]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40022000 	.word	0x40022000
 8003674:	40021000 	.word	0x40021000
 8003678:	08003e9c 	.word	0x08003e9c
 800367c:	20000014 	.word	0x20000014
 8003680:	20000018 	.word	0x20000018

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003692:	4b3e      	ldr	r3, [pc, #248]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800369c:	4b3b      	ldr	r3, [pc, #236]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d121      	bne.n	80036f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d11e      	bne.n	80036f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036b8:	4b34      	ldr	r3, [pc, #208]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036c4:	4b31      	ldr	r3, [pc, #196]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e005      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036e0:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d102      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_RCC_GetSysClockFreq+0x110>)
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e004      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b08      	cmp	r3, #8
 8003706:	d101      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003708:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_RCC_GetSysClockFreq+0x114>)
 800370a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d134      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d003      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0xa6>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d003      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0xac>
 8003728:	e005      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCC_GetSysClockFreq+0x110>)
 800372c:	617b      	str	r3, [r7, #20]
      break;
 800372e:	e005      	b.n	800373c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCC_GetSysClockFreq+0x114>)
 8003732:	617b      	str	r3, [r7, #20]
      break;
 8003734:	e002      	b.n	800373c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	617b      	str	r3, [r7, #20]
      break;
 800373a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800373c:	4b13      	ldr	r3, [pc, #76]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	3301      	adds	r3, #1
 8003748:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	fb03 f202 	mul.w	r2, r3, r2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_GetSysClockFreq+0x108>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	0e5b      	lsrs	r3, r3, #25
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	3301      	adds	r3, #1
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800377c:	69bb      	ldr	r3, [r7, #24]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	08003eac 	.word	0x08003eac
 8003794:	00f42400 	.word	0x00f42400
 8003798:	007a1200 	.word	0x007a1200

0800379c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037b4:	f7ff f9ee 	bl	8002b94 <HAL_PWREx_GetVoltageRange>
 80037b8:	6178      	str	r0, [r7, #20]
 80037ba:	e014      	b.n	80037e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	4a24      	ldr	r2, [pc, #144]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	6593      	str	r3, [r2, #88]	; 0x58
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037d4:	f7ff f9de 	bl	8002b94 <HAL_PWREx_GetVoltageRange>
 80037d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037da:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ec:	d10b      	bne.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b80      	cmp	r3, #128	; 0x80
 80037f2:	d919      	bls.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2ba0      	cmp	r3, #160	; 0xa0
 80037f8:	d902      	bls.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037fa:	2302      	movs	r3, #2
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e013      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003800:	2301      	movs	r3, #1
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	e010      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b80      	cmp	r3, #128	; 0x80
 800380a:	d902      	bls.n	8003812 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800380c:	2303      	movs	r3, #3
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	e00a      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d102      	bne.n	800381e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003818:	2302      	movs	r3, #2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	e004      	b.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b70      	cmp	r3, #112	; 0x70
 8003822:	d101      	bne.n	8003828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003824:	2301      	movs	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 0207 	bic.w	r2, r3, #7
 8003830:	4909      	ldr	r1, [pc, #36]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	429a      	cmp	r2, r3
 8003844:	d001      	beq.n	800384a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000
 8003858:	40022000 	.word	0x40022000

0800385c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003864:	2300      	movs	r3, #0
 8003866:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003868:	2300      	movs	r3, #0
 800386a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003874:	2b00      	cmp	r3, #0
 8003876:	d031      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003880:	d01a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003882:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003886:	d814      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800388c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003890:	d10f      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003892:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4a5c      	ldr	r2, [pc, #368]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800389c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800389e:	e00c      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f9ce 	bl	8003c48 <RCCEx_PLLSAI1_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	74fb      	strb	r3, [r7, #19]
      break;
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c0:	4b51      	ldr	r3, [pc, #324]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	494e      	ldr	r1, [pc, #312]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038d6:	e001      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 809e 	beq.w	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ee:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	4a3f      	ldr	r2, [pc, #252]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390e:	6593      	str	r3, [r2, #88]	; 0x58
 8003910:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391c:	2301      	movs	r3, #1
 800391e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003920:	4b3a      	ldr	r3, [pc, #232]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a39      	ldr	r2, [pc, #228]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800392c:	f7fd fdec 	bl	8001508 <HAL_GetTick>
 8003930:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003932:	e009      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003934:	f7fd fde8 	bl	8001508 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	74fb      	strb	r3, [r7, #19]
        break;
 8003946:	e005      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003948:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ef      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d15a      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800395a:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003964:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01e      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	429a      	cmp	r2, r3
 8003974:	d019      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003980:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003982:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800398a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039a2:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d016      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fda8 	bl	8001508 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ba:	e00b      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fd fda4 	bl	8001508 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d902      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	74fb      	strb	r3, [r7, #19]
            break;
 80039d2:	e006      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ec      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	4904      	ldr	r1, [pc, #16]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039fe:	e009      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a14:	7c7b      	ldrb	r3, [r7, #17]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1a:	4b8a      	ldr	r3, [pc, #552]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a89      	ldr	r2, [pc, #548]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a32:	4b84      	ldr	r3, [pc, #528]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f023 0203 	bic.w	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4980      	ldr	r1, [pc, #512]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a54:	4b7b      	ldr	r3, [pc, #492]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 020c 	bic.w	r2, r3, #12
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	4978      	ldr	r1, [pc, #480]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a76:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	496f      	ldr	r1, [pc, #444]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a98:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	4967      	ldr	r1, [pc, #412]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aba:	4b62      	ldr	r3, [pc, #392]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	495e      	ldr	r1, [pc, #376]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003adc:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4956      	ldr	r1, [pc, #344]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003afe:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	494d      	ldr	r1, [pc, #308]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d028      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b20:	4b48      	ldr	r3, [pc, #288]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4945      	ldr	r1, [pc, #276]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b40:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a3f      	ldr	r2, [pc, #252]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4a:	60d3      	str	r3, [r2, #12]
 8003b4c:	e011      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b56:	d10c      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f872 	bl	8003c48 <RCCEx_PLLSAI1_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	492d      	ldr	r1, [pc, #180]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9c:	d106      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9e:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba8:	60d3      	str	r3, [r2, #12]
 8003baa:	e011      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f843 	bl	8003c48 <RCCEx_PLLSAI1_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01c      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bea:	4916      	ldr	r1, [pc, #88]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfa:	d10c      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2102      	movs	r1, #2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f820 	bl	8003c48 <RCCEx_PLLSAI1_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c30:	4904      	ldr	r1, [pc, #16]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c38:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000

08003c48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c56:	4b74      	ldr	r3, [pc, #464]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d018      	beq.n	8003c94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c62:	4b71      	ldr	r3, [pc, #452]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0203 	and.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d10d      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
       ||
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c7a:	4b6b      	ldr	r3, [pc, #428]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
       ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d047      	beq.n	8003d1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
 8003c92:	e044      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d018      	beq.n	8003cce <RCCEx_PLLSAI1_Config+0x86>
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d825      	bhi.n	8003cec <RCCEx_PLLSAI1_Config+0xa4>
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d002      	beq.n	8003caa <RCCEx_PLLSAI1_Config+0x62>
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d009      	beq.n	8003cbc <RCCEx_PLLSAI1_Config+0x74>
 8003ca8:	e020      	b.n	8003cec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003caa:	4b5f      	ldr	r3, [pc, #380]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d11d      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cba:	e01a      	b.n	8003cf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cbc:	4b5a      	ldr	r3, [pc, #360]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d116      	bne.n	8003cf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ccc:	e013      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cce:	4b56      	ldr	r3, [pc, #344]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10f      	bne.n	8003cfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cda:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cea:	e006      	b.n	8003cfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf0:	e004      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e002      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d02:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6819      	ldr	r1, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	430b      	orrs	r3, r1
 8003d18:	4943      	ldr	r1, [pc, #268]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d17c      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d24:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a3f      	ldr	r2, [pc, #252]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d30:	f7fd fbea 	bl	8001508 <HAL_GetTick>
 8003d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d36:	e009      	b.n	8003d4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d38:	f7fd fbe6 	bl	8001508 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d902      	bls.n	8003d4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	73fb      	strb	r3, [r7, #15]
        break;
 8003d4a:	e005      	b.n	8003d58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ef      	bne.n	8003d38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d15f      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d110      	bne.n	8003d86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d64:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6892      	ldr	r2, [r2, #8]
 8003d74:	0211      	lsls	r1, r2, #8
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	06d2      	lsls	r2, r2, #27
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	492a      	ldr	r1, [pc, #168]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	610b      	str	r3, [r1, #16]
 8003d84:	e027      	b.n	8003dd6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d112      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6892      	ldr	r2, [r2, #8]
 8003d9c:	0211      	lsls	r1, r2, #8
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6912      	ldr	r2, [r2, #16]
 8003da2:	0852      	lsrs	r2, r2, #1
 8003da4:	3a01      	subs	r2, #1
 8003da6:	0552      	lsls	r2, r2, #21
 8003da8:	430a      	orrs	r2, r1
 8003daa:	491f      	ldr	r1, [pc, #124]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	610b      	str	r3, [r1, #16]
 8003db0:	e011      	b.n	8003dd6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6892      	ldr	r2, [r2, #8]
 8003dc2:	0211      	lsls	r1, r2, #8
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6952      	ldr	r2, [r2, #20]
 8003dc8:	0852      	lsrs	r2, r2, #1
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0652      	lsls	r2, r2, #25
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	4915      	ldr	r1, [pc, #84]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003de0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fd fb91 	bl	8001508 <HAL_GetTick>
 8003de6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003de8:	e009      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dea:	f7fd fb8d 	bl	8001508 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	73fb      	strb	r3, [r7, #15]
          break;
 8003dfc:	e005      	b.n	8003e0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ef      	beq.n	8003dea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4903      	ldr	r1, [pc, #12]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4d0d      	ldr	r5, [pc, #52]	; (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2600      	movs	r6, #0
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4d0b      	ldr	r5, [pc, #44]	; (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	; (8003e80 <__libc_init_array+0x44>)
 8003e50:	f000 f818 	bl	8003e84 <_init>
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2600      	movs	r6, #0
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08003edc 	.word	0x08003edc
 8003e78:	08003edc 	.word	0x08003edc
 8003e7c:	08003edc 	.word	0x08003edc
 8003e80:	08003ee0 	.word	0x08003ee0

08003e84 <_init>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr

08003e90 <_fini>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr


Proyecto_1_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000519c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800536c  0800536c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800536c  0800536c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800536c  0800536c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  08005384  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08005384  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee3c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f1  00000000  00000000  0002eebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  000310b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000be6  00000000  00000000  00032020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021398  00000000  00000000  00032c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001080c  00000000  00000000  00053f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2fec  00000000  00000000  000647aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004328  00000000  00000000  00137798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005314 	.word	0x08005314

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005314 	.word	0x08005314

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	0000      	movs	r0, r0
	...

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fe7e 	bl	8001866 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f9e3 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 fb6b 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b72:	f000 fb4b 	bl	800120c <MX_DMA_Init>
  MX_ADC1_Init();
 8000b76:	f000 fa2f 	bl	8000fd8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b7a:	f000 fac1 	bl	8001100 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000b7e:	f000 faf1 	bl	8001164 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_EXTI_Callback(GPIO_PIN_4);

  	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000b82:	2110      	movs	r1, #16
 8000b84:	4896      	ldr	r0, [pc, #600]	; (8000de0 <main+0x280>)
 8000b86:	f002 f8d8 	bl	8002d3a <HAL_DAC_Start>
  	HAL_TIM_Base_Start_IT(&htim1);
 8000b8a:	4896      	ldr	r0, [pc, #600]	; (8000de4 <main+0x284>)
 8000b8c:	f003 ffbc 	bl	8004b08 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch(etapas)
 8000b90:	4b95      	ldr	r3, [pc, #596]	; (8000de8 <main+0x288>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b04      	cmp	r3, #4
 8000b96:	d8fb      	bhi.n	8000b90 <main+0x30>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <main+0x40>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bb5 	.word	0x08000bb5
 8000ba4:	08000cdd 	.word	0x08000cdd
 8000ba8:	08000d73 	.word	0x08000d73
 8000bac:	08000e19 	.word	0x08000e19
 8000bb0:	08000ed7 	.word	0x08000ed7
	  {
	  case attack:

		  float pendiente_a = 3.3/t_a;
 8000bb4:	4b8d      	ldr	r3, [pc, #564]	; (8000dec <main+0x28c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fc6d 	bl	8000498 <__aeabi_f2d>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	a185      	add	r1, pc, #532	; (adr r1, 8000dd8 <main+0x278>)
 8000bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bc8:	f7ff fde8 	bl	800079c <__aeabi_ddiv>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f7ff ff72 	bl	8000abc <__aeabi_d2f>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	603b      	str	r3, [r7, #0]
		  b_a = 0;
 8000bdc:	4b84      	ldr	r3, [pc, #528]	; (8000df0 <main+0x290>)
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

		  if(flag == 1)
 8000be4:	4b83      	ldr	r3, [pc, #524]	; (8000df4 <main+0x294>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d12c      	bne.n	8000c46 <main+0xe6>
		  {
			  env = generador_rectas(pendiente_a, b_a);
 8000bec:	4b80      	ldr	r3, [pc, #512]	; (8000df0 <main+0x290>)
 8000bee:	edd3 7a00 	vldr	s15, [r3]
 8000bf2:	eef0 0a67 	vmov.f32	s1, s15
 8000bf6:	ed97 0a00 	vldr	s0, [r7]
 8000bfa:	f000 fb6b 	bl	80012d4 <generador_rectas>
 8000bfe:	eef0 7a40 	vmov.f32	s15, s0
 8000c02:	4b7d      	ldr	r3, [pc, #500]	; (8000df8 <main+0x298>)
 8000c04:	edc3 7a00 	vstr	s15, [r3]
			  flag = 0;
 8000c08:	4b7a      	ldr	r3, [pc, #488]	; (8000df4 <main+0x294>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000c0e:	4b7a      	ldr	r3, [pc, #488]	; (8000df8 <main+0x298>)
 8000c10:	edd3 7a00 	vldr	s15, [r3]
 8000c14:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8000dfc <main+0x29c>
 8000c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c1c:	ee17 0a90 	vmov	r0, s15
 8000c20:	f7ff fc3a 	bl	8000498 <__aeabi_f2d>
 8000c24:	a36c      	add	r3, pc, #432	; (adr r3, 8000dd8 <main+0x278>)
 8000c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2a:	f7ff fdb7 	bl	800079c <__aeabi_ddiv>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	460b      	mov	r3, r1
 8000c32:	4610      	mov	r0, r2
 8000c34:	4619      	mov	r1, r3
 8000c36:	f7ff ff21 	bl	8000a7c <__aeabi_d2uiz>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4867      	ldr	r0, [pc, #412]	; (8000de0 <main+0x280>)
 8000c42:	f002 f8c7 	bl	8002dd4 <HAL_DAC_SetValue>
		  }

		  if(env >= 3.3)
 8000c46:	4b6c      	ldr	r3, [pc, #432]	; (8000df8 <main+0x298>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc24 	bl	8000498 <__aeabi_f2d>
 8000c50:	a361      	add	r3, pc, #388	; (adr r3, 8000dd8 <main+0x278>)
 8000c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c56:	f7ff fefd 	bl	8000a54 <__aeabi_dcmpge>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d039      	beq.n	8000cd4 <main+0x174>
		  {
			  pendiente_d = (v_s - 3.3)/t_d;
 8000c60:	4b67      	ldr	r3, [pc, #412]	; (8000e00 <main+0x2a0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fc17 	bl	8000498 <__aeabi_f2d>
 8000c6a:	a35b      	add	r3, pc, #364	; (adr r3, 8000dd8 <main+0x278>)
 8000c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c70:	f7ff fab2 	bl	80001d8 <__aeabi_dsub>
 8000c74:	4602      	mov	r2, r0
 8000c76:	460b      	mov	r3, r1
 8000c78:	4614      	mov	r4, r2
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <main+0x2a4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc09 	bl	8000498 <__aeabi_f2d>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	f7ff fd85 	bl	800079c <__aeabi_ddiv>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff ff0f 	bl	8000abc <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a59      	ldr	r2, [pc, #356]	; (8000e08 <main+0x2a8>)
 8000ca2:	6013      	str	r3, [r2, #0]
			  b_d = v_s - pendiente_d * t_d;
 8000ca4:	4b56      	ldr	r3, [pc, #344]	; (8000e00 <main+0x2a0>)
 8000ca6:	ed93 7a00 	vldr	s14, [r3]
 8000caa:	4b57      	ldr	r3, [pc, #348]	; (8000e08 <main+0x2a8>)
 8000cac:	edd3 6a00 	vldr	s13, [r3]
 8000cb0:	4b54      	ldr	r3, [pc, #336]	; (8000e04 <main+0x2a4>)
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cbe:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <main+0x2ac>)
 8000cc0:	edc3 7a00 	vstr	s15, [r3]
			  x = 0;
 8000cc4:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <main+0x2b0>)
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
			  etapas = decay;
 8000ccc:	4b46      	ldr	r3, [pc, #280]	; (8000de8 <main+0x288>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
		  else
		  {
			  etapas = attack;
		  }

		  break;
 8000cd2:	e111      	b.n	8000ef8 <main+0x398>
			  etapas = attack;
 8000cd4:	4b44      	ldr	r3, [pc, #272]	; (8000de8 <main+0x288>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
		  break;
 8000cda:	e10d      	b.n	8000ef8 <main+0x398>
	  case decay:

		  //float pendiente_d = (v_s - 3.3)/t_d;
		  //b_d = v_s - pendiente_d * t_d;

		  if(flag == 1)
 8000cdc:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <main+0x294>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d12f      	bne.n	8000d44 <main+0x1e4>
		  {
			  env = generador_rectas(pendiente_d, b_d);
 8000ce4:	4b48      	ldr	r3, [pc, #288]	; (8000e08 <main+0x2a8>)
 8000ce6:	edd3 7a00 	vldr	s15, [r3]
 8000cea:	4b48      	ldr	r3, [pc, #288]	; (8000e0c <main+0x2ac>)
 8000cec:	ed93 7a00 	vldr	s14, [r3]
 8000cf0:	eef0 0a47 	vmov.f32	s1, s14
 8000cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf8:	f000 faec 	bl	80012d4 <generador_rectas>
 8000cfc:	eef0 7a40 	vmov.f32	s15, s0
 8000d00:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <main+0x298>)
 8000d02:	edc3 7a00 	vstr	s15, [r3]
			  flag = 0;
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <main+0x294>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000d0c:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <main+0x298>)
 8000d0e:	edd3 7a00 	vldr	s15, [r3]
 8000d12:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000dfc <main+0x29c>
 8000d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d1a:	ee17 0a90 	vmov	r0, s15
 8000d1e:	f7ff fbbb 	bl	8000498 <__aeabi_f2d>
 8000d22:	a32d      	add	r3, pc, #180	; (adr r3, 8000dd8 <main+0x278>)
 8000d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d28:	f7ff fd38 	bl	800079c <__aeabi_ddiv>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4610      	mov	r0, r2
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff fea2 	bl	8000a7c <__aeabi_d2uiz>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	4828      	ldr	r0, [pc, #160]	; (8000de0 <main+0x280>)
 8000d40:	f002 f848 	bl	8002dd4 <HAL_DAC_SetValue>
		  }

		  if(env <= v_s)
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <main+0x298>)
 8000d46:	ed93 7a00 	vldr	s14, [r3]
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <main+0x2a0>)
 8000d4c:	edd3 7a00 	vldr	s15, [r3]
 8000d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d58:	d807      	bhi.n	8000d6a <main+0x20a>
		  {
			  etapas = sustain;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <main+0x288>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	701a      	strb	r2, [r3, #0]
			  x = 0;
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <main+0x2b0>)
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
		  else
		  {
			  etapas = decay;
		  }

		  break;
 8000d68:	e0c6      	b.n	8000ef8 <main+0x398>
			  etapas = decay;
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <main+0x288>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
		  break;
 8000d70:	e0c2      	b.n	8000ef8 <main+0x398>
	  case sustain:

		  if(flag == 1)
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <main+0x294>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d11e      	bne.n	8000db8 <main+0x258>
		  {
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <main+0x298>)
 8000d7c:	edd3 7a00 	vldr	s15, [r3]
 8000d80:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000dfc <main+0x29c>
 8000d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d88:	ee17 0a90 	vmov	r0, s15
 8000d8c:	f7ff fb84 	bl	8000498 <__aeabi_f2d>
 8000d90:	a311      	add	r3, pc, #68	; (adr r3, 8000dd8 <main+0x278>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f7ff fd01 	bl	800079c <__aeabi_ddiv>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4619      	mov	r1, r3
 8000da2:	f7ff fe6b 	bl	8000a7c <__aeabi_d2uiz>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2200      	movs	r2, #0
 8000daa:	2110      	movs	r1, #16
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <main+0x280>)
 8000dae:	f002 f811 	bl	8002dd4 <HAL_DAC_SetValue>
			  flag = 0;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <main+0x294>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
		  }

		  if(Gate == 0)
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <main+0x2b4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d107      	bne.n	8000dd0 <main+0x270>
		  {
			  etapas = release;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <main+0x288>)
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	701a      	strb	r2, [r3, #0]
			  x = 0;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <main+0x2b0>)
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
		  else
		  {
			  etapas = sustain;
		  }

		  break;
 8000dce:	e093      	b.n	8000ef8 <main+0x398>
			  etapas = sustain;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <main+0x288>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	701a      	strb	r2, [r3, #0]
		  break;
 8000dd6:	e08f      	b.n	8000ef8 <main+0x398>
 8000dd8:	66666666 	.word	0x66666666
 8000ddc:	400a6666 	.word	0x400a6666
 8000de0:	200000d8 	.word	0x200000d8
 8000de4:	200000ec 	.word	0x200000ec
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000138 	.word	0x20000138
 8000df0:	20000150 	.word	0x20000150
 8000df4:	2000016c 	.word	0x2000016c
 8000df8:	20000168 	.word	0x20000168
 8000dfc:	457ff000 	.word	0x457ff000
 8000e00:	20000140 	.word	0x20000140
 8000e04:	2000013c 	.word	0x2000013c
 8000e08:	20000170 	.word	0x20000170
 8000e0c:	20000154 	.word	0x20000154
 8000e10:	20000160 	.word	0x20000160
 8000e14:	2000015c 	.word	0x2000015c
	  case release:

		  float pendiente_r = (0 - v_s)/t_r;
 8000e18:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <main+0x3a8>)
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000f0c <main+0x3ac>
 8000e22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <main+0x3b0>)
 8000e28:	ed93 7a00 	vldr	s14, [r3]
 8000e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e30:	edc7 7a01 	vstr	s15, [r7, #4]
		  b_r = - pendiente_r * t_r;
 8000e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e38:	eeb1 7a67 	vneg.f32	s14, s15
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <main+0x3b0>)
 8000e3e:	edd3 7a00 	vldr	s15, [r3]
 8000e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <main+0x3b4>)
 8000e48:	edc3 7a00 	vstr	s15, [r3]

		  if(flag == 1)
 8000e4c:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <main+0x3b8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d12c      	bne.n	8000eae <main+0x34e>
		  {
			  env = generador_rectas(pendiente_r, b_r);
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <main+0x3b4>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	eef0 0a67 	vmov.f32	s1, s15
 8000e5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e62:	f000 fa37 	bl	80012d4 <generador_rectas>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <main+0x3bc>)
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
			  flag = 0;
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <main+0x3b8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, env*4095/3.3);
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <main+0x3bc>)
 8000e78:	edd3 7a00 	vldr	s15, [r3]
 8000e7c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000f20 <main+0x3c0>
 8000e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e84:	ee17 0a90 	vmov	r0, s15
 8000e88:	f7ff fb06 	bl	8000498 <__aeabi_f2d>
 8000e8c:	a31c      	add	r3, pc, #112	; (adr r3, 8000f00 <main+0x3a0>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	f7ff fc83 	bl	800079c <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fded 	bl	8000a7c <__aeabi_d2uiz>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	481e      	ldr	r0, [pc, #120]	; (8000f24 <main+0x3c4>)
 8000eaa:	f001 ff93 	bl	8002dd4 <HAL_DAC_SetValue>
		  }

		  if(env <=0)
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <main+0x3bc>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d807      	bhi.n	8000ece <main+0x36e>
		  {
			  etapas = off;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <main+0x3c8>)
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	701a      	strb	r2, [r3, #0]
			  x = 0;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <main+0x3cc>)
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
		  else
		  {
			  etapas = release;
		  }

		  break;
 8000ecc:	e014      	b.n	8000ef8 <main+0x398>
			  etapas = release;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <main+0x3c8>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
		  break;
 8000ed4:	e010      	b.n	8000ef8 <main+0x398>
	  case off:

		  if(Gate == 1)
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <main+0x3d0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d107      	bne.n	8000eee <main+0x38e>
		  {
			  etapas = attack;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <main+0x3c8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
			  x = 0;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <main+0x3cc>)
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
		  else
		  {
			  etapas = off;
		  }

		  break;
 8000eec:	e002      	b.n	8000ef4 <main+0x394>
			  etapas = off;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <main+0x3c8>)
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	701a      	strb	r2, [r3, #0]
		  break;
 8000ef4:	bf00      	nop
 8000ef6:	e64b      	b.n	8000b90 <main+0x30>
	  switch(etapas)
 8000ef8:	e64a      	b.n	8000b90 <main+0x30>
 8000efa:	bf00      	nop
 8000efc:	f3af 8000 	nop.w
 8000f00:	66666666 	.word	0x66666666
 8000f04:	400a6666 	.word	0x400a6666
 8000f08:	20000140 	.word	0x20000140
 8000f0c:	00000000 	.word	0x00000000
 8000f10:	20000144 	.word	0x20000144
 8000f14:	20000158 	.word	0x20000158
 8000f18:	2000016c 	.word	0x2000016c
 8000f1c:	20000168 	.word	0x20000168
 8000f20:	457ff000 	.word	0x457ff000
 8000f24:	200000d8 	.word	0x200000d8
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000160 	.word	0x20000160
 8000f30:	2000015c 	.word	0x2000015c

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	; 0x58
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	2244      	movs	r2, #68	; 0x44
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 f9ba 	bl	80052bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f5a:	f002 fc3f 	bl	80037dc <HAL_PWREx_ControlVoltageScaling>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f64:	f000 fadc 	bl	8001520 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f74:	2360      	movs	r3, #96	; 0x60
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f84:	2328      	movs	r3, #40	; 0x28
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 fc75 	bl	8003888 <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fa4:	f000 fabc 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa8:	230f      	movs	r3, #15
 8000faa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	2303      	movs	r3, #3
 8000fae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 f875 	bl	80040b0 <HAL_RCC_ClockConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fcc:	f000 faa8 	bl	8001520 <Error_Handler>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3758      	adds	r7, #88	; 0x58
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <MX_ADC1_Init+0x110>)
 8000ff0:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <MX_ADC1_Init+0x114>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <MX_ADC1_Init+0x110>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <MX_ADC1_Init+0x110>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001008:	2201      	movs	r2, #1
 800100a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_ADC1_Init+0x110>)
 800100e:	2208      	movs	r2, #8
 8001010:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001014:	2200      	movs	r2, #0
 8001016:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC1_Init+0x110>)
 800101a:	2200      	movs	r2, #0
 800101c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001020:	2204      	movs	r2, #4
 8001022:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <MX_ADC1_Init+0x110>)
 800102e:	2200      	movs	r2, #0
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_ADC1_Init+0x110>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001042:	2200      	movs	r2, #0
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104e:	4826      	ldr	r0, [pc, #152]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001050:	f000 fe6a 	bl	8001d28 <HAL_ADC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800105a:	f000 fa61 	bl	8001520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_ADC1_Init+0x118>)
 8001060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001062:	2306      	movs	r3, #6
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106a:	237f      	movs	r3, #127	; 0x7f
 800106c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106e:	2304      	movs	r3, #4
 8001070:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	481b      	ldr	r0, [pc, #108]	; (80010e8 <MX_ADC1_Init+0x110>)
 800107c:	f001 f82e 	bl	80020dc <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001086:	f000 fa4b 	bl	8001520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_ADC1_Init+0x11c>)
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800108e:	230c      	movs	r3, #12
 8001090:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_ADC1_Init+0x110>)
 8001098:	f001 f820 	bl	80020dc <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80010a2:	f000 fa3d 	bl	8001520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_ADC1_Init+0x120>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010aa:	2312      	movs	r3, #18
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0x110>)
 80010b4:	f001 f812 	bl	80020dc <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80010be:	f000 fa2f 	bl	8001520 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_ADC1_Init+0x124>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010c6:	2318      	movs	r3, #24
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0x110>)
 80010d0:	f001 f804 	bl	80020dc <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80010da:	f000 fa21 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000002c 	.word	0x2000002c
 80010ec:	50040000 	.word	0x50040000
 80010f0:	14f00020 	.word	0x14f00020
 80010f4:	19200040 	.word	0x19200040
 80010f8:	1d500080 	.word	0x1d500080
 80010fc:	21800100 	.word	0x21800100

08001100 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2224      	movs	r2, #36	; 0x24
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f004 f8d5 	bl	80052bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_DAC1_Init+0x5c>)
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_DAC1_Init+0x60>)
 8001116:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001118:	4810      	ldr	r0, [pc, #64]	; (800115c <MX_DAC1_Init+0x5c>)
 800111a:	f001 fdec 	bl	8002cf6 <HAL_DAC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001124:	f000 f9fc 	bl	8001520 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2210      	movs	r2, #16
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_DAC1_Init+0x5c>)
 8001144:	f001 fe6b 	bl	8002e1e <HAL_DAC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800114e:	f000 f9e7 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000d8 	.word	0x200000d8
 8001160:	40007400 	.word	0x40007400

08001164 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_TIM1_Init+0xa0>)
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <MX_TIM1_Init+0xa4>)
 8001186:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_TIM1_Init+0xa0>)
 800118a:	224f      	movs	r2, #79	; 0x4f
 800118c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_TIM1_Init+0xa0>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_TIM1_Init+0xa0>)
 8001196:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800119a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_TIM1_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_TIM1_Init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_TIM1_Init+0xa0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ae:	4815      	ldr	r0, [pc, #84]	; (8001204 <MX_TIM1_Init+0xa0>)
 80011b0:	f003 fc52 	bl	8004a58 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011ba:	f000 f9b1 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <MX_TIM1_Init+0xa0>)
 80011cc:	f003 fdf7 	bl	8004dbe <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011d6:	f000 f9a3 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_TIM1_Init+0xa0>)
 80011ec:	f003 ffe2 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011f6:	f000 f993 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000ec 	.word	0x200000ec
 8001208:	40012c00 	.word	0x40012c00

0800120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_DMA_Init+0x38>)
 8001214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <MX_DMA_Init+0x38>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6493      	str	r3, [r2, #72]	; 0x48
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_DMA_Init+0x38>)
 8001220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	200b      	movs	r0, #11
 8001230:	f001 fd2b 	bl	8002c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001234:	200b      	movs	r0, #11
 8001236:	f001 fd44 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_GPIO_Init+0x88>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <MX_GPIO_Init+0x88>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_GPIO_Init+0x88>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f002 fa70 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001280:	2310      	movs	r3, #16
 8001282:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001284:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001288:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128a:	2302      	movs	r3, #2
 800128c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f002 f8e1 	bl	800345c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b2:	f002 f8d3 	bl	800345c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200a      	movs	r0, #10
 80012bc:	f001 fce5 	bl	8002c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012c0:	200a      	movs	r0, #10
 80012c2:	f001 fcfe 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <generador_rectas>:

/* USER CODE BEGIN 4 */

float generador_rectas(float m, float b)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	ed87 0a01 	vstr	s0, [r7, #4]
 80012de:	edc7 0a00 	vstr	s1, [r7]

	y = m*x+b;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <generador_rectas+0x40>)
 80012e4:	ed93 7a00 	vldr	s14, [r3]
 80012e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f0:	edd7 7a00 	vldr	s15, [r7]
 80012f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <generador_rectas+0x44>)
 80012fa:	edc3 7a00 	vstr	s15, [r3]

	//x += 20e-6;

	return y;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <generador_rectas+0x44>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	ee07 3a90 	vmov	s15, r3
}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000160 	.word	0x20000160
 8001318:	20000164 	.word	0x20000164

0800131c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4)
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	2b10      	cmp	r3, #16
 800132a:	d11f      	bne.n	800136c <HAL_GPIO_EXTI_Callback+0x50>
	{
		//HAL_Delay(10);

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 800132c:	2110      	movs	r1, #16
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f002 f9fd 	bl	8003730 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d109      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x34>
		{
			Gate = 1;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_GPIO_EXTI_Callback+0x58>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2140      	movs	r1, #64	; 0x40
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f002 fa09 	bl	8003760 <HAL_GPIO_WritePin>
 800134e:	e008      	b.n	8001362 <HAL_GPIO_EXTI_Callback+0x46>
		}
		else
		{
			Gate = 0;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_GPIO_EXTI_Callback+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2140      	movs	r1, #64	; 0x40
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f002 f9ff 	bl	8003760 <HAL_GPIO_WritePin>
		}

		HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcValues, 4);  // 4 canales
 8001362:	2204      	movs	r2, #4
 8001364:	4904      	ldr	r1, [pc, #16]	; (8001378 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_GPIO_EXTI_Callback+0x60>)
 8001368:	f000 fe20 	bl	8001fac <HAL_ADC_Start_DMA>

	}
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000015c 	.word	0x2000015c
 8001378:	20000148 	.word	0x20000148
 800137c:	2000002c 	.word	0x2000002c

08001380 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d115      	bne.n	80013be <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
    	flag = 1;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]
        x += 0.002;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f87b 	bl	8000498 <__aeabi_f2d>
 80013a2:	a309      	add	r3, pc, #36	; (adr r3, 80013c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7fe ff18 	bl	80001dc <__adddf3>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fb82 	bl	8000abc <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013bc:	6013      	str	r3, [r2, #0]
    }
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013cc:	3f60624d 	.word	0x3f60624d
 80013d0:	40012c00 	.word	0x40012c00
 80013d4:	2000016c 	.word	0x2000016c
 80013d8:	20000160 	.word	0x20000160
 80013dc:	00000000 	.word	0x00000000

080013e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a44      	ldr	r2, [pc, #272]	; (8001500 <HAL_ADC_ConvCpltCallback+0x120>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d16c      	bne.n	80014cc <HAL_ADC_ConvCpltCallback+0xec>
    {
        t_a = adcValues[0]*(2.6/4095);  // attack
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_ADC_ConvCpltCallback+0x124>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f83c 	bl	8000474 <__aeabi_i2d>
 80013fc:	a336      	add	r3, pc, #216	; (adr r3, 80014d8 <HAL_ADC_ConvCpltCallback+0xf8>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fb55 	bl	8000abc <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <HAL_ADC_ConvCpltCallback+0x128>)
 8001416:	6013      	str	r3, [r2, #0]
        t_d = adcValues[1]*(7.7/4095);  // decay
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <HAL_ADC_ConvCpltCallback+0x124>)
 800141a:	885b      	ldrh	r3, [r3, #2]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f829 	bl	8000474 <__aeabi_i2d>
 8001422:	a32f      	add	r3, pc, #188	; (adr r3, 80014e0 <HAL_ADC_ConvCpltCallback+0x100>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff f88e 	bl	8000548 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb42 	bl	8000abc <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	4a34      	ldr	r2, [pc, #208]	; (800150c <HAL_ADC_ConvCpltCallback+0x12c>)
 800143c:	6013      	str	r3, [r2, #0]
        if(t_d <= 0.4)
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_ADC_ConvCpltCallback+0x12c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f828 	bl	8000498 <__aeabi_f2d>
 8001448:	a327      	add	r3, pc, #156	; (adr r3, 80014e8 <HAL_ADC_ConvCpltCallback+0x108>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff faf7 	bl	8000a40 <__aeabi_dcmple>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <HAL_ADC_ConvCpltCallback+0x7e>
        {
        	t_d = 0.4;
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <HAL_ADC_ConvCpltCallback+0x12c>)
 800145a:	4a2d      	ldr	r2, [pc, #180]	; (8001510 <HAL_ADC_ConvCpltCallback+0x130>)
 800145c:	601a      	str	r2, [r3, #0]
        }
        v_s = adcValues[2]*(3.3/4095);  // sustain
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <HAL_ADC_ConvCpltCallback+0x124>)
 8001460:	889b      	ldrh	r3, [r3, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f806 	bl	8000474 <__aeabi_i2d>
 8001468:	a321      	add	r3, pc, #132	; (adr r3, 80014f0 <HAL_ADC_ConvCpltCallback+0x110>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f86b 	bl	8000548 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb1f 	bl	8000abc <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	4a24      	ldr	r2, [pc, #144]	; (8001514 <HAL_ADC_ConvCpltCallback+0x134>)
 8001482:	6013      	str	r3, [r2, #0]
        t_r = adcValues[3]*(11.0/4095);  // Release
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_ADC_ConvCpltCallback+0x124>)
 8001486:	88db      	ldrh	r3, [r3, #6]
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe fff3 	bl	8000474 <__aeabi_i2d>
 800148e:	a31a      	add	r3, pc, #104	; (adr r3, 80014f8 <HAL_ADC_ConvCpltCallback+0x118>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7ff f858 	bl	8000548 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb0c 	bl	8000abc <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_ADC_ConvCpltCallback+0x138>)
 80014a8:	6013      	str	r3, [r2, #0]
        if(t_r <= 0.4)
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_ADC_ConvCpltCallback+0x138>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe fff2 	bl	8000498 <__aeabi_f2d>
 80014b4:	a30c      	add	r3, pc, #48	; (adr r3, 80014e8 <HAL_ADC_ConvCpltCallback+0x108>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff fac1 	bl	8000a40 <__aeabi_dcmple>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d100      	bne.n	80014c6 <HAL_ADC_ConvCpltCallback+0xe6>
        {
        	t_r = 0.7;
        }
    }
}
 80014c4:	e002      	b.n	80014cc <HAL_ADC_ConvCpltCallback+0xec>
        	t_r = 0.7;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_ADC_ConvCpltCallback+0x138>)
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <HAL_ADC_ConvCpltCallback+0x13c>)
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	f3af 8000 	nop.w
 80014d8:	ae67b348 	.word	0xae67b348
 80014dc:	3f44ce19 	.word	0x3f44ce19
 80014e0:	b8685352 	.word	0xb8685352
 80014e4:	3f5eceb9 	.word	0x3f5eceb9
 80014e8:	9999999a 	.word	0x9999999a
 80014ec:	3fd99999 	.word	0x3fd99999
 80014f0:	e734d9b4 	.word	0xe734d9b4
 80014f4:	3f4a680c 	.word	0x3f4a680c
 80014f8:	16016016 	.word	0x16016016
 80014fc:	3f660160 	.word	0x3f660160
 8001500:	50040000 	.word	0x50040000
 8001504:	20000148 	.word	0x20000148
 8001508:	20000138 	.word	0x20000138
 800150c:	2000013c 	.word	0x2000013c
 8001510:	3ecccccd 	.word	0x3ecccccd
 8001514:	20000140 	.word	0x20000140
 8001518:	20000144 	.word	0x20000144
 800151c:	3f333333 	.word	0x3f333333

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x44>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x44>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x44>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6593      	str	r3, [r2, #88]	; 0x58
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b09e      	sub	sp, #120	; 0x78
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2254      	movs	r2, #84	; 0x54
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fe91 	bl	80052bc <memset>
  if(hadc->Instance==ADC1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a3b      	ldr	r2, [pc, #236]	; (800168c <HAL_ADC_MspInit+0x118>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d16e      	bne.n	8001682 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80015aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015ae:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015b0:	2301      	movs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80015b8:	2310      	movs	r3, #16
 80015ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015bc:	2307      	movs	r3, #7
 80015be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80015c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 ff58 	bl	8004488 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80015de:	f7ff ff9f 	bl	8001520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <HAL_ADC_MspInit+0x11c>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <HAL_ADC_MspInit+0x11c>)
 80015e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_ADC_MspInit+0x11c>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_ADC_MspInit+0x11c>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a24      	ldr	r2, [pc, #144]	; (8001690 <HAL_ADC_MspInit+0x11c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_ADC_MspInit+0x11c>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001612:	230f      	movs	r3, #15
 8001614:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001616:	230b      	movs	r3, #11
 8001618:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f001 ff18 	bl	800345c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_ADC_MspInit+0x120>)
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_ADC_MspInit+0x124>)
 8001630:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_ADC_MspInit+0x120>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_ADC_MspInit+0x120>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_ADC_MspInit+0x120>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_ADC_MspInit+0x120>)
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_ADC_MspInit+0x120>)
 800164c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001650:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_ADC_MspInit+0x120>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_ADC_MspInit+0x120>)
 800165c:	2220      	movs	r2, #32
 800165e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_ADC_MspInit+0x120>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <HAL_ADC_MspInit+0x120>)
 8001668:	f001 fd00 	bl	800306c <HAL_DMA_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001672:	f7ff ff55 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <HAL_ADC_MspInit+0x120>)
 800167a:	64da      	str	r2, [r3, #76]	; 0x4c
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <HAL_ADC_MspInit+0x120>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3778      	adds	r7, #120	; 0x78
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	50040000 	.word	0x50040000
 8001690:	40021000 	.word	0x40021000
 8001694:	20000090 	.word	0x20000090
 8001698:	40020008 	.word	0x40020008

0800169c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_DAC_MspInit+0x74>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d124      	bne.n	8001708 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_DAC_MspInit+0x78>)
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_DAC_MspInit+0x78>)
 80016c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016c8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_DAC_MspInit+0x78>)
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_DAC_MspInit+0x78>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_DAC_MspInit+0x78>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_DAC_MspInit+0x78>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016ee:	2320      	movs	r3, #32
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f2:	2303      	movs	r3, #3
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f001 feaa 	bl	800345c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40007400 	.word	0x40007400
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <HAL_TIM_Base_MspInit+0x44>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d113      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_TIM_Base_MspInit+0x48>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <HAL_TIM_Base_MspInit+0x48>)
 8001730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001734:	6613      	str	r3, [r2, #96]	; 0x60
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_TIM_Base_MspInit+0x48>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2019      	movs	r0, #25
 8001748:	f001 fa9f 	bl	8002c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800174c:	2019      	movs	r0, #25
 800174e:	f001 fab8 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40021000 	.word	0x40021000

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b0:	f000 f8ae 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80017bc:	2010      	movs	r0, #16
 80017be:	f001 ffe7 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <DMA1_Channel1_IRQHandler+0x10>)
 80017ce:	f001 fd65 	bl	800329c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000090 	.word	0x20000090

080017dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80017e2:	f003 f9e5 	bl	8004bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200000ec 	.word	0x200000ec

080017f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800184c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001818:	f7ff ffea 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <LoopForever+0x6>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	; (8001854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <LoopForever+0xe>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	; (8001860 <LoopForever+0x16>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001842:	f003 fd43 	bl	80052cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001846:	f7ff f98b 	bl	8000b60 <main>

0800184a <LoopForever>:

LoopForever:
    b LoopForever
 800184a:	e7fe      	b.n	800184a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800184c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001858:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 800185c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001860:	20000178 	.word	0x20000178

08001864 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC1_IRQHandler>

08001866 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f001 f9ff 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001876:	200f      	movs	r0, #15
 8001878:	f000 f80e 	bl	8001898 <HAL_InitTick>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	e001      	b.n	800188c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001888:	f7ff fe50 	bl	800152c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800188c:	79fb      	ldrb	r3, [r7, #7]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_InitTick+0x6c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d023      	beq.n	80018f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_InitTick+0x70>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_InitTick+0x6c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80018be:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 fa0b 	bl	8002cde <HAL_SYSTICK_Config>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10f      	bne.n	80018ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d809      	bhi.n	80018e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f001 f9d5 	bl	8002c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_InitTick+0x74>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e007      	b.n	80018f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e004      	b.n	80018f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	e001      	b.n	80018f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000004 	.word	0x20000004
 800190c:	20000008 	.word	0x20000008

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2000000c 	.word	0x2000000c
 8001934:	20000174 	.word	0x20000174

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000174 	.word	0x20000174

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	2000000c 	.word	0x2000000c

08001998 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	609a      	str	r2, [r3, #8]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3360      	adds	r3, #96	; 0x60
 8001a12:	461a      	mov	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <LL_ADC_SetOffset+0x44>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	03fff000 	.word	0x03fff000

08001a48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3360      	adds	r3, #96	; 0x60
 8001a56:	461a      	mov	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3360      	adds	r3, #96	; 0x60
 8001a84:	461a      	mov	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3330      	adds	r3, #48	; 0x30
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	4413      	add	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	211f      	movs	r1, #31
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	f003 011f 	and.w	r1, r3, #31
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	431a      	orrs	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3314      	adds	r3, #20
 8001b38:	461a      	mov	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	0e5b      	lsrs	r3, r3, #25
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	4413      	add	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	0d1b      	lsrs	r3, r3, #20
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	2107      	movs	r1, #7
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	0d1b      	lsrs	r3, r3, #20
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b72:	bf00      	nop
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0318 	and.w	r3, r3, #24
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ba4:	40d9      	lsrs	r1, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	400b      	ands	r3, r1
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	0007ffff 	.word	0x0007ffff

08001bc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6093      	str	r3, [r2, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c00:	d101      	bne.n	8001c06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c50:	d101      	bne.n	8001c56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_IsEnabled+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_IsEnabled+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cc6:	f043 0204 	orr.w	r2, r3, #4
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d101      	bne.n	8001cf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d101      	bne.n	8001d18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e126      	b.n	8001f90 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fc0f 	bl	8001574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff3f 	bl	8001bec <LL_ADC_IsDeepPowerDownEnabled>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff25 	bl	8001bc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff5a 	bl	8001c3c <LL_ADC_IsInternalRegulatorEnabled>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d115      	bne.n	8001dba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ff3e 	bl	8001c14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d98:	4b7f      	ldr	r3, [pc, #508]	; (8001f98 <HAL_ADC_Init+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	4a7f      	ldr	r2, [pc, #508]	; (8001f9c <HAL_ADC_Init+0x274>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	3301      	adds	r3, #1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff3c 	bl	8001c3c <LL_ADC_IsInternalRegulatorEnabled>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10d      	bne.n	8001de6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f043 0210 	orr.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff75 	bl	8001cda <LL_ADC_REG_IsConversionOngoing>
 8001df0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 80bf 	bne.w	8001f7e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 80bb 	bne.w	8001f7e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e10:	f043 0202 	orr.w	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff35 	bl	8001c8c <LL_ADC_IsEnabled>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e28:	485d      	ldr	r0, [pc, #372]	; (8001fa0 <HAL_ADC_Init+0x278>)
 8001e2a:	f7ff ff2f 	bl	8001c8c <LL_ADC_IsEnabled>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	485a      	ldr	r0, [pc, #360]	; (8001fa4 <HAL_ADC_Init+0x27c>)
 8001e3c:	f7ff fdac 	bl	8001998 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7e5b      	ldrb	r3, [r3, #25]
 8001e44:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e4a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e50:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e56:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d106      	bne.n	8001e7c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	045b      	lsls	r3, r3, #17
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <HAL_ADC_Init+0x280>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff25 	bl	8001d00 <LL_ADC_INJ_IsConversionOngoing>
 8001eb6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d13d      	bne.n	8001f3a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d13a      	bne.n	8001f3a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ed0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ee0:	f023 0302 	bic.w	r3, r3, #2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	69b9      	ldr	r1, [r7, #24]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d118      	bne.n	8001f2a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f0e:	4311      	orrs	r1, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	611a      	str	r2, [r3, #16]
 8001f28:	e007      	b.n	8001f3a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10c      	bne.n	8001f5c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f023 010f 	bic.w	r1, r3, #15
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	1e5a      	subs	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5a:	e007      	b.n	8001f6c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 020f 	bic.w	r2, r2, #15
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	f023 0303 	bic.w	r3, r3, #3
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
 8001f7c:	e007      	b.n	8001f8e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f043 0210 	orr.w	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000004 	.word	0x20000004
 8001f9c:	053e2d63 	.word	0x053e2d63
 8001fa0:	50040000 	.word	0x50040000
 8001fa4:	50040300 	.word	0x50040300
 8001fa8:	fff0c007 	.word	0xfff0c007

08001fac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fe8c 	bl	8001cda <LL_ADC_REG_IsConversionOngoing>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d167      	bne.n	8002098 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Start_DMA+0x2a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e063      	b.n	800209e <HAL_ADC_Start_DMA+0xf2>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fc5e 	bl	80028a0 <ADC_Enable>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d14f      	bne.n	800208e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f023 0206 	bic.w	r2, r3, #6
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	659a      	str	r2, [r3, #88]	; 0x58
 800201a:	e002      	b.n	8002022 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <HAL_ADC_Start_DMA+0xfc>)
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HAL_ADC_Start_DMA+0x100>)
 8002030:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <HAL_ADC_Start_DMA+0x104>)
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	221c      	movs	r2, #28
 8002040:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0210 	orr.w	r2, r2, #16
 8002058:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3340      	adds	r3, #64	; 0x40
 8002074:	4619      	mov	r1, r3
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f001 f8af 	bl	80031dc <HAL_DMA_Start_IT>
 800207e:	4603      	mov	r3, r0
 8002080:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fe13 	bl	8001cb2 <LL_ADC_REG_StartConversion>
 800208c:	e006      	b.n	800209c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002096:	e001      	b.n	800209c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002098:	2302      	movs	r3, #2
 800209a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800209c:	7dfb      	ldrb	r3, [r7, #23]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	080029ad 	.word	0x080029ad
 80020ac:	08002a85 	.word	0x08002a85
 80020b0:	08002aa1 	.word	0x08002aa1

080020b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0b6      	sub	sp, #216	; 0xd8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x22>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e3bb      	b.n	8002876 <HAL_ADC_ConfigChannel+0x79a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fde5 	bl	8001cda <LL_ADC_REG_IsConversionOngoing>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 83a0 	bne.w	8002858 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d824      	bhi.n	8002172 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	3b02      	subs	r3, #2
 800212e:	2b03      	cmp	r3, #3
 8002130:	d81b      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x8e>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_ADC_ConfigChannel+0x5c>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	08002149 	.word	0x08002149
 800213c:	08002151 	.word	0x08002151
 8002140:	08002159 	.word	0x08002159
 8002144:	08002161 	.word	0x08002161
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002148:	230c      	movs	r3, #12
 800214a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800214e:	e010      	b.n	8002172 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002150:	2312      	movs	r3, #18
 8002152:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002156:	e00c      	b.n	8002172 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002158:	2318      	movs	r3, #24
 800215a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800215e:	e008      	b.n	8002172 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002168:	e003      	b.n	8002172 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800216a:	2306      	movs	r3, #6
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002170:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002180:	f7ff fca6 	bl	8001ad0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fda6 	bl	8001cda <LL_ADC_REG_IsConversionOngoing>
 800218e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fdb2 	bl	8001d00 <LL_ADC_INJ_IsConversionOngoing>
 800219c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 81a4 	bne.w	80024f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 819f 	bne.w	80024f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	461a      	mov	r2, r3
 80021c2:	f7ff fcb1 	bl	8001b28 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00a      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6919      	ldr	r1, [r3, #16]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021f8:	f7ff fc02 	bl	8001a00 <LL_ADC_SetOffset>
 80021fc:	e179      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fc1f 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <HAL_ADC_ConfigChannel+0x14e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fc14 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	0e9b      	lsrs	r3, r3, #26
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	e01e      	b.n	8002268 <HAL_ADC_ConfigChannel+0x18c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fc09 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800224c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002250:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e004      	b.n	8002266 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800225c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1a4>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	e018      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1d6>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800229c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e004      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80022a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d106      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fbd8 	bl	8001a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fbbc 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x214>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fbb1 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	f003 021f 	and.w	r2, r3, #31
 80022ee:	e01e      	b.n	800232e <HAL_ADC_ConfigChannel+0x252>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2101      	movs	r1, #1
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fba6 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800230e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800231e:	2320      	movs	r3, #32
 8002320:	e004      	b.n	800232c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x26a>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0e9b      	lsrs	r3, r3, #26
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	e018      	b.n	8002378 <HAL_ADC_ConfigChannel+0x29c>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800235a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800235e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800236a:	2320      	movs	r3, #32
 800236c:	e004      	b.n	8002378 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800236e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fb75 	bl	8001a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2102      	movs	r1, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fb59 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x2da>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2102      	movs	r1, #2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fb4e 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	0e9b      	lsrs	r3, r3, #26
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	e01e      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x318>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2102      	movs	r1, #2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fb43 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80023d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80023dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e004      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80023e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_ADC_ConfigChannel+0x330>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	e014      	b.n	8002436 <HAL_ADC_ConfigChannel+0x35a>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800241a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800241c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002428:	2320      	movs	r3, #32
 800242a:	e004      	b.n	8002436 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800242c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002436:	429a      	cmp	r2, r3
 8002438:	d106      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	2102      	movs	r1, #2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fb16 	bl	8001a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2103      	movs	r1, #3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fafa 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x398>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2103      	movs	r1, #3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff faef 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	0e9b      	lsrs	r3, r3, #26
 800246e:	f003 021f 	and.w	r2, r3, #31
 8002472:	e017      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x3c8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2103      	movs	r1, #3
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fae4 	bl	8001a48 <LL_ADC_GetOffsetChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800249a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x3e0>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	e011      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x404>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80024ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024cc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80024ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e003      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80024d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d106      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2103      	movs	r1, #3
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fac1 	bl	8001a74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fbc8 	bl	8001c8c <LL_ADC_IsEnabled>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 8140 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6819      	ldr	r1, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	461a      	mov	r2, r3
 8002512:	f7ff fb35 	bl	8001b80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4a8f      	ldr	r2, [pc, #572]	; (8002758 <HAL_ADC_ConfigChannel+0x67c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	f040 8131 	bne.w	8002784 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <HAL_ADC_ConfigChannel+0x46e>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	3301      	adds	r3, #1
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2b09      	cmp	r3, #9
 8002540:	bf94      	ite	ls
 8002542:	2301      	movls	r3, #1
 8002544:	2300      	movhi	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	e019      	b.n	800257e <HAL_ADC_ConfigChannel+0x4a2>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800255c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e003      	b.n	800256e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b09      	cmp	r3, #9
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800257e:	2b00      	cmp	r3, #0
 8002580:	d079      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d107      	bne.n	800259e <HAL_ADC_ConfigChannel+0x4c2>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0e9b      	lsrs	r3, r3, #26
 8002594:	3301      	adds	r3, #1
 8002596:	069b      	lsls	r3, r3, #26
 8002598:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259c:	e015      	b.n	80025ca <HAL_ADC_ConfigChannel+0x4ee>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e003      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80025ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	069b      	lsls	r3, r3, #26
 80025c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x50e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	e017      	b.n	800261a <HAL_ADC_ConfigChannel+0x53e>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e003      	b.n	800260e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	ea42 0103 	orr.w	r1, r2, r3
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x564>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	0e9b      	lsrs	r3, r3, #26
 8002630:	3301      	adds	r3, #1
 8002632:	f003 021f 	and.w	r2, r3, #31
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	051b      	lsls	r3, r3, #20
 800263e:	e018      	b.n	8002672 <HAL_ADC_ConfigChannel+0x596>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002658:	2320      	movs	r3, #32
 800265a:	e003      	b.n	8002664 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	f003 021f 	and.w	r2, r3, #31
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002672:	430b      	orrs	r3, r1
 8002674:	e081      	b.n	800277a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x5b6>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	0e9b      	lsrs	r3, r3, #26
 8002688:	3301      	adds	r3, #1
 800268a:	069b      	lsls	r3, r3, #26
 800268c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002690:	e015      	b.n	80026be <HAL_ADC_ConfigChannel+0x5e2>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80026aa:	2320      	movs	r3, #32
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	069b      	lsls	r3, r3, #26
 80026ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_ADC_ConfigChannel+0x602>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	3301      	adds	r3, #1
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	e017      	b.n	800270e <HAL_ADC_ConfigChannel+0x632>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	61bb      	str	r3, [r7, #24]
  return result;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80026f6:	2320      	movs	r3, #32
 80026f8:	e003      	b.n	8002702 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	ea42 0103 	orr.w	r1, r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <HAL_ADC_ConfigChannel+0x65e>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	0e9b      	lsrs	r3, r3, #26
 8002724:	3301      	adds	r3, #1
 8002726:	f003 021f 	and.w	r2, r3, #31
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	3b1e      	subs	r3, #30
 8002732:	051b      	lsls	r3, r3, #20
 8002734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002738:	e01e      	b.n	8002778 <HAL_ADC_ConfigChannel+0x69c>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	60fb      	str	r3, [r7, #12]
  return result;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d104      	bne.n	800275c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e006      	b.n	8002764 <HAL_ADC_ConfigChannel+0x688>
 8002756:	bf00      	nop
 8002758:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 021f 	and.w	r2, r3, #31
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	3b1e      	subs	r3, #30
 8002772:	051b      	lsls	r3, r3, #20
 8002774:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002778:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277e:	4619      	mov	r1, r3
 8002780:	f7ff f9d2 	bl	8001b28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_ADC_ConfigChannel+0x7a4>)
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d06c      	beq.n	800286a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002790:	483c      	ldr	r0, [pc, #240]	; (8002884 <HAL_ADC_ConfigChannel+0x7a8>)
 8002792:	f7ff f927 	bl	80019e4 <LL_ADC_GetCommonPathInternalCh>
 8002796:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a3a      	ldr	r2, [pc, #232]	; (8002888 <HAL_ADC_ConfigChannel+0x7ac>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d127      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d121      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a35      	ldr	r2, [pc, #212]	; (800288c <HAL_ADC_ConfigChannel+0x7b0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d157      	bne.n	800286a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c2:	4619      	mov	r1, r3
 80027c4:	482f      	ldr	r0, [pc, #188]	; (8002884 <HAL_ADC_ConfigChannel+0x7a8>)
 80027c6:	f7ff f8fa 	bl	80019be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_ADC_ConfigChannel+0x7b4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	099b      	lsrs	r3, r3, #6
 80027d0:	4a30      	ldr	r2, [pc, #192]	; (8002894 <HAL_ADC_ConfigChannel+0x7b8>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	099b      	lsrs	r3, r3, #6
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027e4:	e002      	b.n	80027ec <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f9      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f2:	e03a      	b.n	800286a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a27      	ldr	r2, [pc, #156]	; (8002898 <HAL_ADC_ConfigChannel+0x7bc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d113      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10d      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1f      	ldr	r2, [pc, #124]	; (800288c <HAL_ADC_ConfigChannel+0x7b0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d12a      	bne.n	800286a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281c:	4619      	mov	r1, r3
 800281e:	4819      	ldr	r0, [pc, #100]	; (8002884 <HAL_ADC_ConfigChannel+0x7a8>)
 8002820:	f7ff f8cd 	bl	80019be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002824:	e021      	b.n	800286a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_ADC_ConfigChannel+0x7c0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d11c      	bne.n	800286a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d116      	bne.n	800286a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a12      	ldr	r2, [pc, #72]	; (800288c <HAL_ADC_ConfigChannel+0x7b0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d111      	bne.n	800286a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800284e:	4619      	mov	r1, r3
 8002850:	480c      	ldr	r0, [pc, #48]	; (8002884 <HAL_ADC_ConfigChannel+0x7a8>)
 8002852:	f7ff f8b4 	bl	80019be <LL_ADC_SetCommonPathInternalCh>
 8002856:	e008      	b.n	800286a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002872:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002876:	4618      	mov	r0, r3
 8002878:	37d8      	adds	r7, #216	; 0xd8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	80080000 	.word	0x80080000
 8002884:	50040300 	.word	0x50040300
 8002888:	c7520000 	.word	0xc7520000
 800288c:	50040000 	.word	0x50040000
 8002890:	20000004 	.word	0x20000004
 8002894:	053e2d63 	.word	0x053e2d63
 8002898:	cb840000 	.word	0xcb840000
 800289c:	80000001 	.word	0x80000001

080028a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f9eb 	bl	8001c8c <LL_ADC_IsEnabled>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d169      	bne.n	8002990 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <ADC_Enable+0xfc>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e055      	b.n	8002992 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f9ba 	bl	8001c64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028f0:	482b      	ldr	r0, [pc, #172]	; (80029a0 <ADC_Enable+0x100>)
 80028f2:	f7ff f877 	bl	80019e4 <LL_ADC_GetCommonPathInternalCh>
 80028f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <ADC_Enable+0x104>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	4a28      	ldr	r2, [pc, #160]	; (80029a8 <ADC_Enable+0x108>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800291a:	e002      	b.n	8002922 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	3b01      	subs	r3, #1
 8002920:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f9      	bne.n	800291c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002928:	f7ff f806 	bl	8001938 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800292e:	e028      	b.n	8002982 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f9a9 	bl	8001c8c <LL_ADC_IsEnabled>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff f98d 	bl	8001c64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800294a:	f7fe fff5 	bl	8001938 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d914      	bls.n	8002982 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d00d      	beq.n	8002982 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f043 0210 	orr.w	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e007      	b.n	8002992 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d1cf      	bne.n	8002930 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	8000003f 	.word	0x8000003f
 80029a0:	50040300 	.word	0x50040300
 80029a4:	20000004 	.word	0x20000004
 80029a8:	053e2d63 	.word	0x053e2d63

080029ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d14b      	bne.n	8002a5e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d021      	beq.n	8002a24 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f860 	bl	8001aaa <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d032      	beq.n	8002a56 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d12b      	bne.n	8002a56 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d11f      	bne.n	8002a56 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
 8002a22:	e018      	b.n	8002a56 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d111      	bne.n	8002a56 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7fe fcc2 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a5c:	e00e      	b.n	8002a7c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff fb2c 	bl	80020c8 <HAL_ADC_ErrorCallback>
}
 8002a70:	e004      	b.n	8002a7c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff fb0e 	bl	80020b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7ff fafe 	bl	80020c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <__NVIC_GetPriorityGrouping+0x18>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0307 	and.w	r3, r3, #7
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db0b      	blt.n	8002b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4907      	ldr	r1, [pc, #28]	; (8002b70 <__NVIC_EnableIRQ+0x38>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2001      	movs	r0, #1
 8002b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c40:	d301      	bcc.n	8002c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00f      	b.n	8002c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <SysTick_Config+0x40>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4e:	210f      	movs	r1, #15
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	f7ff ff8e 	bl	8002b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <SysTick_Config+0x40>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5e:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <SysTick_Config+0x40>)
 8002c60:	2207      	movs	r2, #7
 8002c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000e010 	.word	0xe000e010

08002c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff29 	bl	8002ad4 <__NVIC_SetPriorityGrouping>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff ff3e 	bl	8002b1c <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff8e 	bl	8002bc8 <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5d 	bl	8002b74 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff31 	bl	8002b38 <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffa2 	bl	8002c30 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e014      	b.n	8002d32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	791b      	ldrb	r3, [r3, #4]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7fe fcbf 	bl	800169c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	795b      	ldrb	r3, [r3, #5]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_DAC_Start+0x16>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e03b      	b.n	8002dc8 <HAL_DAC_Start+0x8e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d118      	bne.n	8002dba <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	e00f      	b.n	8002dba <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002da4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002da8:	d107      	bne.n	8002dba <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0202 	orr.w	r2, r2, #2
 8002db8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	3308      	adds	r3, #8
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e004      	b.n	8002e08 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3314      	adds	r3, #20
 8002e06:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b088      	sub	sp, #32
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	795b      	ldrb	r3, [r3, #5]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_DAC_ConfigChannel+0x1c>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e114      	b.n	8003064 <HAL_DAC_ConfigChannel+0x246>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2202      	movs	r2, #2
 8002e44:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	f040 8081 	bne.w	8002f52 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e50:	f7fe fd72 	bl	8001938 <HAL_GetTick>
 8002e54:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d140      	bne.n	8002ede <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e5c:	e018      	b.n	8002e90 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e5e:	f7fe fd6b 	bl	8001938 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d911      	bls.n	8002e90 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f043 0208 	orr.w	r2, r3, #8
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0e9      	b.n	8003064 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1df      	bne.n	8002e5e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f7fe fd56 	bl	8001950 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	6992      	ldr	r2, [r2, #24]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40
 8002eae:	e023      	b.n	8002ef8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eb0:	f7fe fd42 	bl	8001938 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d90f      	bls.n	8002ede <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	da0a      	bge.n	8002ede <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f043 0208 	orr.w	r2, r3, #8
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0c2      	b.n	8003064 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	dbe3      	blt.n	8002eb0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002ee8:	2001      	movs	r0, #1
 8002eea:	f7fe fd31 	bl	8001950 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	6992      	ldr	r2, [r2, #24]
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	ea02 0103 	and.w	r1, r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	21ff      	movs	r1, #255	; 0xff
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	ea02 0103 	and.w	r1, r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d11d      	bne.n	8002f96 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	221f      	movs	r2, #31
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	22c0      	movs	r2, #192	; 0xc0
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43da      	mvns	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	400a      	ands	r2, r1
 8003054:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e098      	b.n	80031b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <HAL_DMA_Init+0x150>)
 8003086:	429a      	cmp	r2, r3
 8003088:	d80f      	bhi.n	80030aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <HAL_DMA_Init+0x154>)
 8003092:	4413      	add	r3, r2
 8003094:	4a4b      	ldr	r2, [pc, #300]	; (80031c4 <HAL_DMA_Init+0x158>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	009a      	lsls	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a48      	ldr	r2, [pc, #288]	; (80031c8 <HAL_DMA_Init+0x15c>)
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
 80030a8:	e00e      	b.n	80030c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b46      	ldr	r3, [pc, #280]	; (80031cc <HAL_DMA_Init+0x160>)
 80030b2:	4413      	add	r3, r2
 80030b4:	4a43      	ldr	r2, [pc, #268]	; (80031c4 <HAL_DMA_Init+0x158>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	009a      	lsls	r2, r3, #2
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a42      	ldr	r2, [pc, #264]	; (80031d0 <HAL_DMA_Init+0x164>)
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003122:	d039      	beq.n	8003198 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	4a27      	ldr	r2, [pc, #156]	; (80031c8 <HAL_DMA_Init+0x15c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d11a      	bne.n	8003164 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_DMA_Init+0x168>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f003 031c 	and.w	r3, r3, #28
 800313a:	210f      	movs	r1, #15
 800313c:	fa01 f303 	lsl.w	r3, r1, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	4924      	ldr	r1, [pc, #144]	; (80031d4 <HAL_DMA_Init+0x168>)
 8003144:	4013      	ands	r3, r2
 8003146:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_DMA_Init+0x168>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 031c 	and.w	r3, r3, #28
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	491d      	ldr	r1, [pc, #116]	; (80031d4 <HAL_DMA_Init+0x168>)
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
 8003162:	e019      	b.n	8003198 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_DMA_Init+0x16c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f003 031c 	and.w	r3, r3, #28
 8003170:	210f      	movs	r1, #15
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	4917      	ldr	r1, [pc, #92]	; (80031d8 <HAL_DMA_Init+0x16c>)
 800317a:	4013      	ands	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_DMA_Init+0x16c>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6859      	ldr	r1, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f003 031c 	and.w	r3, r3, #28
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	4911      	ldr	r1, [pc, #68]	; (80031d8 <HAL_DMA_Init+0x16c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40020407 	.word	0x40020407
 80031c0:	bffdfff8 	.word	0xbffdfff8
 80031c4:	cccccccd 	.word	0xcccccccd
 80031c8:	40020000 	.word	0x40020000
 80031cc:	bffdfbf8 	.word	0xbffdfbf8
 80031d0:	40020400 	.word	0x40020400
 80031d4:	400200a8 	.word	0x400200a8
 80031d8:	400204a8 	.word	0x400204a8

080031dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_DMA_Start_IT+0x20>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e04b      	b.n	8003294 <HAL_DMA_Start_IT+0xb8>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d13a      	bne.n	8003286 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f8e0 	bl	80033fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 020e 	orr.w	r2, r2, #14
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e00f      	b.n	8003274 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0204 	bic.w	r2, r2, #4
 8003262:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 020a 	orr.w	r2, r2, #10
 8003272:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e005      	b.n	8003292 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003292:	7dfb      	ldrb	r3, [r7, #23]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f003 031c 	and.w	r3, r3, #28
 80032bc:	2204      	movs	r2, #4
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d026      	beq.n	8003316 <HAL_DMA_IRQHandler+0x7a>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d021      	beq.n	8003316 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d107      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0204 	bic.w	r2, r2, #4
 80032ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f003 021c 	and.w	r2, r3, #28
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	2104      	movs	r1, #4
 80032fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003302:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b00      	cmp	r3, #0
 800330a:	d071      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003314:	e06c      	b.n	80033f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f003 031c 	and.w	r3, r3, #28
 800331e:	2202      	movs	r2, #2
 8003320:	409a      	lsls	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d02e      	beq.n	8003388 <HAL_DMA_IRQHandler+0xec>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d029      	beq.n	8003388 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 020a 	bic.w	r2, r2, #10
 8003350:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f003 021c 	and.w	r2, r3, #28
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2102      	movs	r1, #2
 8003368:	fa01 f202 	lsl.w	r2, r1, r2
 800336c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d038      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003386:	e033      	b.n	80033f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f003 031c 	and.w	r3, r3, #28
 8003390:	2208      	movs	r2, #8
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d02a      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x156>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d025      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 020e 	bic.w	r2, r2, #14
 80033b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f003 021c 	and.w	r2, r3, #28
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
}
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	f003 021c 	and.w	r2, r3, #28
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b10      	cmp	r3, #16
 800342a:	d108      	bne.n	800343e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800343c:	e007      	b.n	800344e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800346a:	e148      	b.n	80036fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 813a 	beq.w	80036f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d005      	beq.n	800349c <HAL_GPIO_Init+0x40>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d130      	bne.n	80034fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d2:	2201      	movs	r2, #1
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	f003 0201 	and.w	r2, r3, #1
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b03      	cmp	r3, #3
 8003508:	d017      	beq.n	800353a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	2203      	movs	r2, #3
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d123      	bne.n	800358e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	08da      	lsrs	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3208      	adds	r2, #8
 800354e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	08da      	lsrs	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3208      	adds	r2, #8
 8003588:	6939      	ldr	r1, [r7, #16]
 800358a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	2203      	movs	r2, #3
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8094 	beq.w	80036f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d0:	4b52      	ldr	r3, [pc, #328]	; (800371c <HAL_GPIO_Init+0x2c0>)
 80035d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d4:	4a51      	ldr	r2, [pc, #324]	; (800371c <HAL_GPIO_Init+0x2c0>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6613      	str	r3, [r2, #96]	; 0x60
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_GPIO_Init+0x2c0>)
 80035de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035e8:	4a4d      	ldr	r2, [pc, #308]	; (8003720 <HAL_GPIO_Init+0x2c4>)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003612:	d00d      	beq.n	8003630 <HAL_GPIO_Init+0x1d4>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a43      	ldr	r2, [pc, #268]	; (8003724 <HAL_GPIO_Init+0x2c8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <HAL_GPIO_Init+0x1d0>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a42      	ldr	r2, [pc, #264]	; (8003728 <HAL_GPIO_Init+0x2cc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <HAL_GPIO_Init+0x1cc>
 8003624:	2302      	movs	r3, #2
 8003626:	e004      	b.n	8003632 <HAL_GPIO_Init+0x1d6>
 8003628:	2307      	movs	r3, #7
 800362a:	e002      	b.n	8003632 <HAL_GPIO_Init+0x1d6>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_GPIO_Init+0x1d6>
 8003630:	2300      	movs	r3, #0
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	f002 0203 	and.w	r2, r2, #3
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	4093      	lsls	r3, r2
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003642:	4937      	ldr	r1, [pc, #220]	; (8003720 <HAL_GPIO_Init+0x2c4>)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	3302      	adds	r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003650:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_GPIO_Init+0x2d0>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	43db      	mvns	r3, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003674:	4a2d      	ldr	r2, [pc, #180]	; (800372c <HAL_GPIO_Init+0x2d0>)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_GPIO_Init+0x2d0>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800369e:	4a23      	ldr	r2, [pc, #140]	; (800372c <HAL_GPIO_Init+0x2d0>)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036a4:	4b21      	ldr	r3, [pc, #132]	; (800372c <HAL_GPIO_Init+0x2d0>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_GPIO_Init+0x2d0>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_GPIO_Init+0x2d0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_GPIO_Init+0x2d0>)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3301      	adds	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	f47f aeaf 	bne.w	800346c <HAL_GPIO_Init+0x10>
  }
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40021000 	.word	0x40021000
 8003720:	40010000 	.word	0x40010000
 8003724:	48000400 	.word	0x48000400
 8003728:	48000800 	.word	0x48000800
 800372c:	40010400 	.word	0x40010400

08003730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e001      	b.n	8003752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800377c:	e002      	b.n	8003784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fdb4 	bl	800131c <HAL_GPIO_EXTI_Callback>
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40010400 	.word	0x40010400

080037c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40007000 	.word	0x40007000

080037dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ea:	d130      	bne.n	800384e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ec:	4b23      	ldr	r3, [pc, #140]	; (800387c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f8:	d038      	beq.n	800386c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003802:	4a1e      	ldr	r2, [pc, #120]	; (800387c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2232      	movs	r2, #50	; 0x32
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0c9b      	lsrs	r3, r3, #18
 800381c:	3301      	adds	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003820:	e002      	b.n	8003828 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3b01      	subs	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003834:	d102      	bne.n	800383c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f2      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d110      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e00f      	b.n	800386e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385a:	d007      	beq.n	800386c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800385c:	4b07      	ldr	r3, [pc, #28]	; (800387c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003864:	4a05      	ldr	r2, [pc, #20]	; (800387c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40007000 	.word	0x40007000
 8003880:	20000004 	.word	0x20000004
 8003884:	431bde83 	.word	0x431bde83

08003888 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f000 bc02 	b.w	80040a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389c:	4b96      	ldr	r3, [pc, #600]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a6:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80e4 	beq.w	8003a86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4c>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	f040 808b 	bne.w	80039e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	f040 8087 	bne.w	80039e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d4:	4b88      	ldr	r3, [pc, #544]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_OscConfig+0x64>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e3d9      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	4b81      	ldr	r3, [pc, #516]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_RCC_OscConfig+0x7e>
 80038fc:	4b7e      	ldr	r3, [pc, #504]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003904:	e005      	b.n	8003912 <HAL_RCC_OscConfig+0x8a>
 8003906:	4b7c      	ldr	r3, [pc, #496]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003912:	4293      	cmp	r3, r2
 8003914:	d223      	bcs.n	800395e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fd54 	bl	80043c8 <RCC_SetFlashLatencyFromMSIRange>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e3ba      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800392a:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a72      	ldr	r2, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b70      	ldr	r3, [pc, #448]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	496d      	ldr	r1, [pc, #436]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	4968      	ldr	r1, [pc, #416]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
 800395c:	e025      	b.n	80039aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800395e:	4b66      	ldr	r3, [pc, #408]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b63      	ldr	r3, [pc, #396]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	4960      	ldr	r1, [pc, #384]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800397c:	4b5e      	ldr	r3, [pc, #376]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	495b      	ldr	r1, [pc, #364]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fd14 	bl	80043c8 <RCC_SetFlashLatencyFromMSIRange>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e37a      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039aa:	f000 fc81 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b51      	ldr	r3, [pc, #324]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	4950      	ldr	r1, [pc, #320]	; (8003afc <HAL_RCC_OscConfig+0x274>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a4e      	ldr	r2, [pc, #312]	; (8003b00 <HAL_RCC_OscConfig+0x278>)
 80039c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039ca:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_RCC_OscConfig+0x27c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd ff62 	bl	8001898 <HAL_InitTick>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d052      	beq.n	8003a84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	e35e      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d032      	beq.n	8003a50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a42      	ldr	r2, [pc, #264]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f6:	f7fd ff9f 	bl	8001938 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039fe:	f7fd ff9b 	bl	8001938 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e347      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a10:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1c:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a35      	ldr	r2, [pc, #212]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a22:	f043 0308 	orr.w	r3, r3, #8
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b33      	ldr	r3, [pc, #204]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4930      	ldr	r1, [pc, #192]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	492b      	ldr	r1, [pc, #172]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
 8003a4e:	e01a      	b.n	8003a86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a28      	ldr	r2, [pc, #160]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a5c:	f7fd ff6c 	bl	8001938 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a64:	f7fd ff68 	bl	8001938 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e314      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1dc>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d073      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x21c>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d10e      	bne.n	8003abc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d10b      	bne.n	8003abc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d063      	beq.n	8003b78 <HAL_RCC_OscConfig+0x2f0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d15f      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e2f1      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d106      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
 8003ac6:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e025      	b.n	8003b20 <HAL_RCC_OscConfig+0x298>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003adc:	d114      	bne.n	8003b08 <HAL_RCC_OscConfig+0x280>
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a02      	ldr	r2, [pc, #8]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e013      	b.n	8003b20 <HAL_RCC_OscConfig+0x298>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	0800532c 	.word	0x0800532c
 8003b00:	20000004 	.word	0x20000004
 8003b04:	20000008 	.word	0x20000008
 8003b08:	4ba0      	ldr	r3, [pc, #640]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a9f      	ldr	r2, [pc, #636]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b9d      	ldr	r3, [pc, #628]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a9c      	ldr	r2, [pc, #624]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fd ff06 	bl	8001938 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fd ff02 	bl	8001938 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e2ae      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b42:	4b92      	ldr	r3, [pc, #584]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2a8>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fef2 	bl	8001938 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd feee 	bl	8001938 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e29a      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6a:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x2d0>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d060      	beq.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_OscConfig+0x310>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	d119      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d116      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b98:	4b7c      	ldr	r3, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x328>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e277      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb0:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	4973      	ldr	r1, [pc, #460]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc4:	e040      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d023      	beq.n	8003c16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bce:	4b6f      	ldr	r3, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6e      	ldr	r2, [pc, #440]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fd fead 	bl	8001938 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be2:	f7fd fea9 	bl	8001938 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e255      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf4:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	495f      	ldr	r1, [pc, #380]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
 8003c14:	e018      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5c      	ldr	r2, [pc, #368]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fd fe89 	bl	8001938 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2a:	f7fd fe85 	bl	8001938 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e231      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c3c:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d03c      	beq.n	8003cce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	4a4a      	ldr	r2, [pc, #296]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fd fe64 	bl	8001938 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7fd fe60 	bl	8001938 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e20c      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c86:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ef      	beq.n	8003c74 <HAL_RCC_OscConfig+0x3ec>
 8003c94:	e01b      	b.n	8003cce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c96:	4b3d      	ldr	r3, [pc, #244]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9c:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fe47 	bl	8001938 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cae:	f7fd fe43 	bl	8001938 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1ef      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ef      	bne.n	8003cae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80a6 	beq.w	8003e28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ce0:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d118      	bne.n	8003d46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d20:	f7fd fe0a 	bl	8001938 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fd fe06 	bl	8001938 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1b2      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <HAL_RCC_OscConfig+0x4d8>
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5e:	e029      	b.n	8003db4 <HAL_RCC_OscConfig+0x52c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d115      	bne.n	8003d94 <HAL_RCC_OscConfig+0x50c>
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	4a03      	ldr	r2, [pc, #12]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d88:	e014      	b.n	8003db4 <HAL_RCC_OscConfig+0x52c>
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40007000 	.word	0x40007000
 8003d94:	4b9a      	ldr	r3, [pc, #616]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	4a99      	ldr	r2, [pc, #612]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da4:	4b96      	ldr	r3, [pc, #600]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	4a95      	ldr	r2, [pc, #596]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d016      	beq.n	8003dea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fd fdbc 	bl	8001938 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fd fdb8 	bl	8001938 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e162      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dda:	4b89      	ldr	r3, [pc, #548]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ed      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x53c>
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fd fda5 	bl	8001938 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fd fda1 	bl	8001938 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e14b      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e08:	4b7d      	ldr	r3, [pc, #500]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ed      	bne.n	8003df2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1c:	4b78      	ldr	r3, [pc, #480]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	4a77      	ldr	r2, [pc, #476]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03c      	beq.n	8003eae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01c      	beq.n	8003e76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e3c:	4b70      	ldr	r3, [pc, #448]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e42:	4a6f      	ldr	r2, [pc, #444]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fd74 	bl	8001938 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e54:	f7fd fd70 	bl	8001938 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e11c      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e66:	4b66      	ldr	r3, [pc, #408]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ef      	beq.n	8003e54 <HAL_RCC_OscConfig+0x5cc>
 8003e74:	e01b      	b.n	8003eae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e76:	4b62      	ldr	r3, [pc, #392]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e7c:	4a60      	ldr	r2, [pc, #384]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fd fd57 	bl	8001938 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e8e:	f7fd fd53 	bl	8001938 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0ff      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ea0:	4b57      	ldr	r3, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ef      	bne.n	8003e8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80f3 	beq.w	800409e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	f040 80c9 	bne.w	8004054 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ec2:	4b4f      	ldr	r3, [pc, #316]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f003 0203 	and.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d12c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d123      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d11b      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d113      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d109      	bne.n	8003f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d06b      	beq.n	8004008 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d062      	beq.n	8003ffc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f36:	4b32      	ldr	r3, [pc, #200]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e0ac      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f46:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2d      	ldr	r2, [pc, #180]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f52:	f7fd fcf1 	bl	8001938 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd fced 	bl	8001938 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e099      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	4b24      	ldr	r3, [pc, #144]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <HAL_RCC_OscConfig+0x77c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	0112      	lsls	r2, r2, #4
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f92:	0212      	lsls	r2, r2, #8
 8003f94:	4311      	orrs	r1, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f9a:	0852      	lsrs	r2, r2, #1
 8003f9c:	3a01      	subs	r2, #1
 8003f9e:	0552      	lsls	r2, r2, #21
 8003fa0:	4311      	orrs	r1, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fa6:	0852      	lsrs	r2, r2, #1
 8003fa8:	3a01      	subs	r2, #1
 8003faa:	0652      	lsls	r2, r2, #25
 8003fac:	4311      	orrs	r1, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fb2:	06d2      	lsls	r2, r2, #27
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	4912      	ldr	r1, [pc, #72]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fbc:	4b10      	ldr	r3, [pc, #64]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd4:	f7fd fcb0 	bl	8001938 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd fcac 	bl	8001938 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e058      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <HAL_RCC_OscConfig+0x778>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ffa:	e050      	b.n	800409e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e04f      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
 8004000:	40021000 	.word	0x40021000
 8004004:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004008:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d144      	bne.n	800409e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004014:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004020:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800402c:	f7fd fc84 	bl	8001938 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd fc80 	bl	8001938 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e02c      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x7ac>
 8004052:	e024      	b.n	800409e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b0c      	cmp	r3, #12
 8004058:	d01f      	beq.n	800409a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 8004060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fd fc67 	bl	8001938 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fd fc63 	bl	8001938 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e00f      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	4905      	ldr	r1, [pc, #20]	; (80040a8 <HAL_RCC_OscConfig+0x820>)
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_RCC_OscConfig+0x824>)
 8004094:	4013      	ands	r3, r2
 8004096:	60cb      	str	r3, [r1, #12]
 8004098:	e001      	b.n	800409e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40021000 	.word	0x40021000
 80040ac:	feeefffc 	.word	0xfeeefffc

080040b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0e7      	b.n	8004294 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b75      	ldr	r3, [pc, #468]	; (800429c <HAL_RCC_ClockConfig+0x1ec>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b72      	ldr	r3, [pc, #456]	; (800429c <HAL_RCC_ClockConfig+0x1ec>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	4970      	ldr	r1, [pc, #448]	; (800429c <HAL_RCC_ClockConfig+0x1ec>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b6e      	ldr	r3, [pc, #440]	; (800429c <HAL_RCC_ClockConfig+0x1ec>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0cf      	b.n	8004294 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d010      	beq.n	8004122 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	4b66      	ldr	r3, [pc, #408]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410c:	429a      	cmp	r2, r3
 800410e:	d908      	bls.n	8004122 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004110:	4b63      	ldr	r3, [pc, #396]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4960      	ldr	r1, [pc, #384]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04c      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004136:	4b5a      	ldr	r3, [pc, #360]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d121      	bne.n	8004186 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0a6      	b.n	8004294 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800414e:	4b54      	ldr	r3, [pc, #336]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d115      	bne.n	8004186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e09a      	b.n	8004294 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004166:	4b4e      	ldr	r3, [pc, #312]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e08e      	b.n	8004294 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004176:	4b4a      	ldr	r3, [pc, #296]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e086      	b.n	8004294 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004186:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4943      	ldr	r1, [pc, #268]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fd fbce 	bl	8001938 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fd fbca 	bl	8001938 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e06e      	b.n	8004294 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b3a      	ldr	r3, [pc, #232]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 020c 	and.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1eb      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d208      	bcs.n	80041f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	492b      	ldr	r1, [pc, #172]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f6:	4b29      	ldr	r3, [pc, #164]	; (800429c <HAL_RCC_ClockConfig+0x1ec>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d210      	bcs.n	8004226 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <HAL_RCC_ClockConfig+0x1ec>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 0207 	bic.w	r2, r3, #7
 800420c:	4923      	ldr	r1, [pc, #140]	; (800429c <HAL_RCC_ClockConfig+0x1ec>)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004214:	4b21      	ldr	r3, [pc, #132]	; (800429c <HAL_RCC_ClockConfig+0x1ec>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d001      	beq.n	8004226 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e036      	b.n	8004294 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004232:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	4918      	ldr	r1, [pc, #96]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004250:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4910      	ldr	r1, [pc, #64]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004264:	f000 f824 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	490b      	ldr	r1, [pc, #44]	; (80042a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
 8004280:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004282:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1fc>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fd fb05 	bl	8001898 <HAL_InitTick>
 800428e:	4603      	mov	r3, r0
 8004290:	72fb      	strb	r3, [r7, #11]

  return status;
 8004292:	7afb      	ldrb	r3, [r7, #11]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40022000 	.word	0x40022000
 80042a0:	40021000 	.word	0x40021000
 80042a4:	0800532c 	.word	0x0800532c
 80042a8:	20000004 	.word	0x20000004
 80042ac:	20000008 	.word	0x20000008

080042b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	; 0x24
 80042b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042be:	4b3e      	ldr	r3, [pc, #248]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042c8:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x34>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d121      	bne.n	8004322 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d11e      	bne.n	8004322 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042e4:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042f0:	4b31      	ldr	r3, [pc, #196]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f6:	0a1b      	lsrs	r3, r3, #8
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e005      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004300:	4b2d      	ldr	r3, [pc, #180]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800430c:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004314:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004320:	e00a      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d102      	bne.n	800432e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	e004      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b08      	cmp	r3, #8
 8004332:	d101      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004334:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004336:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d134      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800433e:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d003      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0xa6>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d003      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0xac>
 8004354:	e005      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004358:	617b      	str	r3, [r7, #20]
      break;
 800435a:	e005      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800435e:	617b      	str	r3, [r7, #20]
      break;
 8004360:	e002      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	617b      	str	r3, [r7, #20]
      break;
 8004366:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	3301      	adds	r3, #1
 8004374:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004376:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	fb03 f202 	mul.w	r2, r3, r2
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	0e5b      	lsrs	r3, r3, #25
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	3301      	adds	r3, #1
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043a8:	69bb      	ldr	r3, [r7, #24]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3724      	adds	r7, #36	; 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	0800533c 	.word	0x0800533c
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	007a1200 	.word	0x007a1200

080043c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043e0:	f7ff f9ee 	bl	80037c0 <HAL_PWREx_GetVoltageRange>
 80043e4:	6178      	str	r0, [r7, #20]
 80043e6:	e014      	b.n	8004412 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	6593      	str	r3, [r2, #88]	; 0x58
 80043f4:	4b22      	ldr	r3, [pc, #136]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004400:	f7ff f9de 	bl	80037c0 <HAL_PWREx_GetVoltageRange>
 8004404:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004410:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d10b      	bne.n	8004432 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d919      	bls.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2ba0      	cmp	r3, #160	; 0xa0
 8004424:	d902      	bls.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004426:	2302      	movs	r3, #2
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e013      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800442c:	2301      	movs	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	e010      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d902      	bls.n	800443e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004438:	2303      	movs	r3, #3
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e00a      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d102      	bne.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004444:	2302      	movs	r3, #2
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e004      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b70      	cmp	r3, #112	; 0x70
 800444e:	d101      	bne.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004450:	2301      	movs	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f023 0207 	bic.w	r2, r3, #7
 800445c:	4909      	ldr	r1, [pc, #36]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	429a      	cmp	r2, r3
 8004470:	d001      	beq.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	40022000 	.word	0x40022000

08004488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004490:	2300      	movs	r3, #0
 8004492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004494:	2300      	movs	r3, #0
 8004496:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d031      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044ac:	d01a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80044ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044b2:	d814      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044bc:	d10f      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044be:	4b5d      	ldr	r3, [pc, #372]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	4a5c      	ldr	r2, [pc, #368]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ca:	e00c      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f9ce 	bl	8004874 <RCCEx_PLLSAI1_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044dc:	e003      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	74fb      	strb	r3, [r7, #19]
      break;
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ec:	4b51      	ldr	r3, [pc, #324]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fa:	494e      	ldr	r1, [pc, #312]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004502:	e001      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 809e 	beq.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800451a:	4b46      	ldr	r3, [pc, #280]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	4b40      	ldr	r3, [pc, #256]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	4a3f      	ldr	r2, [pc, #252]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453a:	6593      	str	r3, [r2, #88]	; 0x58
 800453c:	4b3d      	ldr	r3, [pc, #244]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004548:	2301      	movs	r3, #1
 800454a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800454c:	4b3a      	ldr	r3, [pc, #232]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a39      	ldr	r2, [pc, #228]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004558:	f7fd f9ee 	bl	8001938 <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800455e:	e009      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004560:	f7fd f9ea 	bl	8001938 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d902      	bls.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	74fb      	strb	r3, [r7, #19]
        break;
 8004572:	e005      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004574:	4b30      	ldr	r3, [pc, #192]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d15a      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004586:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004590:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d019      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045a2:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045ae:	4b21      	ldr	r3, [pc, #132]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	4a1b      	ldr	r2, [pc, #108]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045ce:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d016      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fd f9aa 	bl	8001938 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e6:	e00b      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd f9a6 	bl	8001938 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d902      	bls.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	74fb      	strb	r3, [r7, #19]
            break;
 80045fe:	e006      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0ec      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10b      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004622:	4904      	ldr	r1, [pc, #16]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800462a:	e009      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800462c:	7cfb      	ldrb	r3, [r7, #19]
 800462e:	74bb      	strb	r3, [r7, #18]
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
 8004638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463c:	7cfb      	ldrb	r3, [r7, #19]
 800463e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004640:	7c7b      	ldrb	r3, [r7, #17]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d105      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004646:	4b8a      	ldr	r3, [pc, #552]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	4a89      	ldr	r2, [pc, #548]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800464c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004650:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800465e:	4b84      	ldr	r3, [pc, #528]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f023 0203 	bic.w	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4980      	ldr	r1, [pc, #512]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004680:	4b7b      	ldr	r3, [pc, #492]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f023 020c 	bic.w	r2, r3, #12
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	4978      	ldr	r1, [pc, #480]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046a2:	4b73      	ldr	r3, [pc, #460]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	496f      	ldr	r1, [pc, #444]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046c4:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	4967      	ldr	r1, [pc, #412]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046e6:	4b62      	ldr	r3, [pc, #392]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	495e      	ldr	r1, [pc, #376]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004708:	4b59      	ldr	r3, [pc, #356]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	4956      	ldr	r1, [pc, #344]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800472a:	4b51      	ldr	r3, [pc, #324]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	494d      	ldr	r1, [pc, #308]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d028      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800474c:	4b48      	ldr	r3, [pc, #288]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4945      	ldr	r1, [pc, #276]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476a:	d106      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800476c:	4b40      	ldr	r3, [pc, #256]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a3f      	ldr	r2, [pc, #252]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004776:	60d3      	str	r3, [r2, #12]
 8004778:	e011      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004782:	d10c      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	2101      	movs	r1, #1
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f872 	bl	8004874 <RCCEx_PLLSAI1_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d028      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b8:	492d      	ldr	r1, [pc, #180]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c8:	d106      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ca:	4b29      	ldr	r3, [pc, #164]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	4a28      	ldr	r2, [pc, #160]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d4:	60d3      	str	r3, [r2, #12]
 80047d6:	e011      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e0:	d10c      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2101      	movs	r1, #1
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f843 	bl	8004874 <RCCEx_PLLSAI1_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01c      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004816:	4916      	ldr	r1, [pc, #88]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004826:	d10c      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f820 	bl	8004874 <RCCEx_PLLSAI1_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800483e:	7cfb      	ldrb	r3, [r7, #19]
 8004840:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485c:	4904      	ldr	r1, [pc, #16]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004864:	7cbb      	ldrb	r3, [r7, #18]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000

08004874 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004882:	4b74      	ldr	r3, [pc, #464]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d018      	beq.n	80048c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800488e:	4b71      	ldr	r3, [pc, #452]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0203 	and.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d10d      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
       ||
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048a6:	4b6b      	ldr	r3, [pc, #428]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
       ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d047      	beq.n	800494a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	e044      	b.n	800494a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d018      	beq.n	80048fa <RCCEx_PLLSAI1_Config+0x86>
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d825      	bhi.n	8004918 <RCCEx_PLLSAI1_Config+0xa4>
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d002      	beq.n	80048d6 <RCCEx_PLLSAI1_Config+0x62>
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d009      	beq.n	80048e8 <RCCEx_PLLSAI1_Config+0x74>
 80048d4:	e020      	b.n	8004918 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048d6:	4b5f      	ldr	r3, [pc, #380]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d11d      	bne.n	800491e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e6:	e01a      	b.n	800491e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048e8:	4b5a      	ldr	r3, [pc, #360]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d116      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f8:	e013      	b.n	8004922 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048fa:	4b56      	ldr	r3, [pc, #344]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004906:	4b53      	ldr	r3, [pc, #332]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004916:	e006      	b.n	8004926 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      break;
 800491c:	e004      	b.n	8004928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800491e:	bf00      	nop
 8004920:	e002      	b.n	8004928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004922:	bf00      	nop
 8004924:	e000      	b.n	8004928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004926:	bf00      	nop
    }

    if(status == HAL_OK)
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800492e:	4b49      	ldr	r3, [pc, #292]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6819      	ldr	r1, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	430b      	orrs	r3, r1
 8004944:	4943      	ldr	r1, [pc, #268]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004946:	4313      	orrs	r3, r2
 8004948:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d17c      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004950:	4b40      	ldr	r3, [pc, #256]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3f      	ldr	r2, [pc, #252]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004956:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800495a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495c:	f7fc ffec 	bl	8001938 <HAL_GetTick>
 8004960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004962:	e009      	b.n	8004978 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004964:	f7fc ffe8 	bl	8001938 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d902      	bls.n	8004978 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	73fb      	strb	r3, [r7, #15]
        break;
 8004976:	e005      	b.n	8004984 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004978:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ef      	bne.n	8004964 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d15f      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d110      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004990:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004998:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6892      	ldr	r2, [r2, #8]
 80049a0:	0211      	lsls	r1, r2, #8
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68d2      	ldr	r2, [r2, #12]
 80049a6:	06d2      	lsls	r2, r2, #27
 80049a8:	430a      	orrs	r2, r1
 80049aa:	492a      	ldr	r1, [pc, #168]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	610b      	str	r3, [r1, #16]
 80049b0:	e027      	b.n	8004a02 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d112      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b8:	4b26      	ldr	r3, [pc, #152]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6892      	ldr	r2, [r2, #8]
 80049c8:	0211      	lsls	r1, r2, #8
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6912      	ldr	r2, [r2, #16]
 80049ce:	0852      	lsrs	r2, r2, #1
 80049d0:	3a01      	subs	r2, #1
 80049d2:	0552      	lsls	r2, r2, #21
 80049d4:	430a      	orrs	r2, r1
 80049d6:	491f      	ldr	r1, [pc, #124]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	610b      	str	r3, [r1, #16]
 80049dc:	e011      	b.n	8004a02 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049de:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	0211      	lsls	r1, r2, #8
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6952      	ldr	r2, [r2, #20]
 80049f4:	0852      	lsrs	r2, r2, #1
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0652      	lsls	r2, r2, #25
 80049fa:	430a      	orrs	r2, r1
 80049fc:	4915      	ldr	r1, [pc, #84]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0e:	f7fc ff93 	bl	8001938 <HAL_GetTick>
 8004a12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a14:	e009      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a16:	f7fc ff8f 	bl	8001938 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d902      	bls.n	8004a2a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	73fb      	strb	r3, [r7, #15]
          break;
 8004a28:	e005      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ef      	beq.n	8004a16 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000

08004a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e049      	b.n	8004afe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fe4a 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f000 fa82 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d001      	beq.n	8004b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e03b      	b.n	8004b98 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <HAL_TIM_Base_Start_IT+0x4e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4a:	d004      	beq.n	8004b56 <HAL_TIM_Base_Start_IT+0x4e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d115      	bne.n	8004b82 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	4b13      	ldr	r3, [pc, #76]	; (8004bac <HAL_TIM_Base_Start_IT+0xa4>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b06      	cmp	r3, #6
 8004b66:	d015      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x8c>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d011      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b80:	e008      	b.n	8004b94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e000      	b.n	8004b96 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	00010007 	.word	0x00010007

08004bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0202 	mvn.w	r2, #2
 8004be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9b2 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9a4 	bl	8004f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f9b5 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d020      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0204 	mvn.w	r2, #4
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f98c 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f97e 	bl	8004f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f98f 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0208 	mvn.w	r2, #8
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2204      	movs	r2, #4
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f966 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f958 	bl	8004f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f969 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d020      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0210 	mvn.w	r2, #16
 8004cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2208      	movs	r2, #8
 8004cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f940 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004ce4:	e005      	b.n	8004cf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f932 	bl	8004f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f943 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0201 	mvn.w	r2, #1
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fc fb32 	bl	8001380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00c      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 faa5 	bl	8005294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00c      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fa9d 	bl	80052a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8fd 	bl	8004f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f06f 0220 	mvn.w	r2, #32
 8004dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fa65 	bl	8005280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_ConfigClockSource+0x1c>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e0b6      	b.n	8004f48 <HAL_TIM_ConfigClockSource+0x18a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dfc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e16:	d03e      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xd8>
 8004e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1c:	f200 8087 	bhi.w	8004f2e <HAL_TIM_ConfigClockSource+0x170>
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	f000 8086 	beq.w	8004f34 <HAL_TIM_ConfigClockSource+0x176>
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2c:	d87f      	bhi.n	8004f2e <HAL_TIM_ConfigClockSource+0x170>
 8004e2e:	2b70      	cmp	r3, #112	; 0x70
 8004e30:	d01a      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0xaa>
 8004e32:	2b70      	cmp	r3, #112	; 0x70
 8004e34:	d87b      	bhi.n	8004f2e <HAL_TIM_ConfigClockSource+0x170>
 8004e36:	2b60      	cmp	r3, #96	; 0x60
 8004e38:	d050      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0x11e>
 8004e3a:	2b60      	cmp	r3, #96	; 0x60
 8004e3c:	d877      	bhi.n	8004f2e <HAL_TIM_ConfigClockSource+0x170>
 8004e3e:	2b50      	cmp	r3, #80	; 0x50
 8004e40:	d03c      	beq.n	8004ebc <HAL_TIM_ConfigClockSource+0xfe>
 8004e42:	2b50      	cmp	r3, #80	; 0x50
 8004e44:	d873      	bhi.n	8004f2e <HAL_TIM_ConfigClockSource+0x170>
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d058      	beq.n	8004efc <HAL_TIM_ConfigClockSource+0x13e>
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d86f      	bhi.n	8004f2e <HAL_TIM_ConfigClockSource+0x170>
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	d064      	beq.n	8004f1c <HAL_TIM_ConfigClockSource+0x15e>
 8004e52:	2b30      	cmp	r3, #48	; 0x30
 8004e54:	d86b      	bhi.n	8004f2e <HAL_TIM_ConfigClockSource+0x170>
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d060      	beq.n	8004f1c <HAL_TIM_ConfigClockSource+0x15e>
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d867      	bhi.n	8004f2e <HAL_TIM_ConfigClockSource+0x170>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d05c      	beq.n	8004f1c <HAL_TIM_ConfigClockSource+0x15e>
 8004e62:	2b10      	cmp	r3, #16
 8004e64:	d05a      	beq.n	8004f1c <HAL_TIM_ConfigClockSource+0x15e>
 8004e66:	e062      	b.n	8004f2e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e78:	f000 f97c 	bl	8005174 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]
      break;
 8004e94:	e04f      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea6:	f000 f965 	bl	8005174 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb8:	609a      	str	r2, [r3, #8]
      break;
 8004eba:	e03c      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f000 f8d9 	bl	8005080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2150      	movs	r1, #80	; 0x50
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f932 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004eda:	e02c      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f000 f8f8 	bl	80050de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2160      	movs	r1, #96	; 0x60
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f922 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004efa:	e01c      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f000 f8b9 	bl	8005080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2140      	movs	r1, #64	; 0x40
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 f912 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004f1a:	e00c      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f000 f909 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004f2c:	e003      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	73fb      	strb	r3, [r7, #15]
      break;
 8004f32:	e000      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a30      	ldr	r2, [pc, #192]	; (8005074 <TIM_Base_SetConfig+0xd4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0x20>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbe:	d108      	bne.n	8004fd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a27      	ldr	r2, [pc, #156]	; (8005074 <TIM_Base_SetConfig+0xd4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a24      	ldr	r2, [pc, #144]	; (8005078 <TIM_Base_SetConfig+0xd8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x52>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a23      	ldr	r2, [pc, #140]	; (800507c <TIM_Base_SetConfig+0xdc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a12      	ldr	r2, [pc, #72]	; (8005074 <TIM_Base_SetConfig+0xd4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_Base_SetConfig+0xa0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a11      	ldr	r2, [pc, #68]	; (8005078 <TIM_Base_SetConfig+0xd8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_Base_SetConfig+0xa0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <TIM_Base_SetConfig+0xdc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d103      	bne.n	8005048 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f023 0201 	bic.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]
  }
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400

08005080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f023 030a 	bic.w	r3, r3, #10
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 0210 	bic.w	r2, r3, #16
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005108:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800511a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	f043 0307 	orr.w	r3, r3, #7
 8005160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	431a      	orrs	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e04f      	b.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a21      	ldr	r2, [pc, #132]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d108      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a14      	ldr	r2, [pc, #80]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d004      	beq.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a10      	ldr	r2, [pc, #64]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10c      	bne.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005246:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40014000 	.word	0x40014000

08005280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <memset>:
 80052bc:	4402      	add	r2, r0
 80052be:	4603      	mov	r3, r0
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d100      	bne.n	80052c6 <memset+0xa>
 80052c4:	4770      	bx	lr
 80052c6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ca:	e7f9      	b.n	80052c0 <memset+0x4>

080052cc <__libc_init_array>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	4d0d      	ldr	r5, [pc, #52]	; (8005304 <__libc_init_array+0x38>)
 80052d0:	4c0d      	ldr	r4, [pc, #52]	; (8005308 <__libc_init_array+0x3c>)
 80052d2:	1b64      	subs	r4, r4, r5
 80052d4:	10a4      	asrs	r4, r4, #2
 80052d6:	2600      	movs	r6, #0
 80052d8:	42a6      	cmp	r6, r4
 80052da:	d109      	bne.n	80052f0 <__libc_init_array+0x24>
 80052dc:	4d0b      	ldr	r5, [pc, #44]	; (800530c <__libc_init_array+0x40>)
 80052de:	4c0c      	ldr	r4, [pc, #48]	; (8005310 <__libc_init_array+0x44>)
 80052e0:	f000 f818 	bl	8005314 <_init>
 80052e4:	1b64      	subs	r4, r4, r5
 80052e6:	10a4      	asrs	r4, r4, #2
 80052e8:	2600      	movs	r6, #0
 80052ea:	42a6      	cmp	r6, r4
 80052ec:	d105      	bne.n	80052fa <__libc_init_array+0x2e>
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f4:	4798      	blx	r3
 80052f6:	3601      	adds	r6, #1
 80052f8:	e7ee      	b.n	80052d8 <__libc_init_array+0xc>
 80052fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fe:	4798      	blx	r3
 8005300:	3601      	adds	r6, #1
 8005302:	e7f2      	b.n	80052ea <__libc_init_array+0x1e>
 8005304:	0800536c 	.word	0x0800536c
 8005308:	0800536c 	.word	0x0800536c
 800530c:	0800536c 	.word	0x0800536c
 8005310:	08005370 	.word	0x08005370

08005314 <_init>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	bf00      	nop
 8005318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531a:	bc08      	pop	{r3}
 800531c:	469e      	mov	lr, r3
 800531e:	4770      	bx	lr

08005320 <_fini>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr
